# GitHub Copilot Setup Steps for ESP32 Distance Project

## Prerequisites
- VS Code with GitHub Copilot extension
- ESP-IDF v5.4.1 installed
- Git repository cloned locally

## Setup Steps

### 1. Clone Repository
```bash
git clone <repository-url>
cd distance
```

### 2. Verify GitHub Copilot Custom Prompts
Ensure the following structure exists in your workspace:
```
.github/
├── copilot-instructions.md
├── prompts/
│   ├── agent.software-engineer.prompt.md
│   └── unit-tester.prompt.md
├── prompt-snippets/
│   ├── esp32-coding-standards.md
│   ├── esp32-build-commands.md
│   ├── commit-message.md
│   ├── build-instructions.md
│   ├── development.md
│   └── readme.md
└── workflows/
    └── copilot-setup-steps.yml
```

### 3. Test Copilot Integration
- Open any `.c` or `.h` file in the project
- Start a Copilot chat session
- Verify that ESP32-specific context is loaded automatically
- Test with: "Generate a function to read from HC-SR04 sensor"

### 4. Configure ESP-IDF Environment
```powershell
# Windows setup command
cmd /c "cd /D C:\workspace\ESP32_Projects\distance && C:\workspace\ESP32_Projects\esp\v5.4.1\esp-idf\export.bat && idf.py build"
```

### 5. Verify Custom Prompts Work
- Try using the unit-tester prompt: `@unit-tester.prompt.md Generate tests for distance_sensor_read function`
- Try using the software engineer agent: `@agent.software-engineer.prompt.md Help me implement HTTPS server`

### 6. Test Build System
```powershell
# Build the project
cmd /c "cd /D C:\workspace\ESP32_Projects\distance && C:\workspace\ESP32_Projects\esp\v5.4.1\esp-idf\export.bat && idf.py build"

# Check memory usage
cmd /c "cd /D C:\workspace\ESP32_Projects\distance && C:\workspace\ESP32_Projects\esp\v5.4.1\esp-idf\export.bat && idf.py size"
```

## Validation Checklist

- [ ] Copilot recognizes ESP32-specific context automatically
- [ ] Custom prompts are accessible via `@` syntax
- [ ] Build commands work with proper ESP-IDF environment
- [ ] Memory configuration shows 4MB flash with ~41% free
- [ ] Component-based architecture is understood by Copilot
- [ ] HTTPS implementation context is available

## Troubleshooting

### Copilot Not Loading Custom Instructions
- Ensure `.github/copilot-instructions.md` exists
- Restart VS Code
- Check that the workspace folder contains the `.github` directory

### Custom Prompts Not Available
- Verify files are in `.github/prompts/` directory
- Check file names end with `.prompt.md`
- Restart VS Code and reload workspace

### Build Commands Failing
- Verify ESP-IDF installation path in commands
- Ensure capital `C:` in drive letter for MCP tools
- Check that all environment variables are set correctly

### Memory Configuration Issues
- Run `idf.py menuconfig` to verify flash size (4MB)
- Check partition table is set to "Single App Large"
- Verify `sdkconfig` file is properly configured

## Next Steps After Setup
1. Review current project status in `Features-completed.md`
2. Check planned HTTPS implementation in `Features-planned.md`
3. Start with Step 4.1: Certificate Generation and Embedding
4. Use GitHub Copilot with custom prompts for development