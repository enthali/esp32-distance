{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the ESP32 Distance Sensor Project!","text":"<p>This project brings together the ESP32, an HC-SR04 ultrasonic sensor, and a WS2812 LED strip to create a fun, interactive distance display. Whether you're here to tinker, learn embedded development, or join our hands-on workshop\u2014you're in the right place!</p>"},{"location":"#get-started","title":"\ud83d\ude80 Get Started","text":"<ul> <li>Curious? Jump right in, fire up your codespace and explore the code, hardware, and live demos.</li> <li>New to ESP32? Check out our Getting Started Guide for step-by-step help.</li> <li>Want to build it yourself? See the Hardware Setup and Workshop Prerequisites.</li> <li>Ready for a challenge? Try the Workshop Exercises and level up your skills!</li> </ul>"},{"location":"#why-this-project","title":"\ud83d\udca1 Why this project?","text":"<ul> <li>Learn modern embedded development with real hardware</li> <li>Use GitHub Codespaces and Copilot for a seamless dev experience</li> <li>See your code come to life\u2014literally lighting up!</li> </ul>"},{"location":"#development-resources","title":"\ud83d\udee0\ufe0f Development Resources","text":""},{"location":"#emulation-debugging","title":"Emulation &amp; Debugging","text":"<ul> <li>QEMU Emulator Guide - Develop without hardware using full ESP32 emulation</li> <li>Debugging with GDB - Step through code with breakpoints in Codespaces</li> <li>Network Internals - Deep dive into UART-based IP tunnel</li> </ul>"},{"location":"#development-environment","title":"Development Environment","text":"<ul> <li>Dev Container Setup - GitHub Codespaces and local Docker setup</li> <li>Getting Started - Build, flash, and monitor your ESP32</li> </ul>"},{"location":"#community-support","title":"\ud83c\udfaf Community &amp; Support","text":"<p>If you get stuck, don't hesitate to ask questions, open an issue, or join the discussion on our GitHub repository. This is a friendly space for makers, learners, and tinkerers of all levels\u2014everyone is welcome!</p> <p>Have fun, experiment, and happy coding! \ud83c\udf89</p>"},{"location":"emulator-support/","title":"ESP32 Distance Sensor Emulator Support","text":"<p>This document explains the emulator support implementation for the ESP32 distance sensor project, which enables development and testing without physical hardware using QEMU.</p>"},{"location":"emulator-support/#overview","title":"Overview","text":"<p>The emulator support provides hardware abstraction through separate simulator implementations that maintain identical APIs to the hardware components. This allows the same application code to run in both hardware and emulated environments without modification.</p>"},{"location":"emulator-support/#architecture","title":"Architecture","text":""},{"location":"emulator-support/#hardware-abstraction-strategy","title":"Hardware Abstraction Strategy","text":"<p>The implementation uses a clean separation approach: - Same headers: Identical APIs for both hardware and simulator versions - Different source files: CMake selects appropriate implementation at build time - No #ifdef clutter: Clean, maintainable code without conditional compilation</p>"},{"location":"emulator-support/#components","title":"Components","text":""},{"location":"emulator-support/#1-distance-sensor-simulator-distance_sensor_simc","title":"1. Distance Sensor Simulator (<code>distance_sensor_sim.c</code>)","text":"<ul> <li>API Compatibility: Identical to hardware version (<code>distance_sensor.h</code>)</li> <li>Animation: 5cm \u2192 60cm \u2192 5cm linear sweep with 1mm steps</li> <li>Timing: Configurable interval (default 1 second for clear visualization)</li> <li>Queue Architecture: Same dual-queue system as hardware for real-time behavior</li> <li>Error Handling: Complete status codes and overflow management</li> </ul>"},{"location":"emulator-support/#2-led-controller-simulator-led_controller_simc","title":"2. LED Controller Simulator (<code>led_controller_sim.c</code>)","text":"<ul> <li>API Compatibility: Identical to hardware version (<code>led_controller.h</code>)</li> <li>Visualization: Unicode emoji blocks in terminal (\ud83d\udd34\ud83d\udfe2\ud83d\udd35\u26aa\ud83d\udfe1\ud83d\udfe3\u26ab\ud83d\udfe4)</li> <li>Rate Limiting: Output limited to ~1Hz to prevent terminal spam</li> <li>Color Mapping: Intelligent RGB-to-emoji conversion</li> <li>Buffer Management: Same pixel operations as hardware</li> </ul>"},{"location":"emulator-support/#3-wifi-manager","title":"3. WiFi Manager","text":"<ul> <li>No Changes Needed: Runs as-is without network events</li> <li>Web Interface: Still accessible (localhost without network)</li> </ul>"},{"location":"emulator-support/#build-configuration","title":"Build Configuration","text":""},{"location":"emulator-support/#kconfig-options","title":"Kconfig Options","text":"<p>New configuration options in <code>main/Kconfig.projbuild</code>:</p> <pre><code>config TARGET_EMULATOR\n    bool \"Build for QEMU emulator\"\n    default n\n    help\n        Enable this option to build for QEMU emulator instead of real hardware\n\nconfig EMULATOR_MOCK_SENSOR\n    bool \"Use mocked sensor data in emulator\"\n    depends on TARGET_EMULATOR\n    default y\n    help\n        Generate simulated distance sensor readings\n</code></pre>"},{"location":"emulator-support/#cmake-integration","title":"CMake Integration","text":"<p>The build system automatically selects the correct source files:</p> <p>Distance Sensor (<code>components/distance_sensor/CMakeLists.txt</code>): <pre><code>if(CONFIG_TARGET_EMULATOR)\n    set(COMPONENT_SRCS \"distance_sensor_sim.c\")\nelse()\n    set(COMPONENT_SRCS \"distance_sensor.c\")\nendif()\n</code></pre></p> <p>LED Controller (<code>components/led_controller/CMakeLists.txt</code>): <pre><code>if(CONFIG_TARGET_EMULATOR)\n    set(COMPONENT_SRCS \"led_controller_sim.c\")\nelse()\n    set(COMPONENT_SRCS \"led_controller.c\")\nendif()\n</code></pre></p>"},{"location":"emulator-support/#usage-instructions","title":"Usage Instructions","text":""},{"location":"emulator-support/#1-hardware-build-default","title":"1. Hardware Build (Default)","text":"<pre><code>idf.py build\nidf.py flash monitor\n</code></pre>"},{"location":"emulator-support/#2-emulator-build","title":"2. Emulator Build","text":"<pre><code># Configure for emulator\nidf.py menuconfig\n# Navigate to: ESP32 Distance Project Configuration\n# Enable: [x] Build for QEMU emulator\n# Enable: [x] Use mocked sensor data in emulator\n\n# Build\nidf.py build\n\n# Run in QEMU (example)\nqemu-system-xtensa -nographic -M esp32 -kernel build/distance.elf\n</code></pre>"},{"location":"emulator-support/#expected-output","title":"Expected Output","text":""},{"location":"emulator-support/#console-logs","title":"Console Logs","text":"<pre><code>I (1000) main: ESP32 Distance Measurement with LED Strip Display\nI (1100) led_controller_sim: LED controller simulator initialized: 40 LEDs (terminal visualization)\nI (1200) distance_sensor_sim: Distance sensor simulator initialized successfully  \nI (1300) distance_sensor_sim: Distance sensor simulator started (5cm\u219260cm\u21925cm sweep, interval: 1000 ms)\n</code></pre>"},{"location":"emulator-support/#animated-distance-readings","title":"Animated Distance Readings","text":"<pre><code>I (2000) distance_sensor_sim: Simulated distance: 5.0 cm (increasing)\nI (3000) distance_sensor_sim: Simulated distance: 5.1 cm (increasing)\nI (4000) distance_sensor_sim: Simulated distance: 5.2 cm (increasing)\n...\nI (58000) distance_sensor_sim: Simulated distance: 60.0 cm (decreasing)\nI (59000) distance_sensor_sim: Simulated distance: 59.9 cm (decreasing)\n</code></pre>"},{"location":"emulator-support/#led-strip-visualization","title":"LED Strip Visualization","text":"<pre><code>[LED Strip]: \ud83d\udd34\ud83d\udd34\ud83d\udd34\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\n\n[LED Strip]: \ud83d\udfe1\ud83d\udfe1\ud83d\udfe1\ud83d\udfe1\ud83d\udfe1\ud83d\udfe1\ud83d\udfe1\ud83d\udfe1\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\n\n[LED Strip]: \ud83d\udfe2\ud83d\udfe2\ud83d\udfe2\ud83d\udfe2\ud83d\udfe2\ud83d\udfe2\ud83d\udfe2\ud83d\udfe2\ud83d\udfe2\ud83d\udfe2\ud83d\udfe2\ud83d\udfe2\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\n\n[LED Strip]: \ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\u26ab\n</code></pre>"},{"location":"emulator-support/#color-mapping-legend","title":"Color Mapping Legend","text":"<ul> <li>\ud83d\udd34 Red: Close distances (5-15cm)</li> <li>\ud83d\udfe1 Yellow: Medium distances (15-35cm) </li> <li>\ud83d\udfe2 Green: Far distances (35-50cm)</li> <li>\ud83d\udd35 Blue: Maximum distances (50-60cm)</li> <li>\u26aa White: Very bright/mixed colors</li> <li>\ud83d\udfe3 Purple: Magenta/mixed colors</li> <li>\u26ab Black: Off/very dim LEDs</li> </ul>"},{"location":"emulator-support/#implementation-details","title":"Implementation Details","text":""},{"location":"emulator-support/#distance-sensor-simulator","title":"Distance Sensor Simulator","text":"<p>Animation Logic: <pre><code>// Animate distance: 5cm (50mm) \u2192 60cm (600mm) \u2192 5cm (50mm)\nsim_distance += direction;\n\nif (sim_distance &gt;= 600) {  // 60.0cm = 600mm\n    direction = -1;\n} else if (sim_distance &lt;= 50) {  // 5.0cm = 50mm  \n    direction = 1;\n}\n</code></pre></p> <p>Queue Behavior: Identical to hardware implementation with overflow handling and statistics tracking.</p>"},{"location":"emulator-support/#led-controller-simulator","title":"LED Controller Simulator","text":"<p>Rate Limiting: <pre><code>static uint64_t last_display_time = 0;\nstatic const uint64_t DISPLAY_INTERVAL_US = 1000000; // 1 second\n\nesp_err_t led_show(void) {\n    uint64_t now = esp_timer_get_time();\n    if (now - last_display_time &lt; DISPLAY_INTERVAL_US) {\n        return ESP_OK;  // Suppress output, just return success\n    }\n    last_display_time = now;\n    // ... display emoji output\n}\n</code></pre></p> <p>Color Analysis: Intelligent mapping from RGB values to representative emoji blocks based on dominant colors and brightness levels.</p>"},{"location":"emulator-support/#benefits","title":"Benefits","text":""},{"location":"emulator-support/#development-advantages","title":"Development Advantages","text":"<ul> <li>No Hardware Dependencies: Develop without physical ESP32, sensors, or LEDs</li> <li>Fast Iteration: Quick build-test cycles without flashing hardware</li> <li>Visual Feedback: Clear terminal visualization of system behavior</li> <li>CI/CD Friendly: Automated testing in continuous integration pipelines</li> <li>Cross-Platform: Develop on any system with QEMU support</li> </ul>"},{"location":"emulator-support/#testing-advantages","title":"Testing Advantages","text":"<ul> <li>Predictable Behavior: Animated patterns for systematic testing</li> <li>Integration Testing: Full system testing without hardware setup</li> <li>Algorithm Validation: Test LED display logic and distance mapping</li> <li>Performance Analysis: Monitor queue behavior and timing</li> </ul>"},{"location":"emulator-support/#educational-benefits","title":"Educational Benefits","text":"<ul> <li>System Understanding: Clear visualization of sensor-to-display pipeline</li> <li>Algorithm Learning: See distance mapping and color gradients in action</li> <li>Real-time Concepts: Observe queue-based architecture behavior</li> </ul>"},{"location":"emulator-support/#files-modifiedcreated","title":"Files Modified/Created","text":""},{"location":"emulator-support/#new-files","title":"New Files","text":"<ul> <li><code>main/Kconfig.projbuild</code> - Build configuration options</li> <li><code>main/components/distance_sensor/distance_sensor_sim.c</code> - Distance sensor simulator</li> <li><code>main/components/led_controller/led_controller_sim.c</code> - LED controller simulator</li> </ul>"},{"location":"emulator-support/#modified-files","title":"Modified Files","text":"<ul> <li><code>main/components/distance_sensor/CMakeLists.txt</code> - Conditional source selection</li> <li><code>main/components/led_controller/CMakeLists.txt</code> - Conditional source selection</li> </ul>"},{"location":"emulator-support/#unchanged-files","title":"Unchanged Files","text":"<ul> <li>All header files (<code>.h</code>) - APIs remain identical</li> <li>Main application logic - No changes needed</li> <li>WiFi/web server components - Run unchanged</li> </ul>"},{"location":"emulator-support/#validation","title":"Validation","text":"<p>The implementation has been validated for: - \u2705 Complete API compatibility with hardware versions - \u2705 Proper CMake conditional compilation - \u2705 Animation logic and timing behavior - \u2705 LED visualization and rate limiting - \u2705 Queue-based architecture and error handling - \u2705 No security vulnerabilities introduced</p>"},{"location":"emulator-support/#future-enhancements","title":"Future Enhancements","text":"<p>Potential improvements for the emulator support: - Web Interface Preview: Show LED state in browser - Interactive Controls: Manual distance adjustment via keyboard - Performance Metrics: Queue utilization and timing statistics - Multiple Animation Patterns: Different test sequences - Color Scheme Options: Alternative emoji sets or ASCII mode</p> <p>This emulator support enables efficient development and testing of the ESP32 distance sensor project without requiring physical hardware, while maintaining complete compatibility with the production system.</p>"},{"location":"known-limitations/","title":"Known L## \ud83d\udda5\ufe0f Web UI in Emulator: No Network Device","text":"<ul> <li>What happens? The webserver initializes and runs in QEMU, but you can't access it from your browser.</li> <li>Why? The Espressif QEMU fork doesn't emulate network devices (<code>open_eth</code> is not available). The HTTP server can bind to a port inside QEMU, but there's no network hardware to send/receive packets. Serial console is currently the only I/O channel.</li> <li>Will it be fixed? </li> <li>Short term: We're planning a serial HTTP tunneling solution (see <code>docs/planning/Features-Serial-HTTP-Tunneling.md</code>) that will multiplex HTTP traffic over the serial connection.</li> <li>Long term: Network device emulation would need to be added to Espressif's QEMU fork (consider filing an issue with them).</li> <li>Current status: The webserver code works perfectly on real hardware. In QEMU, you'll see successful initialization logs, but the webserver is not accessible via network.ations &amp; Quirks \ud83d\udea7</li> </ul> <p>Welcome, brave explorer! Every project has its dragons\u2014here are ours. If you run into these, don\u2019t panic: you\u2019re not alone, and sometimes it\u2019s just how the (micro)chips fall.</p>"},{"location":"known-limitations/#captive-portal-not-so-captive","title":"\ud83d\udcf1 Captive Portal: Not-So-Captive","text":"<ul> <li>What happens? When you connect to the ESP32\u2019s WiFi, your phone/tablet might not be magically whisked away to the configuration page. Instead, you\u2019ll need to open your browser and type <code>192.168.4.1</code>.</li> <li>Why? Modern devices are picky about captive portals, and our ESP32 is doing its best. Some phones just won\u2019t auto-redirect\u2014blame the phone, not the project!</li> <li>Will it be fixed? Probably not. It\u2019s a common IoT quirk, and most users figure it out quickly.</li> </ul>"},{"location":"known-limitations/#web-ui-in-emulator-no-show","title":"\ud83d\udda5\ufe0f Web UI in Emulator: No Show","text":"<ul> <li>What happens? If you\u2019re running the project in an emulator, the web interface might be unreachable.</li> <li>Why? Networking in emulators is tricky, and not all features are supported.</li> <li>Will it be fixed? Maybe! We might open a GitHub issue for this. If you have ideas, PRs are welcome.</li> </ul>"},{"location":"known-limitations/#other-oddities","title":"\ud83e\udd84 Other Oddities","text":"<ul> <li>If you find a new quirk, let us know! We love a good bug hunt (and a good laugh).</li> </ul> <p>Remember: If everything worked perfectly, it wouldn\u2019t be called a \u201cproject.\u201d</p>"},{"location":"api/","title":"API Reference (placeholder)","text":"<p>This directory will contain generated API documentation and references. Add generated files here (e.g., using mkdocstrings or external generators).</p>"},{"location":"architecture/","title":"ESP32 Distance Sensor Project: Architecture Overview","text":"<p>This document provides a high-level architectural overview of the ESP32 Distance Sensor project.</p>"},{"location":"architecture/#system-overview","title":"System Overview","text":"<p>The project is an IoT device based on the ESP32 WROOM-32F microcontroller. It measures distance using an HC-SR04 ultrasonic sensor and visualizes results on a WS2812 LED strip. The device provides WiFi connectivity (AP/STA), a web interface (with captive portal), and is being enhanced with HTTPS security.</p>"},{"location":"architecture/#architecture-diagram","title":"Architecture Diagram","text":"<pre><code>flowchart TD\n    A[Distance Sensor &lt;br&gt; HC-SR04]\n    B[LED Controller &lt;br&gt; WS2812]\n    C[WiFi Manager &lt;br&gt; AP/STA, Captive Portal]\n    D[Web Server &lt;br&gt; HTTP/HTTPS]\n    E[DNS Server &lt;br&gt; Captive Portal]\n    F[Main Application &lt;br&gt; FreeRTOS Tasks]\n    User((User Devices))\n\n    A --&gt;|Distance Data| F\n    F --&gt;|LED Updates| B\n    F --&gt;|WiFi Events| C\n    C --&gt;|Network Events| F\n    C --&gt;|HTTP Requests| D\n    D --&gt;|Web UI/API| User\n    E --&gt;|DNS Requests| User</code></pre>"},{"location":"architecture/#key-components","title":"Key Components","text":"<ul> <li>Distance Sensor Component: Interfaces with HC-SR04, provides distance readings via FreeRTOS tasks.</li> <li>LED Controller Component: Drives WS2812 LED strip, visualizes distance data.</li> <li>WiFi Manager: Manages AP/STA modes, captive portal, and WiFi events.</li> <li>Web Server: Hosts configuration UI and API (HTTP/HTTPS).</li> <li>DNS Server: Handles DNS redirection for captive portal.</li> <li>Main Application: Coordinates tasks, event handling, and inter-component communication.</li> </ul>"},{"location":"architecture/#data-flow","title":"Data Flow","text":"<ol> <li>Sensor Measurement: HC-SR04 readings are acquired in a dedicated FreeRTOS task.</li> <li>LED Visualization: Distance data is mapped to LED patterns and displayed in real time.</li> <li>WiFi &amp; Captive Portal: Device can operate in AP or STA mode; captive portal is provided for configuration.</li> <li>Web Interface: Users access configuration and data via a web UI, secured with HTTPS.</li> <li>DNS Redirection: DNS server ensures captive portal compatibility for initial device setup.</li> </ol>"},{"location":"architecture/#design-principles","title":"Design Principles","text":"<ul> <li>Component-based architecture: Each hardware and software function is modularized.</li> <li>Memory optimization: Designed for 4MB flash, with careful heap/stack usage.</li> <li>Real-time operation: Uses FreeRTOS tasks for concurrency and responsiveness.</li> <li>Security: HTTPS support with self-signed certificates and HTTP\u2192HTTPS redirection.</li> <li>Traceability: Requirements and design are documented and linked in code (OpenFastTrack methodology).</li> </ul> <p>Last updated: 2024-06</p>"},{"location":"design/config-design/","title":"Configuration System Design Specification","text":"<p>Document ID: DSN-CFG-ESP32-DISTANCE Version: 1.0 Date: 2025-07-24 Author: ESP32 Distance Project Team Requirements Traceability: REQ-CFG-1 through REQ-CFG-11  </p>"},{"location":"design/config-design/#design-overview","title":"Design Overview","text":"<p>This document specifies the design for the Configuration Management System, covering architecture, data structures, API design, and implementation approach.</p>"},{"location":"design/config-design/#design-traceability","title":"Design Traceability","text":"Design ID Implements Requirement Priority DSN-CFG-1 REQ-CFG-1, REQ-CFG-2 Mandatory DSN-CFG-2 REQ-CFG-3, REQ-CFG-4, REQ-CFG-5 Mandatory DSN-CFG-3 REQ-CFG-3, REQ-CFG-4 Mandatory DSN-CFG-4 REQ-CFG-5, REQ-CFG-6 Mandatory DSN-CFG-5 REQ-CFG-7, REQ-CFG-8, REQ-CFG-9 Mandatory DSN-CFG-6 REQ-CFG-1 through REQ-CFG-11 Mandatory"},{"location":"design/config-design/#dsn-cfg-1-layered-configuration-architecture","title":"DSN-CFG-1: Layered Configuration Architecture","text":"<p>Covers / Implements: REQ-CFG-1, REQ-CFG-2 Type: System Architecture  </p> <p>The configuration system implements a three-layer architecture:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502           Application Layer             \u2502\n\u2502  (main.c, components, web_server.c)     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502         Configuration API Layer         \u2502\n\u2502    (config.h, config.c - Public API)    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502           Storage Layer                 \u2502\n\u2502     (NVS abstraction, validation)       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Layer Responsibilities:</p> <ul> <li>Application Layer: Consumes configuration values through standardized API</li> <li>Configuration API Layer: Provides thread-safe access, validation, and caching</li> <li>Storage Layer: Handles NVS operations, persistence, and error recovery</li> </ul>"},{"location":"design/config-design/#dsn-cfg-2-configuration-data-flow","title":"DSN-CFG-2: Configuration Data Flow","text":"<p>Covers / Implements: REQ-CFG-3, REQ-CFG-4, REQ-CFG-5 Type: Data Flow Design  </p> <pre><code>Startup:     NVS \u2192 config_load() \u2192 Runtime Cache \u2192 Application\nRuntime:     Application \u2192 config_get() \u2192 Runtime Cache\nUpdate:      Web Interface \u2192 config_save() \u2192 Validation \u2192 NVS \u2192 Runtime Cache\nFactory:     config_factory_reset() \u2192 Defaults \u2192 NVS \u2192 Runtime Cache\n</code></pre> <p>Key Design Decisions:</p> <ol> <li>Runtime Cache: Configuration cached in RAM for fast access</li> <li>Atomic Updates: Configuration changes applied atomically</li> <li>Validation Gate: All changes validated before persistence</li> <li>Error Recovery: Automatic fallback to defaults on corruption</li> </ol>"},{"location":"design/config-design/#data-structure-design","title":"Data Structure Design","text":""},{"location":"design/config-design/#dsn-cfg-3-configuration-storage-format","title":"DSN-CFG-3: Configuration Storage Format","text":"<p>Covers / Implements: REQ-CFG-3, REQ-CFG-4 Type: Data Structure  </p> <pre><code>// NVS storage layout\ntypedef struct {\n    // Metadata (16 bytes)\n    uint32_t magic_number;        // 0xCFG12345 - corruption detection\n    uint32_t config_version;      // Schema version for migration\n    uint32_t crc32_checksum;      // Data integrity verification  \n    uint32_t save_count;          // Change tracking\n\n   // Distance sensor configuration (20 bytes)\n   // Stored as integers to avoid floating-point on the device\n   uint16_t distance_min_mm;     // 2 bytes (millimeters)\n   uint16_t distance_max_mm;     // 2 bytes (millimeters)\n   uint16_t measurement_interval_ms; // 2 bytes\n   uint32_t sensor_timeout_ms;   // 4 bytes\n   uint16_t smoothing_factor;    // 2 bytes - fixed-point: smoothing = smoothing_factor / 1000.0\n   uint16_t reserved1;           // 2 bytes - future expansion\n\n    // LED configuration (8 bytes)\n    uint8_t led_count;            // 1 byte\n    uint8_t led_brightness;       // 1 byte\n    uint8_t led_rmt_channel;      // 1 byte\n    uint8_t reserved2[5];         // 5 bytes - future expansion\n\n    // WiFi configuration (12 bytes)\n    uint8_t wifi_max_retry;       // 1 byte\n    uint32_t wifi_timeout_ms;     // 4 bytes\n    uint8_t wifi_ap_channel;      // 1 byte\n    uint8_t wifi_ap_max_conn;     // 1 byte\n    uint8_t reserved3[5];         // 5 bytes - future expansion\n\n    // Web server configuration (8 bytes)\n    uint32_t monitor_interval_ms; // 4 bytes\n    uint16_t http_port;           // 2 bytes\n    uint8_t reserved4[2];         // 2 bytes - future expansion\n\n} __attribute__((packed)) config_nvs_storage_t; // Total: 64 bytes\n</code></pre> <p>Storage Optimization:</p> <ul> <li>Fixed Size: 64-byte structure for efficient NVS operations</li> <li>Alignment: Packed structure to minimize flash usage</li> <li>Reserved Fields: Expansion capability without breaking compatibility</li> <li>Checksum: CRC32 for corruption detection</li> </ul>"},{"location":"design/config-design/#api-design","title":"API Design","text":""},{"location":"design/config-design/#dsn-cfg-4-configuration-api-implementation","title":"DSN-CFG-4: Configuration API Implementation","text":"<p>Covers / Implements: REQ-CFG-5, REQ-CFG-6 Type: Interface Design  </p> <pre><code>// Public API header (main/config.h)\n#ifndef CONFIG_H\n#define CONFIG_H\n\n#include \"esp_err.h\"\n#include &lt;stdbool.h&gt;\n\n// Configuration value access macros\n#define CONFIG_GET_DISTANCE_MIN()     config_get_distance_min_cm()\n#define CONFIG_GET_DISTANCE_MAX()     config_get_distance_max_cm()\n#define CONFIG_GET_LED_COUNT()        config_get_led_count()\n#define CONFIG_GET_LED_BRIGHTNESS()   config_get_led_brightness()\n\n// Configuration management API\nesp_err_t config_init(void);\nesp_err_t config_load_from_nvs(void);\nesp_err_t config_save_to_nvs(void);\nesp_err_t config_factory_reset(void);\n\n// Configuration value getters (thread-safe)\n// Note: Implementation uses integer/fixed-point types. Distances are stored in\n// millimeters (`uint16_t distance_min_mm`) and smoothing is stored as an integer\n// factor (`uint16_t smoothing_factor`) where runtime alpha = smoothing_factor / 1000.0.\n// Callers should use `config_get_current()` from `config_manager` to obtain a\n// copy of `system_config_t` and perform unit conversions as needed.\nuint16_t config_get_measurement_interval_ms(void);\nuint32_t config_get_sensor_timeout_ms(void);\nuint8_t config_get_led_count(void);\nuint8_t config_get_led_brightness(void);\n\n// Configuration value setters (with validation)\n// Setters accepting decimal/floating inputs are provided at the web interface\n// layer; internal API uses integer/fixed-point setters via `config_set_current()`.\nesp_err_t config_set_measurement_interval(uint16_t interval_ms);\nesp_err_t config_set_sensor_timeout(uint32_t timeout_ms);\nesp_err_t config_set_led_count(uint8_t count);\nesp_err_t config_set_led_brightness(uint8_t brightness);\n\n// Bulk configuration operations\nesp_err_t config_get_all(system_config_t* config);\nesp_err_t config_set_all(const system_config_t* config);\nbool config_validate_all(const system_config_t* config, char* error_msg, size_t error_msg_len);\n\n#endif // CONFIG_H\n</code></pre> <p>Thread Safety Design:</p> <ul> <li>Mutex Protection: All configuration access protected by FreeRTOS mutex</li> <li>Read-Write Lock: Multiple readers, single writer pattern</li> <li>Atomic Updates: Configuration changes applied atomically</li> <li>Timeout Handling: API calls include timeout for responsiveness</li> </ul>"},{"location":"design/config-design/#web-interface-design","title":"Web Interface Design","text":""},{"location":"design/config-design/#dsn-cfg-5-web-configuration-interface","title":"DSN-CFG-5: Web Configuration Interface","text":"<p>Covers / Implements: REQ-CFG-7, REQ-CFG-8, REQ-CFG-9 Type: User Interface Design  </p> <p>REST API Endpoints:</p> <pre><code>// Configuration REST API\nGET  /api/config           -&gt; Current configuration (JSON)\nPOST /api/config           -&gt; Update configuration (JSON)\nPOST /api/config/preview   -&gt; Temporary configuration preview\nPOST /api/config/apply     -&gt; Apply previewed configuration\nPOST /api/config/reset     -&gt; Factory reset\nGET  /api/config/export    -&gt; Export configuration (JSON download)\nPOST /api/config/import    -&gt; Import configuration (JSON upload)\n</code></pre> <p>Web Page Structure:</p> <pre><code>&lt;!-- /settings page structure --&gt;\n&lt;form id=\"config-form\"&gt;\n  &lt;fieldset&gt;\n    &lt;legend&gt;Distance Sensor Settings&lt;/legend&gt;\n    &lt;input type=\"range\" id=\"distance-min\" min=\"5\" max=\"100\" step=\"0.1\"&gt;\n    &lt;input type=\"range\" id=\"distance-max\" min=\"20\" max=\"400\" step=\"0.1\"&gt;\n    &lt;input type=\"range\" id=\"measurement-interval\" min=\"50\" max=\"1000\" step=\"10\"&gt;\n  &lt;/fieldset&gt;\n\n  &lt;fieldset&gt;\n    &lt;legend&gt;LED Settings&lt;/legend&gt;  \n    &lt;input type=\"range\" id=\"led-count\" min=\"1\" max=\"60\" step=\"1\"&gt;\n    &lt;input type=\"range\" id=\"led-brightness\" min=\"10\" max=\"255\" step=\"1\"&gt;\n  &lt;/fieldset&gt;\n\n  &lt;div class=\"config-actions\"&gt;\n    &lt;button type=\"button\" id=\"preview-btn\"&gt;Preview Changes&lt;/button&gt;\n    &lt;button type=\"button\" id=\"apply-btn\"&gt;Apply &amp; Save&lt;/button&gt;\n    &lt;button type=\"button\" id=\"reset-btn\"&gt;Factory Reset&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/form&gt;\n</code></pre> <p>Real-time Preview Logic:</p> <ol> <li>Preview Mode: POST to <code>/api/config/preview</code> applies temporary changes</li> <li>Visual Feedback: LED brightness changes visible immediately  </li> <li>Auto-Revert: Preview timeout (30 seconds) reverts automatically</li> <li>Apply Confirmation: User must explicitly apply changes permanently</li> </ol>"},{"location":"design/config-design/#implementation-strategy","title":"Implementation Strategy","text":""},{"location":"design/config-design/#dsn-cfg-6-github-copilot-implementation","title":"DSN-CFG-6: GitHub Copilot Implementation","text":"<p>Covers: All REQ-CFG requirements Type: Implementation Strategy  </p>"},{"location":"design/config-design/#phase-1-ai-assisted-core-implementation","title":"Phase 1: AI-Assisted Core Implementation","text":"<p>GitHub Copilot will be assigned to implement:</p> <pre><code>1. Magic Number Consolidation (REQ-CFG-1, REQ-CFG-2)\n   - Create main/config.h with all centralized values\n   - Update all source files to use config.h macros\n   - Validate no magic numbers remain in codebase\n\n2. Configuration Data Structures (REQ-CFG-3)  \n   - Implement system_config_t structure\n   - Add validation ranges and metadata\n   - Create NVS storage layout\n\n3. Configuration API (REQ-CFG-4, REQ-CFG-5, REQ-CFG-6)\n   - Implement thread-safe configuration access\n   - Add NVS persistence layer\n   - Implement parameter validation\n</code></pre>"},{"location":"design/config-design/#phase-2-human-ai-collaboration","title":"Phase 2: Human-AI Collaboration","text":"<pre><code>1. Web Interface (REQ-CFG-7, REQ-CFG-8)\n   - AI: Generate REST API endpoints and handlers\n   - Human: Review security and user experience\n   - AI: Implement real-time preview functionality\n\n2. Advanced Features (REQ-CFG-9, REQ-CFG-10, REQ-CFG-11) \n   - AI: Implement backup/restore functionality\n   - Human: Validate performance requirements\n   - AI: Add comprehensive error handling\n</code></pre> <p>Quality Assurance Process:</p> <ol> <li>Requirement Validation: Each implementation verified against acceptance criteria</li> <li>Integration Testing: Configuration system tested with existing components  </li> <li>Performance Testing: Configuration operations measured for real-time compliance</li> <li>Security Review: Web interface reviewed for security vulnerabilities</li> </ol> <p>This document follows OpenFastTrack methodology for design traceability.</p>"},{"location":"design/display-design/","title":"Display Design","text":""},{"location":"design/display-design/#design-traceability","title":"Design Traceability","text":"Design ID Implements Requirement Priority DSN-DSP-OVERVIEW-01 REQ-DSP-OVERVIEW-01 Mandatory DSN-DSP-ARCH-01 REQ-DSP-IMPL-01 Mandatory DSN-DSP-ARCH-02 REQ-DSP-OVERVIEW-02 Mandatory DSN-DSP-ALGO-01 REQ-DSP-IMPL-03, REQ-DSP-VISUAL-01, REQ-DSP-VISUAL-02, REQ-DSP-VISUAL-03, REQ-DSP-VISUAL-04 Mandatory DSN-DSP-ALGO-02 REQ-DSP-IMPL-02 Mandatory DSN-DSP-ALGO-03 REQ-SYS-1 Mandatory DSN-DSP-API-01 REQ-DSP-IMPL-01 Mandatory"},{"location":"design/display-design/#target-design-architecture","title":"Target Design Architecture","text":""},{"location":"design/display-design/#dsn-dsp-overview-01-ws2812-hardware-integration-design","title":"DSN-DSP-OVERVIEW-01: WS2812 Hardware Integration Design","text":"<p>Addresses: REQ-DSP-OVERVIEW-01</p> <p>Design: WS2812 addressable LED strip as primary display hardware with config-driven parameters.</p> <ul> <li>LED count: Configurable via <code>config_manager</code> API (1-100 LEDs, validated)</li> <li>Brightness: Configurable via <code>config_manager</code> API (0-255, hardware PWM control)</li> <li>GPIO pin: Hardware-specific configuration for WS2812 data line</li> <li>Initialization: LED hardware initialized before task starts processing measurements</li> <li>Real-time operation: Continuous reactive updates as distance measurements arrive</li> </ul> <p>Validation: LED strip responds to configuration changes, hardware initialization successful.</p>"},{"location":"design/display-design/#dsn-dsp-arch-01-task-based-architecture-design","title":"DSN-DSP-ARCH-01: Task-Based Architecture Design","text":"<p>Addresses: REQ-DSP-IMPL-01</p> <p>Design: Implement single FreeRTOS task that blocks on <code>distance_sensor_get_latest()</code>.</p> <ul> <li>Task priority set below measurement task to ensure proper data flow hierarchy</li> <li>Task runs continuously until system restart</li> <li>Core assignment and stack size from centralized configuration</li> <li>Blocking wait pattern eliminates polling overhead and provides immediate response</li> </ul> <p>Validation: Task created successfully, priority hierarchy maintained, blocks efficiently.</p>"},{"location":"design/display-design/#dsn-dsp-arch-02-configuration-integration-design","title":"DSN-DSP-ARCH-02: Configuration Integration Design","text":"<p>Addresses: REQ-DSP-OVERVIEW-02, REQ-CFG-2</p> <p>Design: Use <code>config_manager</code> API for all distance range parameters.</p> <ul> <li>Obtain min/max distance values via <code>config_get_current()</code> and use <code>distance_min_mm</code> / <code>distance_max_mm</code> fields (millimeters)</li> <li>Cache config values locally at task startup for performance</li> <li>Configuration changes handled via system restart (restart-based architecture)</li> <li>Configuration validation responsibility belongs to <code>config_manager</code></li> </ul> <p>Validation: All distance parameters obtained from <code>config_manager</code> API, no separate config structures.</p>"},{"location":"design/display-design/#dsn-dsp-algo-01-distance-to-visual-mapping-algorithm-what-to-display","title":"DSN-DSP-ALGO-01: Distance-to-Visual Mapping Algorithm (WHAT to display)","text":"<p>Addresses: REQ-DSP-IMPL-03, REQ-DSP-VISUAL-01/02/03/04</p> <p>Design:</p> <ul> <li>Normal range (min \u2264 distance \u2264 max): Green LED at calculated position using linear interpolation</li> <li>Formula: <code>led_index = (distance_mm - min_mm) * (led_count - 1) / (max_mm - min_mm)</code></li> <li>Below minimum (distance &lt; min): Red LED at position 0</li> <li>Above maximum (distance &gt; max): Red LED at position <code>led_count-1</code></li> <li>Boundary clamping ensures valid LED positions <code>[0, led_count-1]</code></li> <li>Single LED illumination enforced by logic</li> </ul> <p>Validation: Min distance \u2192 LED 0, max distance \u2192 LED <code>led_count-1</code>, linear interpolation between,             below/above range \u2192 correct red LED positions.</p>"},{"location":"design/display-design/#dsn-dsp-algo-02-led-update-pattern-design-how-to-display","title":"DSN-DSP-ALGO-02: LED Update Pattern Design (HOW to display)","text":"<p>Addresses: REQ-DSP-IMPL-02</p> <p>Design:</p> <ul> <li>Step 1: <code>led_clear_all()</code> - set all LEDs to off state</li> <li>Step 2: <code>led_set_pixel(position, color)</code> - set desired LED from ALGO-01 decision</li> <li>Step 3: <code>led_show()</code> - transmit complete buffer to WS2812 strip</li> </ul> <p>WS2812 serial protocol requires complete buffer transmission; clear-and-set pattern guarantees only one LED illuminated.</p> <p>Validation: Only one LED illuminated after each update, WS2812 transmission successful.</p>"},{"location":"design/display-design/#dsn-dsp-algo-03-embedded-arithmetic-architecture-design","title":"DSN-DSP-ALGO-03: Embedded Arithmetic Architecture Design","text":"<p>Addresses: REQ-SYS-1</p> <p>Design: Pure integer arithmetic for all distance calculations and display operations.</p> <ul> <li>Distance representation: <code>uint16_t</code> millimeters (0-65535mm)</li> <li>Position calculations: Multiplication before division for precision preservation</li> <li>Boundary checks: Integer comparisons</li> <li>Memory efficiency: 2-byte integers vs 4-byte floats</li> <li>Execution speed: Integer ALU operations vs FPU operations</li> <li>Deterministic timing: No floating-point precision variations</li> </ul> <p>Rationale: Avoid floating-point on resource-constrained microcontrollers unless necessary.</p> <p>Validation: All arithmetic operations complete within deterministic time bounds.</p>"},{"location":"design/display-design/#dsn-dsp-api-01-simplified-api-design","title":"DSN-DSP-API-01: Simplified API Design","text":"<p>Addresses: REQ-DSP-IMPL-01</p> <p>Design: Single entry point for simplified lifecycle management</p> <ul> <li><code>esp_err_t display_logic_start(void)</code> - primary public function</li> <li>Task runs continuously until system restart</li> <li>No complex lifecycle management</li> </ul> <p>Validation: Single function call starts display system, no API complexity.</p>"},{"location":"design/distance-sensor-design/","title":"Distance Sensor Design","text":""},{"location":"design/distance-sensor-design/#design-traceability","title":"Design Traceability","text":"Design ID Implements Requirement Priority DSN-SNS-ARCH-01 REQ-SNS-3, REQ-SNS-4, REQ-SNS-8 Mandatory DSN-SNS-ARCH-02 REQ-SNS-1, REQ-SNS-2 Mandatory DSN-SNS-ISR-01 REQ-SNS-3, REQ-SNS-8 Critical DSN-SNS-TASK-01 REQ-SNS-4, REQ-SNS-6, REQ-SNS-10 Mandatory DSN-SNS-ALGO-01 REQ-SNS-11 Mandatory DSN-SNS-ALGO-02 REQ-SNS-4 Mandatory DSN-SNS-API-01 REQ-SNS-5, REQ-SNS-7 Mandatory DSN-SNS-ERR-01 REQ-SNS-12, REQ-SNS-13, REQ-SNS-14 Mandatory DSN-SIM-SNS-01 REQ-SYS-SIM-1 Mandatory"},{"location":"design/distance-sensor-design/#target-design-architecture","title":"Target Design Architecture","text":""},{"location":"design/distance-sensor-design/#dsn-sns-arch-01-dual-queue-real-time-architecture-design","title":"DSN-SNS-ARCH-01: Dual-Queue Real-Time Architecture Design","text":"<p>Addresses: REQ-SNS-3, REQ-SNS-4, REQ-SNS-8</p> <p>Design: Separate ISR and task responsibilities using FreeRTOS queues for communication.</p> <ul> <li>ISR captures raw timestamps only, minimal processing</li> <li>Sensor task performs calculations, validation, and smoothing</li> <li>Raw queue (size 2): ISR \u2192 Task communication for timestamps</li> <li>Processed queue (size 5): Task \u2192 API communication for measurements</li> <li>Queue-based design eliminates shared variables and race conditions</li> </ul> <p>Validation: ISR completes within microseconds, task receives raw timestamps, API consumers get processed measurements.</p>"},{"location":"design/distance-sensor-design/#dsn-sns-arch-02-gpio-interface-design","title":"DSN-SNS-ARCH-02: GPIO Interface Design","text":"<p>Addresses: REQ-SNS-1, REQ-SNS-2</p> <p>Design: HC-SR04 ultrasonic sensor interface using ESP32 GPIO.</p> <ul> <li>Trigger pin (default GPIO14): Output mode, generates 10\u00b5s pulse</li> <li>Echo pin (default GPIO13): Input mode with <code>GPIO_INTR_ANYEDGE</code> interrupt</li> <li>GPIO configuration during <code>distance_sensor_init()</code> with validation</li> <li>ISR handler attached to echo pin for edge detection</li> </ul> <p>Validation: GPIO pins configured correctly, ISR service installed, trigger pulse generated.</p>"},{"location":"design/distance-sensor-design/#dsn-sns-isr-01-interrupt-service-routine-design","title":"DSN-SNS-ISR-01: Interrupt Service Routine Design","text":"<p>Addresses: REQ-SNS-3, REQ-SNS-8</p> <p>Design: IRAM-resident ISR for deterministic timestamp capture.</p> <ul> <li>Rising edge: Capture <code>echo_start_time</code> using <code>esp_timer_get_time()</code></li> <li>Falling edge: Capture <code>echo_end_time</code> and queue raw measurement via <code>xQueueSendFromISR</code></li> <li>Uses <code>portYIELD_FROM_ISR</code> for task scheduling</li> <li>Marked <code>IRAM_ATTR</code> for real-time constraints</li> <li>No floating-point, heap allocation, or blocking operations</li> </ul> <p>Validation: ISR execution time &lt; 10\u00b5s, timestamps captured accurately, raw queue receives data.</p>"},{"location":"design/distance-sensor-design/#dsn-sns-task-01-sensor-task-design","title":"DSN-SNS-TASK-01: Sensor Task Design","text":"<p>Addresses: REQ-SNS-4, REQ-SNS-6, REQ-SNS-10</p> <p>Design: FreeRTOS task for continuous measurement processing.</p> <ul> <li>Task priority 5, stack size 4096 bytes, pinned to core 1</li> <li>Measurement loop: trigger pulse \u2192 wait for raw queue \u2192 calculate distance \u2192 validate \u2192 smooth \u2192 enqueue</li> <li>Configurable measurement interval (default 100ms) with <code>vTaskDelay</code></li> <li>Timeout handling for missing echo responses (default 30ms)</li> <li>Created by <code>distance_sensor_start()</code>, deleted by <code>distance_sensor_stop()</code></li> </ul> <p>Validation: Task created successfully, measurement loop operates at configured interval, processes raw data correctly.</p>"},{"location":"design/distance-sensor-design/#dsn-sns-algo-01-distance-calculation-algorithm","title":"DSN-SNS-ALGO-01: Distance Calculation Algorithm","text":"<p>Addresses: REQ-SNS-11</p> <p>Design: Integer arithmetic for temperature-compensated distance calculation.</p> <ul> <li>Speed of sound: <code>calculate_speed_of_sound_scaled(temperature_c_x10)</code> with scaling factor 1,000,000</li> <li>Formula: <code>speed = 331300000 + (606 * temperature_c_x10 * 100)</code></li> <li>Distance: <code>distance_mm = (echo_duration_us * speed_of_sound_scaled) / 2000000</code></li> <li>Avoids floating-point operations for embedded performance</li> <li>Temperature input as <code>temperature_c_x10</code> (200 = 20.0\u00b0C)</li> </ul> <p>Validation: Distance calculations accurate within \u00b11mm for known echo durations and temperatures.</p>"},{"location":"design/distance-sensor-design/#dsn-sns-algo-02-ema-smoothing-filter-design","title":"DSN-SNS-ALGO-02: EMA Smoothing Filter Design","text":"<p>Addresses: REQ-SNS-4</p> <p>Design: Exponential Moving Average filter using integer arithmetic.</p> <ul> <li>Formula: <code>smoothed = (smoothing_factor * new) + ((1000 - smoothing_factor) * previous) / 1000</code></li> <li>Smoothing factor range 0-1000 (300 = 30% new, 70% previous)</li> <li>Previous value stored as <code>uint16_t previous_smoothed_value_mm</code></li> <li>First measurement initializes filter without smoothing</li> <li>Applied only to valid measurements (not out-of-range or timeout)</li> </ul> <p>Validation: Smoothing reduces noise while maintaining responsiveness, factor extremes (0, 1000) work correctly.</p>"},{"location":"design/distance-sensor-design/#dsn-sns-api-01-public-api-design","title":"DSN-SNS-API-01: Public API Design","text":"<p>Addresses: REQ-SNS-5, REQ-SNS-7</p> <p>Design: Simple blocking and monitoring API for consumers.</p> <ul> <li><code>distance_sensor_get_latest()</code>: Blocking receive from processed queue with <code>portMAX_DELAY</code></li> <li><code>distance_sensor_has_new_measurement()</code>: Non-blocking queue status check</li> <li><code>distance_sensor_get_queue_overflows()</code>: Returns overflow counter for monitoring</li> <li><code>distance_sensor_monitor()</code>: Health check with overflow logging</li> <li><code>distance_sensor_is_running()</code>: Task state query</li> </ul> <p>Validation: Blocking API waits for new data, non-blocking API returns immediately, monitoring functions provide accurate metrics.</p>"},{"location":"design/distance-sensor-design/#dsn-sns-err-01-error-handling-design","title":"DSN-SNS-ERR-01: Error Handling Design","text":"<p>Addresses: REQ-SNS-12, REQ-SNS-13, REQ-SNS-14</p> <p>Design: Comprehensive error detection and recovery.</p> <ul> <li>Timeout: No echo within timeout \u2192 enqueue <code>DISTANCE_SENSOR_TIMEOUT</code> with distance 0</li> <li>Out-of-range: Distance &lt; 20mm or &gt; 4000mm \u2192 mark <code>DISTANCE_SENSOR_OUT_OF_RANGE</code>, no smoothing</li> <li>Queue overflow: Processed queue full \u2192 drop oldest, increment <code>queue_overflow_counter</code></li> <li>Graceful degradation with status codes in measurement structure</li> </ul> <p>Validation: Error conditions produce correct status codes, overflow policy drops oldest correctly, system continues operation.</p>"},{"location":"design/distance-sensor-design/#simulator-design-dsn-sim","title":"Simulator Design (DSN-SIM)","text":""},{"location":"design/distance-sensor-design/#dsn-sim-sns-01-distance-sensor-simulator-design","title":"DSN-SIM-SNS-01: Distance Sensor Simulator Design","text":"<p>Addresses: REQ-SYS-SIM-1</p> <p>Design: Provide a simulator implementation for the distance sensor that implements the full public API declared in <code>distance_sensor.h</code> while replacing ISR/GPIO timing with a deterministic simulated data producer.</p> <ul> <li>API Compatibility: The simulator SHALL implement <code>distance_sensor_init()</code>, <code>distance_sensor_start()</code>, <code>distance_sensor_get_latest()</code> and all other public functions with identical signatures and return codes.</li> <li>Queue Semantics: The simulator MUST produce <code>distance_measurement_t</code> entries on the processed queue with the same semantics as the hardware task (blocking consumers, identical status codes for out-of-range/timeouts when simulated).</li> <li>Animation Pattern: Deterministic sweep from 5cm to 60cm and back in 1mm steps, advancing once per second.</li> <li>Isolation: Simulator implementation SHOULD be in <code>distance_sensor_sim.c</code> and selected via CMake when <code>CONFIG_TARGET_EMULATOR=y</code> without modifying headers or higher-level application code.</li> </ul> <p>Validation: Simulator build compiles, <code>distance_sensor_get_latest()</code> receives simulated measurements at \u22481Hz, and status codes match expectations.</p> <p>Example simulator <code>distance_sensor_sim.c</code> snippet (for design guidance):</p> <pre><code>// Simulated sensor with animated distance sweep\nstatic void distance_sensor_task(void* pvParameters) {\n    static uint16_t sim_distance = 50;  // Start at 5cm\n    static int8_t direction = 1;        // 1 = increasing, -1 = decreasing\n\n    while(1) {\n        // Animate distance: 5cm \u2192 60cm \u2192 5cm (1mm steps)\n        sim_distance += direction;\n        if (sim_distance &gt;= 600) direction = -1;  // 60cm\n        if (sim_distance &lt;= 50)  direction = 1;   // 5cm\n\n        distance_measurement_t sim_data = {\n            .distance_mm = sim_distance,\n            .timestamp_us = esp_timer_get_time(),\n            .status = DISTANCE_SENSOR_OK\n        };\n\n        xQueueSend(processed_measurement_queue, &amp;sim_data, portMAX_DELAY);\n        vTaskDelay(pdMS_TO_TICKS(1000));  // 1 second steps\n    }\n}\n</code></pre>"},{"location":"design/led-controller-design/","title":"LED Controller Design","text":""},{"location":"design/led-controller-design/#design-traceability","title":"Design Traceability","text":"Design ID Implements Requirement Priority DSN-LED-ARCH-01 REQ-LED-1 Mandatory DSN-LED-ARCH-02 REQ-LED-2, REQ-LED-3 Mandatory DSN-LED-API-01 REQ-LED-2 Mandatory DSN-LED-API-02 REQ-LED-2, REQ-LED-4 Mandatory DSN-LED-TIMING-01 REQ-LED-1 Mandatory DSN-LED-DATA-01 REQ-LED-4 Mandatory DSN-LED-MEM-01 REQ-LED-3 Mandatory DSN-LED-ERR-01 REQ-LED-2, REQ-LED-3 Mandatory DSN-SIM-LED-01 REQ-SYS-SIM-1 Mandatory"},{"location":"design/led-controller-design/#target-design-architecture","title":"Target Design Architecture","text":""},{"location":"design/led-controller-design/#dsn-led-arch-01-rmt-peripheral-hardware-abstraction-design","title":"DSN-LED-ARCH-01: RMT Peripheral Hardware Abstraction Design","text":"<p>Addresses: REQ-LED-1</p> <p>Design: ESP32 RMT (Remote Control) peripheral abstraction for WS2812 timing generation.</p> <ul> <li>RMT Channel Configuration: 80MHz resolution, configurable GPIO pin, 64-symbol memory blocks</li> <li>Encoder Configuration: Bytes encoder with precise WS2812 timing (T0H=0.4\u00b5s, T0L=0.8\u00b5s, T1H=0.8\u00b5s, T1L=0.4\u00b5s)</li> <li>Transmission Queue: 4-deep queue for overlapping operations</li> <li>Clock Source: Default ESP32 RMT clock for consistent timing</li> <li>Channel Management: Single channel allocation with proper cleanup</li> </ul> <p>Validation: RMT channel created successfully, timing parameters match WS2812 datasheet, transmission completes without errors.</p>"},{"location":"design/led-controller-design/#dsn-led-arch-02-ram-buffer-architecture-design","title":"DSN-LED-ARCH-02: RAM Buffer Architecture Design","text":"<p>Addresses: REQ-LED-2, REQ-LED-3</p> <p>Design: In-memory LED state buffer for performance optimization and atomic updates.</p> <ul> <li>Buffer Structure: Array of <code>led_color_t</code> structures (3 bytes per LED: R, G, B)</li> <li>Dynamic Allocation: <code>malloc()</code> during initialization based on configured LED count (REQ-LED-3)</li> <li>State Separation: RAM buffer independent from physical LED state until <code>led_show()</code></li> <li>Update Pattern: Modify buffer \u2192 call <code>led_show()</code> \u2192 physical update</li> <li>Memory Management: Allocation during init, deallocation during cleanup</li> </ul> <p>Validation: Buffer allocates correctly for configured LED count, updates modify only buffer until show, memory freed on cleanup.</p>"},{"location":"design/led-controller-design/#dsn-led-api-01-pixel-level-control-api-design","title":"DSN-LED-API-01: Pixel-Level Control API Design","text":"<p>Addresses: REQ-LED-2</p> <p>Design: Individual LED pixel manipulation with bounds checking and color utilities.</p> <ul> <li><code>led_set_pixel(index, color)</code>: Set specific LED color with index validation</li> <li><code>led_get_pixel(index)</code>: Read current LED color from buffer</li> <li><code>led_clear_pixel(index)</code>: Turn off specific LED (set to black)</li> <li>Color Structure: <code>led_color_t</code> with 8-bit RGB components</li> <li>Predefined Colors: Constants for common colors (RED, GREEN, BLUE, WHITE, OFF, etc.)</li> <li>Bounds Checking: Index validation against configured LED count</li> </ul> <p>Validation: Index validation prevents buffer overruns, color values stored accurately, predefined colors work correctly.</p>"},{"location":"design/led-controller-design/#dsn-led-api-02-batch-operations-api-design","title":"DSN-LED-API-02: Batch Operations API Design","text":"<p>Addresses: REQ-LED-2, REQ-LED-4</p> <p>Design: Efficient batch operations for common patterns and hardware updates.</p> <ul> <li><code>led_clear_all()</code>: Set all LEDs to off state in single operation</li> <li><code>led_show()</code>: Transmit complete buffer to hardware via RMT (enables REQ-LED-4)</li> <li>Color Utilities: <code>led_color_rgb()</code> constructor, <code>led_color_brightness()</code> scaling</li> <li>Status Functions: <code>led_get_count()</code>, <code>led_is_initialized()</code> for state queries</li> <li>Atomic Updates: Buffer modifications independent until <code>led_show()</code> called</li> </ul> <p>Validation: Clear all zeros entire buffer, show triggers RMT transmission, utilities produce correct colors.</p>"},{"location":"design/led-controller-design/#dsn-led-timing-01-ws2812-timing-specification-design","title":"DSN-LED-TIMING-01: WS2812 Timing Specification Design","text":"<p>Addresses: REQ-LED-1</p> <p>Design: Precise WS2812 protocol timing using RMT encoder configuration.</p> <ul> <li>Bit 0 Encoding: High 0.4\u00b5s (32 ticks), Low 0.8\u00b5s (64 ticks)</li> <li>Bit 1 Encoding: High 0.8\u00b5s (64 ticks), Low 0.4\u00b5s (32 ticks)</li> <li>Reset Period: 50\u00b5s (4000 ticks) low signal between frames</li> <li>Clock Resolution: 80MHz RMT clock for 12.5ns tick precision</li> <li>MSB First: Most significant bit transmitted first per WS2812 protocol</li> </ul> <p>Validation: Timing measurements match WS2812 datasheet specifications, LED strips respond correctly.</p>"},{"location":"design/led-controller-design/#dsn-led-data-01-color-representation-and-conversion-design","title":"DSN-LED-DATA-01: Color Representation and Conversion Design","text":"<p>Addresses: REQ-LED-4</p> <p>Design: RGB color representation with GRB hardware conversion for WS2812 compatibility.</p> <ul> <li>API Color Format: RGB (Red, Green, Blue) for user-friendly interface</li> <li>Hardware Format: GRB (Green, Red, Blue) as required by WS2812 LEDs</li> <li>Conversion Logic: Reorder RGB\u2192GRB during <code>led_show()</code> transmission preparation</li> <li>Data Buffer: Temporary allocation for GRB transmission data</li> <li>Brightness Scaling: Integer arithmetic for brightness adjustment without floating point</li> </ul> <p>Validation: Color values convert correctly RGB\u2192GRB, brightness scaling maintains color ratios, no precision loss.</p>"},{"location":"design/led-controller-design/#dsn-led-mem-01-dynamic-memory-management-design","title":"DSN-LED-MEM-01: Dynamic Memory Management Design","text":"<p>Addresses: REQ-LED-3</p> <p>Design: Controlled dynamic allocation with proper cleanup and error handling.</p> <ul> <li>Initialization Allocation: LED buffer <code>malloc()</code> based on configured count</li> <li>Validation: LED count bounds (1-1000) to prevent excessive allocation</li> <li>Cleanup: <code>free()</code> buffer and reset pointers during deinitialization</li> <li>Temporary Allocation: GRB data buffer during transmission (freed immediately)</li> <li>Error Recovery: Cleanup partial initialization on failure</li> </ul> <p>Validation: Memory allocated correctly, no leaks after deinitialization, error paths clean up properly.</p>"},{"location":"design/led-controller-design/#dsn-led-err-01-error-handling-and-validation-design","title":"DSN-LED-ERR-01: Error Handling and Validation Design","text":"<p>Addresses: REQ-LED-2, REQ-LED-3</p> <p>Design: Comprehensive input validation and state checking with appropriate error codes.</p> <ul> <li>State Validation: Check initialization before operations</li> <li>Bounds Checking: LED index validation against configured count (REQ-LED-3)</li> <li>Parameter Validation: Non-null config, valid LED count range</li> <li>RMT Error Handling: Propagate RMT peripheral errors to caller</li> <li>Graceful Degradation: Safe operation when not initialized (return errors, not crash)</li> </ul> <p>Validation: Invalid inputs return appropriate error codes, operations fail safely, system remains stable.</p>"},{"location":"design/led-controller-design/#simulator-design-dsn-sim","title":"Simulator Design (DSN-SIM)","text":""},{"location":"design/led-controller-design/#dsn-sim-led-01-led-controller-simulator-design","title":"DSN-SIM-LED-01: LED Controller Simulator Design","text":"<p>Addresses: REQ-SYS-SIM-1</p> <p>Design: Provide a simulator implementation for the LED controller that exposes the full public API (<code>led_controller.h</code>) while replacing RMT transmission with a rate-limited terminal visualization.</p> <ul> <li>API Compatibility: The simulator SHALL implement all public functions declared in <code>led_controller.h</code> and return the same error codes and behavior as the hardware implementation.</li> <li>Buffer Semantics: Maintain the same in-memory buffer and batch <code>led_show()</code> semantics as the hardware implementation.</li> <li>Visualization: Rate-limited (\u22481Hz) terminal output using Unicode emoji blocks (\ud83d\udd34\ud83d\udfe2\ud83d\udd35\ud83d\udfe1\ud83d\udfe3\u26aa\u26ab) to represent per-pixel color state.</li> <li>Non-intrusive: The simulator SHOULD NOT change header files, configuration, or higher-layer logic (e.g., display logic).</li> </ul> <p>Validation: Simulator build compiles with <code>CONFIG_TARGET_EMULATOR=y</code>, <code>led_show()</code> logs appear ~1x/sec and reflect buffer state.</p> <p>Example simulator <code>led_controller_sim.c</code> snippet (for design guidance):</p> <pre><code>// Rate-limited output - only display ~1x per second\nstatic uint64_t last_display_time = 0;\n\nesp_err_t led_show(void) {\n    uint64_t now = esp_timer_get_time();\n    if (now - last_display_time &lt; 1000000) {  // 1 second = 1,000,000 us\n        return ESP_OK;  // Suppress output, just return success\n    }\n    last_display_time = now;\n\n    // Now do the emoji output\n    printf(\"\\n[LED Strip]: \");\n    for (int i = 0; i &lt; led_count; i++) {\n        led_color_t* color = &amp;led_buffer[i];\n\n        if (color-&gt;red &gt; 200 &amp;&amp; color-&gt;green &lt; 50 &amp;&amp; color-&gt;blue &lt; 50) {\n            printf(\"\ud83d\udd34\");  // Red\n        } else if (color-&gt;green &gt; 200 &amp;&amp; color-&gt;red &lt; 50 &amp;&amp; color-&gt;blue &lt; 50) {\n            printf(\"\ud83d\udfe2\");  // Green  \n        } else if (color-&gt;blue &gt; 200 &amp;&amp; color-&gt;red &lt; 50 &amp;&amp; color-&gt;green &lt; 50) {\n            printf(\"\ud83d\udd35\");  // Blue\n        } else if (color-&gt;red &gt; 200 &amp;&amp; color-&gt;blue &gt; 200 &amp;&amp; color-&gt;green &lt; 50) {\n            printf(\"\ud83d\udfe3\");  // Magenta/Purple\n        } else if (color-&gt;red &gt; 200 &amp;&amp; color-&gt;green &gt; 200 &amp;&amp; color-&gt;blue &lt; 50) {\n            printf(\"\ud83d\udfe1\");  // Yellow\n        } else if (color-&gt;red + color-&gt;green + color-&gt;blue &gt; 600) {\n            printf(\"\u26aa\");  // White/bright\n        } else if (color-&gt;red + color-&gt;green + color-&gt;blue &gt; 100) {\n            printf(\"\ud83d\udfe1\");  // Dim/mixed\n        } else {\n            printf(\"\u26ab\");  // Off\n        }\n    }\n    printf(\"\\n\");\n    return ESP_OK;\n}\n</code></pre>"},{"location":"design/startup-test-design/","title":"Startup Test Design","text":""},{"location":"design/startup-test-design/#design-traceability","title":"Design Traceability","text":"Design ID Implements Requirement Priority DSN-STARTUP-1 REQ-STARTUP-1 Mandatory DSN-STARTUP-2 REQ-STARTUP-2 Mandatory DSN-STARTUP-3 REQ-STARTUP-3 Important"},{"location":"design/startup-test-design/#target-design-architecture","title":"Target Design Architecture","text":""},{"location":"design/startup-test-design/#dsn-startup-1-led-controller-dependency-design","title":"DSN-STARTUP-1: LED Controller Dependency Design","text":"<p>Addresses: REQ-STARTUP-1</p> <p>Design: Startup test executes after LED controller initialization in main() function.</p> <ul> <li>Execution Point: Called in main.c after <code>led_controller_init()</code> succeeds</li> <li>Dependency Check: Uses <code>led_is_initialized()</code> to verify LED controller readiness</li> <li>Error Handling: Returns <code>ESP_ERR_INVALID_STATE</code> if LED controller not initialized</li> <li>Integration: Direct function call from main(), no separate task required</li> </ul> <p>Architecture Flow: <pre><code>main() \u2192 led_controller_init() \u2192 led_running_test_single_cycle() \u2192 normal_operation()\n</code></pre></p> <p>Validation: LED controller must be successfully initialized before startup test can execute.</p>"},{"location":"design/startup-test-design/#dsn-startup-2-sequential-led-pattern-algorithm-design","title":"DSN-STARTUP-2: Sequential LED Pattern Algorithm Design","text":"<p>Addresses: REQ-STARTUP-2</p> <p>Design: Single moving LED pattern implemented using sequential clear-set-show operations.</p> <p>Core Algorithm (<code>led_running_test_single_cycle</code>): <pre><code>for (uint16_t i = 0; i &lt; led_count; i++) {\n    // Clear previous LED (wrap around for first LED)\n    if (i &gt; 0) {\n        led_clear_pixel(i - 1);\n    } else {\n        led_clear_pixel(led_count - 1);  // Clear last LED on first iteration\n    }\n\n    // Set current LED\n    led_set_pixel(i, color);\n    led_show();                    // Update physical LEDs\n\n    vTaskDelay(pdMS_TO_TICKS(delay_ms));  // Timing control\n}\n</code></pre></p> <p>Design Characteristics: - Single LED Active: Only one LED illuminated at any time (clear previous, set current) - Sequential Progression: LEDs activated from index 0 to (led_count-1) - Configurable Color: Color parameter allows different startup patterns - Configurable Timing: Delay parameter controls speed (default 50ms per LED) - Immediate Updates: <code>led_show()</code> called after each LED change for real-time feedback</p> <p>Current Implementation: - Called as: <code>led_running_test_single_cycle(LED_COLOR_GREEN, 50)</code> - Green color for startup indication - 50ms delay between LED activations - Single cycle (not repeating)</p> <p>Validation: LEDs light sequentially from first to last position with visible timing.</p>"},{"location":"design/startup-test-design/#dsn-startup-3-startup-integration-and-cleanup-design","title":"DSN-STARTUP-3: Startup Integration and Cleanup Design","text":"<p>Addresses: REQ-STARTUP-3</p> <p>Design: One-time execution pattern with proper LED state management.</p> <p>Integration Pattern (from main.c): <pre><code>// 1. Initialize LED controller\nled_controller_init(&amp;led_config);\n\n// 2. Clear initial state\nled_clear_all();\nled_show();\n\n// 3. Execute startup test\nESP_LOGI(TAG, \"Running one-time LED hardware test...\");\nled_running_test_single_cycle(LED_COLOR_GREEN, 50);\nESP_LOGI(TAG, \"Hardware test completed\");\n\n// 4. Clean up for normal operation\nled_clear_all();\nled_show();\n\n// 5. Continue with normal initialization\n</code></pre></p> <p>Design Characteristics: - One-Time Execution: Called once during startup, not as background task - State Cleanup: LEDs cleared before and after test - Logging Integration: ESP_LOG statements for startup visibility - Non-Blocking: Executes synchronously in main thread - Clean Transition*: All LEDs off after test, ready for normal operation</p> <p>Performance: - Total execution time for 40 LEDs: ~2 seconds (40 \u00d7 50ms) - Memory usage: No additional allocation beyond LED controller - CPU impact: Minimal, just timing delays</p> <p>Validation: Test completes within reasonable time, all LEDs cleared after completion.</p>"},{"location":"design/startup-test-design/#implementation-architecture","title":"Implementation Architecture","text":""},{"location":"design/startup-test-design/#component-structure","title":"Component Structure","text":"<pre><code>main/components/startup_tests/\n\u251c\u2500\u2500 led_running_test.h          // Public API\n\u251c\u2500\u2500 led_running_test.c          // Implementation  \n\u2514\u2500\u2500 CMakeLists.txt              // Build config\n</code></pre>"},{"location":"design/startup-test-design/#api-design","title":"API Design","text":"<ul> <li>Primary Function: <code>led_running_test_single_cycle(color, delay_ms)</code> </li> <li>Extended Functions: <code>led_running_test_multiple_cycles()</code>, <code>led_running_test_rainbow()</code></li> <li>Error Handling: ESP-IDF error codes (<code>ESP_OK</code>, <code>ESP_ERR_INVALID_STATE</code>)</li> <li>Dependencies: LED controller component</li> </ul>"},{"location":"design/startup-test-design/#alternative-patterns-available","title":"Alternative Patterns Available","text":"<p>The implementation provides additional patterns for extended testing:</p> <ul> <li>Multiple Cycles: <code>led_running_test_multiple_cycles()</code> for repeated patterns</li> <li>Rainbow Effect: <code>led_running_test_rainbow()</code> for color-changing sequences</li> </ul> <p>These are available for advanced startup testing or diagnostic modes but not used in basic startup sequence.</p>"},{"location":"design/system-design/","title":"ESP32 Distance Measurement - Technical Architecture","text":""},{"location":"design/system-design/#overview","title":"Overview","text":"<p>This document describes the technical architecture and implementation details for the ESP32 Distance Measurement with LED Strip Display project.</p>"},{"location":"design/system-design/#design-traceability","title":"Design Traceability","text":"Design ID Implements Requirement Priority DSN-SYS-1 REQ-SYS-1 Mandatory DSN-SYS-2 REQ-SYS-2 Mandatory DSN-SYS-3 REQ-SYS-3 Mandatory DSN-SYS-4 REQ-SYS-4 Mandatory DSN-SYS-5 REQ-SYS-5 Mandatory DSN-SYS-6 REQ-SYS-6 Mandatory DSN-SYS-7 REQ-SYS-7 Mandatory DSN-SYS-8 REQ-SYS-8 Mandatory DSN-SIM-LED-01 REQ-SYS-SIM-1 Mandatory DSN-SIM-SNS-01 REQ-SYS-SIM-1 Mandatory"},{"location":"design/system-design/#system-architecture","title":"System Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                        Main Application                      \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  Display Logic Module                                       \u2502\n\u2502  - Distance to LED mapping                                  \u2502\n\u2502  - Animation control                                        \u2502\n\u2502  - Visual feedback patterns                                 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  LED Controller \u2502  Distance Sensor  \u2502    Web Server         \u2502\n\u2502  Module         \u2502  Module           \u2502    Module             \u2502\n\u2502  - WS2812       \u2502  - HC-SR04        \u2502    - HTTP Server      \u2502\n\u2502  - RMT Backend  \u2502  - Timing Control \u2502    - WebSocket        \u2502\n\u2502  - Color Mgmt   \u2502  - Filtering      \u2502    - JSON API         \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502           ESP-IDF Hardware Abstraction Layer                \u2502\n\u2502  RMT | GPIO | Timer | WiFi | HTTP Server | FreeRTOS        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"design/system-design/#module-specifications","title":"Module Specifications","text":""},{"location":"design/system-design/#1-led-controller-module","title":"1. LED Controller Module","text":"<p>Purpose: Low-level hardware abstraction for WS2812 LED strip control with RAM buffer management.</p> <p>Hardware Interface: - Configurable GPIO pin for WS2812 data line (RMT backend) - Configurable number of individually addressable LEDs - 5V power supply for LED strip</p> <p>Key Features: - Individual pixel control (set/get/clear) - RAM buffer maintains current LED state - Manual update trigger for performance optimization - Color space management (RGB) - Configurable LED count during initialization - Read capability for current LED states</p> <p>Current Status: \u2705 COMPLETED - Component implemented in <code>components/led_controller/</code></p>"},{"location":"design/system-design/#2-distance-sensor-module","title":"2. Distance Sensor Module","text":"<p>Purpose: Accurate distance measurement using HC-SR04 ultrasonic sensor with interrupt-driven timing and dual-queue architecture.</p> <p>Hardware Interface: - GPIO14: Trigger pin - GPIO13: Echo pin - Timing-critical pulse measurement with ESP32 timers</p> <p>Key Features: - Interrupt-driven measurement with precise timing control - Dual-queue system for non-blocking API access - Signal filtering and error detection (timeout, out-of-range, invalid readings) - Temperature compensation support - Queue overflow detection and statistics - Configurable measurement rate (default: 10Hz) - Background FreeRTOS task (Priority 6) for real-time operation</p> <p>Current Status: \u2705 COMPLETED - Component implemented in <code>components/distance_sensor/</code></p>"},{"location":"design/system-design/#3-display-logic-module","title":"3. Display Logic Module","text":"<p>Purpose: Business logic for converting distance measurements to visual LED patterns.</p> <p>Key Features: - Distance-to-LED position mapping algorithms (10cm-50cm \u2192 LEDs 0-39) - Multiple display modes (running LED, range indicator, error states) - Smooth transitions between states with real-time updates - Color coding for different distance ranges (green/blue normal, red errors) - Animation state management with FreeRTOS task (Priority 3) - Error visual indicators (sensor timeout, out-of-range conditions)</p> <p>Current Status: \u2705 COMPLETED - Component implemented in <code>main/display_logic.h/c</code></p>"},{"location":"design/system-design/#4-web-server-module","title":"4. Web Server Module","text":"<p>Purpose: Remote monitoring and configuration interface with WiFi management and HTTPS security.</p> <p>Key Features:</p> <ul> <li>Smart WiFi Management: Auto-connect to stored credentials with AP fallback</li> <li>Captive Portal: Automatic configuration page with network scanning</li> <li>HTTPS Server: Secure mobile-responsive web interface for status and settings</li> <li>HTTP Redirect Server: Lightweight HTTP server redirecting to HTTPS</li> <li>Credential Storage: Secure WiFi credential management in NVS flash</li> <li>Network Switching: Seamless AP \u2194 STA mode transitions</li> <li>DNS Server: Captive portal detection and auto-redirect</li> <li>Reset Functionality: Clear stored credentials and restart system</li> <li>Certificate Management: Automated self-signed certificate generation and embedding</li> </ul> <p>Security Implementation: - HTTPS server on port 443 with embedded SSL certificates - HTTP redirect server on port 80 for user convenience - Self-signed certificates with 25-year validity period - Build-time certificate generation (no manual management required) - Certificate embedding using ESP-IDF EMBED_FILES feature</p> <p>Current Status: \ud83d\udd04 IN PROGRESS (Step 4.2) - HTTPS implementation underway</p>"},{"location":"design/system-design/#5-certificate-handler-module","title":"5. Certificate Handler Module","text":"<p>Purpose: Automated SSL certificate generation and management for HTTPS security.</p> <p>Technical Implementation: - Build-time Generation: Certificates generated automatically during ESP-IDF build if missing - Dual Tool Support: OpenSSL binary (preferred) or Python cryptography library (fallback) - Certificate Embedding: Uses ESP-IDF EMBED_FILES to embed certificates in firmware - Long-term Validity: 25-year certificate validity period for device lifecycle - No Manual Management: Zero configuration required from developers or users</p> <p>Certificate Properties: - Common Name: ESP32-Distance-Sensor - Organization: ESP32 Distance Project - Key Size: RSA 2048-bit - Subject Alternative Names: DNS (esp32-distance-sensor.local), IP (192.168.4.1) - Format: PEM format for maximum compatibility</p> <p>Security Features: - Private keys never committed to version control (.gitignore exclusions) - Fresh certificate generation on clean builds - Self-signed certificates appropriate for local IoT devices - Standard SSL/TLS encryption for web traffic</p> <p>Current Status: \u2705 COMPLETED - Component implemented in <code>components/cert_handler/</code></p>"},{"location":"design/system-design/#data-flow","title":"Data Flow","text":"<pre><code>HC-SR04 Sensor \u2192 Distance Sensor Module \u2192 Display Logic Module \u2192 LED Controller Module \u2192 WS2812 Strip\n                                     \u2193\n                              Web Server Module (HTTPS/HTTP) \u2192 HTTP Client (WiFi/Captive Portal)\n                                     \u2191\n                              Certificate Handler \u2192 Embedded SSL Certificates\n</code></pre>"},{"location":"design/system-design/#threading-model","title":"Threading Model","text":"<pre><code>Main Task (Priority 1, Core 0)\n\u251c\u2500\u2500 Distance Sensor Task (Priority 6, Core 0)\n\u2502   \u2514\u2500\u2500 Real-time measurements (100ms intervals)\n\u251c\u2500\u2500 Display Logic Task (Priority 3, Core 0) \n\u2502   \u2514\u2500\u2500 Event-driven LED visualization (blocking sensor API)\n\u2514\u2500\u2500 WiFi/Web Server Tasks (Priority 2, Core 1)\n    \u251c\u2500\u2500 WiFi Management (connection/AP switching)\n    \u251c\u2500\u2500 HTTP Server (request handling)\n    \u2514\u2500\u2500 DNS Server (captive portal)\n\nCore 1: WiFi/Network Stack + ESP-IDF System Tasks\n</code></pre>"},{"location":"design/system-design/#memory-management","title":"Memory Management","text":"<ul> <li>LED Buffer: Dynamic allocation based on configured LED count (3 bytes per LED)</li> <li>Sensor History: Circular buffer for averaging (configurable size)</li> <li>Web Server: Dynamic allocation for HTTP responses</li> <li>Stack Sizes: Optimized per task requirements</li> </ul>"},{"location":"design/system-design/#performance-requirements","title":"Performance Requirements","text":"<ul> <li>LED Update Rate: 10Hz minimum for smooth visual feedback</li> <li>Sensor Sampling: 10Hz for responsive distance tracking</li> <li>Web Interface: Reasonable latency for monitoring applications</li> <li>Memory Usage: &lt; 50KB total application memory</li> </ul>"},{"location":"design/system-design/#configuration-management","title":"Configuration Management","text":"<p>All configurable parameters exposed through:</p> <ul> <li>Compile-time defines in header files</li> <li>Runtime configuration via web interface</li> <li>ESP-IDF menuconfig integration</li> </ul>"},{"location":"design/system-design/#implementation-notes","title":"Implementation Notes","text":"<ul> <li>LED Controller: Hardware abstraction documented in <code>led_controller.h</code></li> <li>Distance Sensor: Timing-critical implementation documented in <code>distance_sensor.h</code> </li> <li>Display Logic: Business logic patterns documented in <code>display_logic.h</code></li> <li>Web Server: HTTPS/HTTP API documented in <code>web_server.h</code></li> <li>Certificate Handler: SSL certificate management documented in <code>cert_handler.h</code></li> </ul> <p>Each module provides comprehensive API documentation in its respective header file.</p>"},{"location":"development/","title":"Development Environment","text":"<p>This section covers all aspects of developing the ESP32 Distance Sensor project, from setting up your environment to debugging and testing.</p>"},{"location":"development/#quick-links","title":"Quick Links","text":"<ul> <li>Dev Container Setup - GitHub Codespaces and local Docker development</li> <li>QEMU Emulator - Running the project in QEMU with network support</li> <li>Debugging - GDB debugging with QEMU and VS Code</li> <li>Network Internals - Deep dive into QEMU IP tunnel implementation</li> <li>Pre-commit Hooks - Automated quality checks and documentation validation</li> </ul>"},{"location":"development/#getting-started","title":"Getting Started","text":""},{"location":"development/#recommended-github-codespaces-cloud","title":"Recommended: GitHub Codespaces (Cloud)","text":"<p>The fastest way to start developing:</p> <ol> <li>Open the repository in GitHub Codespaces</li> <li>Wait for container to build (first time only)</li> <li>Run QEMU: <code>./tools/run-qemu-network.sh</code></li> <li>Start debugging with F5 or access the web interface</li> </ol>"},{"location":"development/#alternative-local-dev-container","title":"Alternative: Local Dev Container","text":"<p>For offline development or custom hardware:</p> <ol> <li>Install Docker Desktop</li> <li>Open project in VS Code</li> <li>\"Reopen in Container\" when prompted</li> <li>Connect hardware via USB (see Dev Container Setup)</li> </ol>"},{"location":"development/#development-workflow","title":"Development Workflow","text":"<pre><code># Build the project\nidf.py build\n\n# Flash to hardware (hardware mode)\nidf.py -p /dev/ttyUSB0 flash monitor\n\n# Run in emulator (emulator mode)\n./tools/run-qemu-network.sh\n\n# Debug in emulator\n# Press F5 in VS Code or use Debug panel\n</code></pre>"},{"location":"development/#key-features","title":"Key Features","text":"<ul> <li>Consistent Environment: Same toolchain everywhere (Codespaces, Docker, CI/CD)</li> <li>ESP-IDF v5.4.1: Latest stable version pre-configured</li> <li>QEMU Support: Test without hardware using full network emulation</li> <li>GDB Debugging: Full breakpoint debugging in emulator</li> <li>Web Interface: Access emulated web server via browser</li> <li>Quality Gates: Pre-commit hooks validate documentation and code before commits</li> </ul>"},{"location":"development/#next-steps","title":"Next Steps","text":"<ul> <li>New to dev containers? Start with Dev Container Setup</li> <li>Want to debug? Check out Debugging Guide</li> <li>Curious about QEMU networking? See QEMU Emulator</li> <li>Need technical details? Read Network Internals</li> <li>Setting up quality checks? See Pre-commit Hooks</li> </ul>"},{"location":"development/#known-issues","title":"Known Issues","text":"<p>Unfortunately ESP-IDF-WEB doesn't automatically install. please search the extension in the marketplace and install it.</p>"},{"location":"development/debugging/","title":"Debugging Guide","text":"<p>The ESP32 Distance Sensor project supports full GDB debugging in both emulator (QEMU) and hardware modes. This guide focuses on QEMU debugging since it's now fully supported in GitHub Codespaces.</p>"},{"location":"development/debugging/#quick-start-debugging-in-qemu","title":"Quick Start: Debugging in QEMU","text":""},{"location":"development/debugging/#1-start-qemu-debug-server","title":"1. Start QEMU Debug Server","text":"<p>The QEMU emulator automatically starts with GDB support enabled:</p> <pre><code>./tools/run-qemu-network.sh\n</code></pre> <p>This starts QEMU in debug mode, waiting for a debugger connection on port 3333.</p>"},{"location":"development/debugging/#2-start-debugging-in-vs-code","title":"2. Start Debugging in VS Code","text":"<p>Simply press F5 or use the Debug panel:</p> <ol> <li>Open the Debug view (Ctrl+Shift+D / Cmd+Shift+D)</li> <li>Select \"QEMU: GDB\" from the dropdown</li> <li>Click the green play button or press F5</li> </ol> <p>VS Code will: - \u2705 Connect to QEMU's GDB server (port 3333) - \u2705 Load symbols from the built ELF file - \u2705 Break at <code>app_main()</code> - \u2705 Show full call stack and variables</p>"},{"location":"development/debugging/#debugging-features","title":"Debugging Features","text":""},{"location":"development/debugging/#breakpoints","title":"Breakpoints","text":"<p>Set breakpoints by clicking in the editor gutter (left of line numbers):</p> <pre><code>void app_main(void)\n{\n    // Breakpoint here: Click in gutter at line number\n    ESP_LOGI(TAG, \"ESP32 Distance Sensor Starting...\");\n\n    // Conditional breakpoint: Right-click \u2192 Add Conditional Breakpoint\n    if (distance &lt; 10) {\n        // Break only when distance &lt; 10\n    }\n}\n</code></pre>"},{"location":"development/debugging/#watch-variables","title":"Watch Variables","text":"<p>Monitor variables in real-time:</p> <ol> <li>Watch Panel: Add expressions to watch</li> <li>Variables Panel: Inspect local and global variables</li> <li>Hover: Mouse over variables to see current values</li> </ol>"},{"location":"development/debugging/#call-stack","title":"Call Stack","text":"<p>View the complete function call hierarchy:</p> <pre><code>#0  distance_sensor_read() at distance_sensor.c:45\n#1  sensor_task() at main.c:123\n#2  vPortTaskWrapper() at port.c:168\n#3  0x400d1234 in ?? ()\n</code></pre>"},{"location":"development/debugging/#step-through-code","title":"Step Through Code","text":"Key Action Description F10 Step Over Execute current line, don't enter functions F11 Step Into Enter function calls Shift+F11 Step Out Continue until current function returns F5 Continue Run until next breakpoint"},{"location":"development/debugging/#debug-configuration","title":"Debug Configuration","text":"<p>The project includes two debug configurations in <code>.vscode/launch.json</code>:</p>"},{"location":"development/debugging/#qemu-gdb-recommended","title":"QEMU: GDB (Recommended)","text":"<pre><code>{\n    \"name\": \"QEMU: GDB\",\n    \"type\": \"cppdbg\",\n    \"request\": \"launch\",\n    \"program\": \"${workspaceFolder}/build/distance.elf\",\n    \"miDebuggerServerAddress\": \"localhost:3333\",\n    \"cwd\": \"${workspaceFolder}\",\n    \"setupCommands\": [\n        { \"text\": \"target remote localhost:3333\" },\n        { \"text\": \"file build/distance.elf\" },\n        { \"text\": \"thbreak app_main\" },\n        { \"text\": \"continue\" }\n    ]\n}\n</code></pre> <p>Features: - Connects to QEMU GDB server - Breaks at <code>app_main()</code> automatically - Full source-level debugging - Works in GitHub Codespaces</p>"},{"location":"development/debugging/#esp32-hardware-alternative","title":"ESP32 Hardware (Alternative)","text":"<p>For debugging on real ESP32 hardware with JTAG adapter:</p> <pre><code>{\n    \"name\": \"ESP32: OpenOCD\",\n    \"type\": \"cppdbg\",\n    \"request\": \"launch\",\n    \"program\": \"${workspaceFolder}/build/distance.elf\",\n    \"miDebuggerServerAddress\": \"localhost:3333\",\n    \"cwd\": \"${workspaceFolder}\",\n    \"setupCommands\": [\n        { \"text\": \"target remote localhost:3333\" },\n        { \"text\": \"mon reset halt\" },\n        { \"text\": \"flushregs\" },\n        { \"text\": \"thbreak app_main\" },\n        { \"text\": \"continue\" }\n    ]\n}\n</code></pre> <p>Requirements: - ESP-PROG or similar JTAG adapter - OpenOCD running with appropriate configuration - Hardware connection (see ESP-IDF JTAG debugging guide)</p>"},{"location":"development/debugging/#common-debugging-scenarios","title":"Common Debugging Scenarios","text":""},{"location":"development/debugging/#debug-network-stack","title":"Debug Network Stack","text":"<p>Set breakpoints in network components:</p> <pre><code>// In wifi_manager_sim.c\nesp_err_t wifi_manager_init_sim(void)\n{\n    ESP_LOGI(TAG, \"Initializing network stack...\");  // Breakpoint here\n\n    // Step through network initialization\n    esp_err_t ret = netif_uart_tunnel_init(&amp;tunnel_config);\n    return ret;\n}\n</code></pre>"},{"location":"development/debugging/#debug-uart-tunnel","title":"Debug UART Tunnel","text":"<p>Watch packet flow in the IP tunnel:</p> <pre><code>// In netif_uart_tunnel_sim.c\nstatic void uart_rx_task(void *arg)\n{\n    while (1) {\n        // Breakpoint here to see incoming packets\n        int len = uart_read_bytes(UART_NUM, len_buf, 2, portMAX_DELAY);\n\n        // Add to watch: len_buf[0], len_buf[1]\n    }\n}\n</code></pre>"},{"location":"development/debugging/#debug-web-server","title":"Debug Web Server","text":"<p>Trace HTTP request handling:</p> <pre><code>// In web_server.c\nstatic esp_err_t root_handler(httpd_req_t *req)\n{\n    ESP_LOGI(TAG, \"Handling root request\");  // Breakpoint here\n\n    // Watch variables: req-&gt;uri, req-&gt;method\n    httpd_resp_send(req, index_html_start, HTTPD_RESP_USE_STRLEN);\n    return ESP_OK;\n}\n</code></pre>"},{"location":"development/debugging/#debug-sensor-reading","title":"Debug Sensor Reading","text":"<p>Monitor distance measurements:</p> <pre><code>// In distance_sensor.c\nesp_err_t distance_sensor_read(uint16_t *distance_cm)\n{\n    // Breakpoint here\n    gpio_set_level(TRIGGER_PIN, 1);\n    esp_rom_delay_us(10);\n    gpio_set_level(TRIGGER_PIN, 0);\n\n    // Watch: *distance_cm after measurement\n    *distance_cm = calculated_distance;\n    return ESP_OK;\n}\n</code></pre>"},{"location":"development/debugging/#advanced-debugging","title":"Advanced Debugging","text":""},{"location":"development/debugging/#gdb-command-line","title":"GDB Command Line","text":"<p>Access GDB directly for advanced commands:</p> <pre><code># In another terminal\nxtensa-esp32-elf-gdb build/distance.elf\n\n# Connect to QEMU\n(gdb) target remote localhost:3333\n\n# Load symbols\n(gdb) file build/distance.elf\n\n# Set breakpoint\n(gdb) break app_main\n\n# Continue execution\n(gdb) continue\n\n# Print variables\n(gdb) print distance_cm\n\n# Backtrace\n(gdb) bt\n\n# Examine memory\n(gdb) x/16xb 0x3ffb0000\n</code></pre>"},{"location":"development/debugging/#memory-inspection","title":"Memory Inspection","text":"<p>View memory regions:</p> <pre><code># Check heap status\n(gdb) call heap_caps_print_heap_info(MALLOC_CAP_8BIT)\n\n# Inspect task stack\n(gdb) info threads\n(gdb) thread 2\n(gdb) bt\n</code></pre>"},{"location":"development/debugging/#freertos-task-debugging","title":"FreeRTOS Task Debugging","text":"<p>List all tasks:</p> <pre><code>(gdb) info threads\n\n# Switch to specific task\n(gdb) thread 3\n\n# View task stack\n(gdb) bt full\n</code></pre>"},{"location":"development/debugging/#debugging-tips","title":"Debugging Tips","text":""},{"location":"development/debugging/#1-enable-verbose-logging","title":"1. Enable Verbose Logging","text":"<p>Before debugging, increase log verbosity:</p> <pre><code>// In component file\n#define LOG_LOCAL_LEVEL ESP_LOG_DEBUG\n\n// Or in sdkconfig\nCONFIG_LOG_DEFAULT_LEVEL_DEBUG=y\n</code></pre>"},{"location":"development/debugging/#2-use-assertions","title":"2. Use Assertions","text":"<p>Add runtime checks:</p> <pre><code>#include \"esp_assert.h\"\n\nvoid process_data(uint8_t *buffer) {\n    assert(buffer != NULL);\n    ESP_ERROR_CHECK(process_buffer(buffer));\n}\n</code></pre>"},{"location":"development/debugging/#3-watchpoints","title":"3. Watchpoints","text":"<p>Break when variable changes:</p> <pre><code>(gdb) watch distance_cm\n(gdb) continue\n# Breaks when distance_cm is modified\n</code></pre>"},{"location":"development/debugging/#4-conditional-breakpoints","title":"4. Conditional Breakpoints","text":"<p>Break only when condition is true:</p> <pre><code>(gdb) break distance_sensor_read if distance_cm &lt; 10\n</code></pre> <p>Or in VS Code: Right-click breakpoint \u2192 Edit Breakpoint \u2192 Add condition</p>"},{"location":"development/debugging/#troubleshooting","title":"Troubleshooting","text":""},{"location":"development/debugging/#debugger-wont-connect","title":"Debugger Won't Connect","text":"<p>Problem: VS Code can't connect to GDB server</p> <p>Solutions: <pre><code># 1. Check if QEMU is running\nps aux | grep qemu\n\n# 2. Verify GDB port is open\nnc -zv localhost 3333\n\n# 3. Restart QEMU\n./tools/stop_qemu.sh\n./tools/run-qemu-network.sh\n\n# 4. Wait for QEMU to be ready (script does this automatically)\n</code></pre></p>"},{"location":"development/debugging/#no-symbols-source-code","title":"No Symbols / Source Code","text":"<p>Problem: Debugger shows assembly instead of C code</p> <p>Solutions: <pre><code># 1. Ensure project is built with debug symbols\nidf.py menuconfig\n# Component config \u2192 Compiler options \u2192 Optimization Level \u2192 Debug (-Og)\n\n# 2. Rebuild\nidf.py fullclean\nidf.py build\n\n# 3. Verify ELF file exists\nls -lh build/distance.elf\n</code></pre></p>"},{"location":"development/debugging/#breakpoints-not-working","title":"Breakpoints Not Working","text":"<p>Problem: Breakpoints are ignored or show as \"unverified\"</p> <p>Solutions: - Ensure file is actually compiled (not excluded by #ifdef) - Check optimization level (too high optimization can skip code) - Verify you're debugging the correct build - Try <code>thbreak</code> (temporary hardware breakpoint) instead</p>"},{"location":"development/debugging/#slow-debugging","title":"Slow Debugging","text":"<p>Problem: Stepping through code is very slow</p> <p>This is normal in QEMU! QEMU emulation is slower than real hardware.</p> <p>Tips to improve: - Use breakpoints instead of stepping - Run to cursor (Right-click \u2192 Run to Cursor) - Skip uninteresting functions with Step Over</p>"},{"location":"development/debugging/#next-steps","title":"Next Steps","text":"<ul> <li>QEMU Emulator Guide - Learn more about QEMU setup</li> <li>Network Internals - Debug network issues</li> <li>ESP-IDF JTAG Debugging - Official Guide</li> </ul>"},{"location":"development/debugging/#resources","title":"Resources","text":"<ul> <li>GDB Cheat Sheet</li> <li>ESP-IDF Debugging Documentation</li> <li>VS Code Debugging Documentation</li> </ul>"},{"location":"development/devcontainer/","title":"Development Container Setup","text":"<p>This project uses containerized development with VS Code Dev Containers and GitHub Codespaces for consistent ESP-IDF development environment.</p>"},{"location":"development/devcontainer/#development-options","title":"Development Options","text":""},{"location":"development/devcontainer/#recommended-github-codespaces-cloud","title":"Recommended: GitHub Codespaces (Cloud)","text":"<ul> <li>No local setup required - works entirely in browser</li> <li>Pre-configured ESP-IDF v5.4.1 environment ready instantly</li> <li>USB device access through browser serial interface</li> </ul>"},{"location":"development/devcontainer/#alternative-local-dev-container","title":"Alternative: Local Dev Container","text":"<ul> <li>Uses Docker container with ESP-IDF v5.4.1 pre-installed  </li> <li>Requires Docker Desktop and VS Code with Dev Containers extension</li> <li>Identical environment across all team members and platforms</li> </ul>"},{"location":"development/devcontainer/#using-the-dev-container","title":"Using the Dev Container","text":""},{"location":"development/devcontainer/#in-github-codespaces","title":"In GitHub Codespaces","text":"<ol> <li>Go to your GitHub repository</li> <li>Click \"Code\" \u2192 \"Codespaces\" \u2192 \"Create codespace\"</li> <li>Container will automatically build with ESP-IDF ready</li> <li>Extensions (ESP-IDF, ESP-IDF Web) will be pre-installed</li> </ol>"},{"location":"development/devcontainer/#local-development-with-docker","title":"Local Development with Docker","text":"<ol> <li>Ensure Docker Desktop is running</li> <li>Open the project in VS Code</li> <li>VS Code will prompt: \"Reopen in Container\" \u2192 Click Yes</li> <li>Container builds automatically with ESP-IDF environment</li> </ol>"},{"location":"development/devcontainer/#container-features","title":"Container Features","text":"<ul> <li>ESP-IDF v5.4.1: Matches your local Windows version</li> <li>Pre-configured VS Code: ESP-IDF extension settings ready</li> <li>Web Serial Support: ESP-IDF Web extension for Codespaces flashing/monitoring  </li> <li>Port forwarding: HTTP server (80, 443) and development ports</li> <li>Privileged mode: USB device access for flashing (local Docker only)</li> </ul>"},{"location":"development/devcontainer/#build-commands-in-container","title":"Build Commands in Container","text":"<pre><code># Standard ESP-IDF commands work directly\nidf.py build\nidf.py flash monitor\nidf.py menuconfig\n\n# Container has ESP-IDF environment pre-loaded\n</code></pre>"},{"location":"development/devcontainer/#hardware-flashing","title":"Hardware Flashing","text":"<ul> <li>Local Docker: Hardware connected to Windows is accessible in container</li> <li>Codespaces: Use ESP-IDF Web extension for WebSerial/WebUSB flashing</li> <li>Mixed workflow: Build in container, flash on Windows if needed</li> </ul>"},{"location":"development/devcontainer/#windows-usb-device-setup-local-dev-container-only","title":"Windows USB Device Setup (Local Dev Container Only)","text":"<p>For Windows users running the dev container locally (not needed for Codespaces):</p> <p>Quick Setup: Run <code>tools/attach-esp32.ps1</code> as Administrator - script automatically finds and attaches your ESP32.</p> <p>Manual Setup (if script doesn't work): 1. Install usbipd-win: <code>winget install usbipd</code> 2. Find device: <code>usbipd list</code> (look for USB-SERIAL CH340) 3. Bind device: <code>usbipd bind --busid &lt;BUSID&gt;</code> 4. Attach to container: <code>usbipd attach --wsl --busid &lt;BUSID&gt;</code></p> <p>Note: GitHub Codespaces handles USB through browser serial interface - no manual setup needed.</p>"},{"location":"development/devcontainer/#benefits","title":"Benefits","text":"<ul> <li>Consistent environments across Windows, macOS, Linux, Codespaces</li> <li>No ESP-IDF setup required for new team members</li> <li>Isolated dependencies - container changes don't affect host system</li> <li>Easy onboarding - clone repo, open in VS Code, start coding</li> <li>Your Windows setup unchanged - existing workflow still works</li> </ul>"},{"location":"development/pre-commit-hooks/","title":"Pre-commit Hooks","text":"<p>This project uses pre-commit hooks to ensure code quality and documentation integrity before commits reach the repository.</p>"},{"location":"development/pre-commit-hooks/#overview","title":"Overview","text":"<p>Pre-commit hooks run automatically on <code>git commit</code> and validate changes before they are committed. This ensures:</p> <ul> <li>Documentation is always valid and buildable</li> <li>Links and references are correct</li> <li>Code quality standards are met</li> <li>Both human developers and AI agents (like GitHub Copilot) follow the same quality gates</li> </ul>"},{"location":"development/pre-commit-hooks/#current-hooks","title":"Current Hooks","text":""},{"location":"development/pre-commit-hooks/#mkdocs-documentation-validation","title":"MkDocs Documentation Validation","text":"<p>Hook ID: <code>mkdocs-build</code></p> <p>Validates all documentation using MkDocs strict mode before allowing commits.</p> <p>Configuration (<code>.pre-commit-config.yaml</code>): <pre><code>- id: mkdocs-build\n  name: MkDocs build (strict)\n  entry: mkdocs build --strict\n  language: system\n  files: ^(docs/.*|mkdocs\\.yml)$\n</code></pre></p> <p>What it checks: - Broken links between documentation files - Missing documentation files referenced in navigation - Invalid Markdown syntax - MkDocs configuration errors - Missing required metadata</p> <p>When it runs: - Only when files in <code>docs/</code> directory change - Only when <code>mkdocs.yml</code> configuration changes - Skipped for code-only commits (performance optimization)</p> <p>Output: <pre><code>MkDocs build (strict)....................................................Failed\n- hook id: mkdocs-build\n- duration: 1.01s\n- exit code: 1\n\nINFO    -  Cleaning site directory\nINFO    -  Building documentation to directory: /workspaces/esp32-distance/site\nWARNING -  Doc file 'architecture/README.md' contains a link 'nonexistent-file.md', \nbut the target 'architecture/nonexistent-file.md' is not found among documentation files.\n\nAborted with 1 warnings in strict mode!\n</code></pre></p>"},{"location":"development/pre-commit-hooks/#installation","title":"Installation","text":""},{"location":"development/pre-commit-hooks/#automatic-devcontainer","title":"Automatic (Devcontainer)","text":"<p>Pre-commit is automatically installed when the devcontainer starts via <code>.devcontainer/post-start.sh</code>:</p> <ol> <li>Creates a dedicated virtualenv at <code>~/.venv-devtools</code></li> <li>Installs pre-commit into the virtualenv</li> <li>Runs <code>pre-commit install --install-hooks</code> to set up git hooks</li> </ol> <p>No manual action required - just start coding!</p>"},{"location":"development/pre-commit-hooks/#manual-installation","title":"Manual Installation","text":"<p>If not using the devcontainer or if hooks are not installed:</p> <pre><code># Install pre-commit (if not already installed)\npython3 -m pip install --user pre-commit\n\n# Install hooks for this repository\ncd /workspaces/esp32-distance\npre-commit install --install-hooks\n</code></pre>"},{"location":"development/pre-commit-hooks/#usage","title":"Usage","text":""},{"location":"development/pre-commit-hooks/#normal-workflow","title":"Normal Workflow","text":"<p>Pre-commit hooks run automatically on <code>git commit</code>:</p> <pre><code># Make changes to documentation\nvim docs/architecture/README.md\n\n# Stage and commit\ngit add docs/architecture/README.md\ngit commit -m \"docs: Update architecture overview\"\n\n# Hook runs automatically and validates documentation\n# If validation passes, commit succeeds\n# If validation fails, commit is blocked with error message\n</code></pre>"},{"location":"development/pre-commit-hooks/#running-hooks-manually","title":"Running Hooks Manually","text":"<p>Test hooks without committing:</p> <pre><code># Run all hooks on staged files\npre-commit run\n\n# Run all hooks on all files\npre-commit run --all-files\n\n# Run specific hook\npre-commit run mkdocs-build\n\n# Skip hooks for a commit (use sparingly!)\ngit commit --no-verify\n</code></pre>"},{"location":"development/pre-commit-hooks/#updating-hooks","title":"Updating Hooks","text":"<p>When <code>.pre-commit-config.yaml</code> changes, pre-commit requires it to be staged:</p> <pre><code># Pre-commit will show this error if config is modified but not staged:\n[ERROR] Your pre-commit configuration is unstaged.\n`git add .pre-commit-config.yaml` to fix this.\n\n# Solution: stage the config file\ngit add .pre-commit-config.yaml\ngit commit -m \"chore: Update pre-commit hooks\"\n</code></pre>"},{"location":"development/pre-commit-hooks/#troubleshooting","title":"Troubleshooting","text":""},{"location":"development/pre-commit-hooks/#hook-not-running","title":"Hook Not Running","text":"<p>If pre-commit hooks don't run automatically:</p> <ol> <li> <p>Check if hooks are installed:    <pre><code>ls -la .git/hooks/pre-commit\n</code></pre></p> </li> <li> <p>Reinstall hooks:    <pre><code>~/.venv-devtools/bin/pre-commit install --install-hooks\n</code></pre></p> </li> <li> <p>Verify pre-commit is in PATH:    <pre><code>which pre-commit\n# Should show: /home/esp/.venv-devtools/bin/pre-commit\n</code></pre></p> </li> </ol>"},{"location":"development/pre-commit-hooks/#mkdocs-not-found","title":"MkDocs Not Found","text":"<p>The devcontainer has MkDocs pre-installed at <code>/opt/venv/bin/mkdocs</code>. If you see \"mkdocs not found\":</p> <ol> <li> <p>Check if mkdocs is in PATH:    <pre><code>which mkdocs\n# Should show: /opt/venv/bin/mkdocs\n</code></pre></p> </li> <li> <p>Verify the venv is in PATH:    <pre><code>echo $PATH | grep /opt/venv\n</code></pre></p> </li> <li> <p>Source the profile:    <pre><code>source /etc/profile.d/venv-mkdocs.sh\n</code></pre></p> </li> </ol>"},{"location":"development/pre-commit-hooks/#skipping-hooks-not-recommended","title":"Skipping Hooks (Not Recommended)","text":"<p>In rare cases where you need to commit without running hooks:</p> <pre><code># Skip all hooks (use with caution!)\ngit commit --no-verify\n\n# Or set environment variable\nSKIP=mkdocs-build git commit -m \"WIP: Draft documentation\"\n</code></pre> <p>Warning: Skipping hooks can introduce broken documentation into the repository. Only use this for work-in-progress commits on feature branches.</p>"},{"location":"development/pre-commit-hooks/#future-enhancements","title":"Future Enhancements","text":""},{"location":"development/pre-commit-hooks/#planned-hooks","title":"Planned Hooks","text":"<p>Requirements Validation (Coming Soon): - Validate OpenFastTrack requirement format - Check requirement ID uniqueness - Verify bidirectional traceability links - Ensure all requirements have design coverage</p> <p>Design Document Validation (Coming Soon): - Validate design document structure - Check design-to-requirement traceability - Verify design-to-implementation links - Ensure code references are valid</p> <p>Code Quality (Planned): - C code formatting with <code>clang-format</code> - Static analysis with <code>cppcheck</code> - ESP-IDF specific linting - Comment and documentation completeness</p>"},{"location":"development/pre-commit-hooks/#configuration-example-future","title":"Configuration Example (Future)","text":"<pre><code>repos:\n  - repo: local\n    hooks:\n      # Documentation validation (current)\n      - id: mkdocs-build\n        name: MkDocs build (strict)\n        entry: mkdocs build --strict\n        language: system\n        files: ^(docs/.*|mkdocs\\.yml)$\n\n      # Requirements validation (planned)\n      - id: oft-requirements\n        name: OpenFastTrack requirements validation\n        entry: openfasttrace trace\n        language: system\n        files: ^docs/requirements/.*\\.md$\n\n      # Design validation (planned)\n      - id: design-traceability\n        name: Design traceability check\n        entry: python tools/validate_design.py\n        language: system\n        files: ^docs/design/.*\\.md$\n\n      # Code formatting (planned)\n      - id: clang-format\n        name: Format C code\n        entry: clang-format -i\n        language: system\n        files: \\.(c|h)$\n</code></pre>"},{"location":"development/pre-commit-hooks/#benefits","title":"Benefits","text":""},{"location":"development/pre-commit-hooks/#quality-assurance","title":"Quality Assurance","text":"<ul> <li>Prevents broken documentation from reaching the repository</li> <li>Catches errors early before they're committed</li> <li>Enforces standards automatically without code review overhead</li> <li>Documentation stays in sync with codebase changes</li> </ul>"},{"location":"development/pre-commit-hooks/#developer-experience","title":"Developer Experience","text":"<ul> <li>Fast feedback - errors caught immediately on commit</li> <li>Clear error messages - shows exactly what's wrong and where</li> <li>Smart filtering - only runs when relevant files change</li> <li>No manual steps - auto-installs and auto-runs</li> </ul>"},{"location":"development/pre-commit-hooks/#ai-coding-agent-compatibility","title":"AI Coding Agent Compatibility","text":"<ul> <li>GitHub Copilot coding agents must pass the same quality gates</li> <li>Prevents AI from committing broken docs or invalid links</li> <li>Forces iterative fixes until documentation is valid</li> <li>Maintains quality regardless of who (or what) is committing</li> </ul>"},{"location":"development/pre-commit-hooks/#technical-details","title":"Technical Details","text":""},{"location":"development/pre-commit-hooks/#file-structure","title":"File Structure","text":"<pre><code>.\n\u251c\u2500\u2500 .pre-commit-config.yaml        # Hook configuration\n\u251c\u2500\u2500 .git/hooks/pre-commit          # Installed hook script (auto-generated)\n\u251c\u2500\u2500 .devcontainer/\n\u2502   \u251c\u2500\u2500 post-start.sh             # Auto-install pre-commit on startup\n\u2502   \u2514\u2500\u2500 Dockerfile                 # MkDocs pre-installed at build time\n\u2514\u2500\u2500 ~/.venv-devtools/              # Dedicated virtualenv for pre-commit\n    \u2514\u2500\u2500 bin/pre-commit\n</code></pre>"},{"location":"development/pre-commit-hooks/#dependencies","title":"Dependencies","text":"<ul> <li>Python 3: Required for pre-commit framework</li> <li>MkDocs: Pre-installed in <code>/opt/venv/</code> (via Dockerfile)</li> <li>Pre-commit: Installed in <code>~/.venv-devtools/</code> (via post-start.sh)</li> </ul>"},{"location":"development/pre-commit-hooks/#hook-execution-flow","title":"Hook Execution Flow","text":"<pre><code>flowchart TD\n    A[Developer runs 'git commit'] --&gt; B{Pre-commit hook installed?}\n    B --&gt;|No| C[Commit succeeds without validation]\n    B --&gt;|Yes| D{Changed files match hook pattern?}\n    D --&gt;|No match| E[Hook skipped - commit succeeds]\n    D --&gt;|Match| F[Run 'mkdocs build --strict']\n    F --&gt; G{Build successful?}\n    G --&gt;|Yes| H[Commit succeeds]\n    G --&gt;|No| I[Display error message]\n    I --&gt; J[Block commit]\n    J --&gt; K[Developer fixes issues]\n    K --&gt; A</code></pre>"},{"location":"development/pre-commit-hooks/#references","title":"References","text":"<ul> <li>Pre-commit framework documentation</li> <li>MkDocs documentation</li> <li>Git hooks documentation</li> <li>OpenFastTrack project (for future requirements validation)</li> </ul> <p>Last updated: October 2025</p>"},{"location":"development/qemu-emulator/","title":"QEMU Emulator Guide","text":"<p>The ESP32 Distance Sensor project includes full QEMU emulation support, allowing you to develop and test without physical hardware. The emulator includes complete network functionality via a UART-based IP tunnel.</p>"},{"location":"development/qemu-emulator/#quick-start","title":"Quick Start","text":""},{"location":"development/qemu-emulator/#starting-qemu","title":"Starting QEMU","text":"<pre><code># From project root\n./tools/run-qemu-network.sh\n</code></pre> <p>This script automatically: - \u2705 Builds the project (incremental, fast) - \u2705 Starts the TUN network bridge - \u2705 Starts the HTTP proxy for web access - \u2705 Launches QEMU with GDB support - \u2705 Waits for debugger connection</p>"},{"location":"development/qemu-emulator/#accessing-the-web-interface","title":"Accessing the Web Interface","text":"<p>Once QEMU is running:</p> <pre><code># In your browser or terminal\ncurl http://192.168.100.2/\n</code></pre> <p>Or use the HTTP proxy: <pre><code>curl http://localhost:8080/\n</code></pre></p> <p>The web interface should be accessible at <code>http://localhost:8080</code> in your browser.</p>"},{"location":"development/qemu-emulator/#architecture-overview","title":"Architecture Overview","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    Host System (Linux)                     \u2502\n\u2502                                                            \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502\n\u2502  \u2502 Browser  \u2502\u2500\u2500\u2500\u25b6\u2502   Proxy   \u2502\u2500\u2500\u2500\u25b6\u2502   tun0 Device    \u2502    \u2502\n\u2502  \u2502  :8080   \u2502    \u2502   :8080   \u2502    \u2502  192.168.100.1   \u2502    \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502\n\u2502                                             \u2502              \u2502\n\u2502                                             \u2502              \u2502\n\u2502                                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502\n\u2502                                    \u2502   TUN Bridge     \u2502    \u2502\n\u2502                                    \u2502   (Python)       \u2502    \u2502\n\u2502                                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502\n\u2502                                             \u2502 TCP:5556     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                              \u2502\n                                              \u2502 QEMU chardev\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                       ESP32 QEMU            \u2502              \u2502\n\u2502                                             \u25bc              \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2502\n\u2502  \u2502    Web     \u2502    \u2502   lwIP   \u2502    \u2502    UART1     \u2502       \u2502\n\u2502  \u2502   Server   \u2502\u25c4\u2500\u2500\u25ba\u2502  Stack   \u2502\u25c4\u2500\u2500\u25ba\u2502   Driver     \u2502       \u2502\n\u2502  \u2502   :80      \u2502    \u2502 192.168. \u2502    \u2502              \u2502       \u2502\n\u2502  \u2502            \u2502    \u2502 100.2/24 \u2502    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                           \u2502\n\u2502                                                            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"development/qemu-emulator/#network-configuration","title":"Network Configuration","text":""},{"location":"development/qemu-emulator/#ip-addresses","title":"IP Addresses","text":"Component IP Address Description Host TUN device 192.168.100.1/24 Gateway for emulated ESP32 ESP32 QEMU 192.168.100.2/24 Emulated device IP"},{"location":"development/qemu-emulator/#ports","title":"Ports","text":"Port Protocol Purpose 5555 TCP QEMU UART0 (console/monitor) 5556 TCP QEMU UART1 (IP tunnel) 8080 HTTP Proxy to ESP32 web server 3333 TCP GDB debug server"},{"location":"development/qemu-emulator/#how-it-works","title":"How It Works","text":""},{"location":"development/qemu-emulator/#1-uart-based-ip-tunnel","title":"1. UART-Based IP Tunnel","text":"<p>The emulator uses UART1 as a network interface:</p> <ol> <li>Ethernet Frame Encapsulation: IP packets are wrapped in Ethernet frames</li> <li>Length Prefix Protocol: Each frame is prefixed with 2-byte length (big-endian)</li> <li>UART Transport: Frames are transmitted over UART1 (115200 baud)</li> <li>TUN Bridge: Python script bridges UART \u2194 TUN device</li> </ol>"},{"location":"development/qemu-emulator/#2-network-stack","title":"2. Network Stack","text":"<pre><code>Application (Web Server)\n         \u2193\n    lwIP TCP/IP Stack\n         \u2193\nCustom UART Network Interface (netif_uart_tunnel_sim.c)\n         \u2193\n      UART1 Driver\n         \u2193\n   QEMU Serial Device\n         \u2193\n    TUN Bridge (Python)\n         \u2193\n      Linux TUN Device\n         \u2193\n     Host Network Stack\n</code></pre>"},{"location":"development/qemu-emulator/#3-frame-format","title":"3. Frame Format","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Frame Length  \u2502         Ethernet Frame                   \u2502\n\u2502   (2 bytes)   \u2502    (14-byte header + IP packet)          \u2502\n\u2502  Big Endian   \u2502                                          \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  [HI] [LO]    \u2502 [DST_MAC:6][SRC_MAC:6][TYPE:2][IP DATA]  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Example: ICMP Echo Request (98 bytes) <pre><code>Length: 0x00 0x62 (98 bytes)\nEthernet:\n  Dst MAC: 02:00:00:00:00:02 (ESP32)\n  Src MAC: 02:00:00:00:00:01 (Host)\n  Type:    0x08 0x00 (IPv4)\nIP Packet:\n  Src IP: 192.168.100.1\n  Dst IP: 192.168.100.2\n  Protocol: ICMP\n</code></pre></p>"},{"location":"development/qemu-emulator/#testing-network-connectivity","title":"Testing Network Connectivity","text":""},{"location":"development/qemu-emulator/#ping-test","title":"Ping Test","text":"<pre><code># Ping the emulated ESP32\nping -c 4 192.168.100.2\n</code></pre> <p>Expected output: <pre><code>64 bytes from 192.168.100.2: icmp_seq=1 ttl=64 time=5.2 ms\n64 bytes from 192.168.100.2: icmp_seq=2 ttl=64 time=3.8 ms\n</code></pre></p>"},{"location":"development/qemu-emulator/#http-test","title":"HTTP Test","text":"<pre><code># Direct access\ncurl http://192.168.100.2/\n\n# Via proxy\ncurl http://localhost:8080/\n</code></pre>"},{"location":"development/qemu-emulator/#monitor-network-traffic","title":"Monitor Network Traffic","text":"<pre><code># Watch TUN device traffic\nsudo tcpdump -i tun0 -n\n\n# Monitor UART traffic in QEMU logs\n# Look for \"RX:\" and \"TX:\" messages\n</code></pre>"},{"location":"development/qemu-emulator/#troubleshooting","title":"Troubleshooting","text":""},{"location":"development/qemu-emulator/#qemu-wont-start","title":"QEMU Won't Start","text":"<p>Problem: Script fails to start QEMU</p> <p>Solutions: <pre><code># Check if QEMU is already running\nps aux | grep qemu\n\n# Kill existing QEMU processes\n./tools/stop_qemu.sh\n\n# Rebuild and try again\nidf.py build\n./tools/run-qemu-network.sh\n</code></pre></p>"},{"location":"development/qemu-emulator/#network-not-working","title":"Network Not Working","text":"<p>Problem: Can't ping or access web server</p> <p>Checks: <pre><code># 1. Verify TUN device exists\nip addr show tun0\n\n# 2. Check TUN bridge is running\nps aux | grep serial_tun_bridge\n\n# 3. Check HTTP proxy is running\nps aux | grep http_proxy\n\n# 4. Restart network stack\n./tools/stop_qemu.sh\n./tools/run-qemu-network.sh\n</code></pre></p>"},{"location":"development/qemu-emulator/#no-uart-output","title":"No UART Output","text":"<p>Problem: No logs from QEMU</p> <p>Solution: <pre><code># Connect to UART0 console\nnc localhost 5555\n\n# Or use dedicated viewer\n./tools/view_uart1.sh\n</code></pre></p>"},{"location":"development/qemu-emulator/#port-already-in-use","title":"Port Already in Use","text":"<p>Problem: Error about port 5555 or 5556 already in use</p> <p>Solution: <pre><code># Find process using the port\nlsof -i :5555\nlsof -i :5556\n\n# Kill the process\nkill &lt;PID&gt;\n\n# Or use the stop script\n./tools/stop_qemu.sh\n</code></pre></p>"},{"location":"development/qemu-emulator/#advanced-usage","title":"Advanced Usage","text":""},{"location":"development/qemu-emulator/#debugging-network-issues","title":"Debugging Network Issues","text":"<p>Enable verbose logging in <code>netif_uart_tunnel_sim.c</code>:</p> <pre><code>// Temporarily change log level\n#define LOG_LOCAL_LEVEL ESP_LOG_VERBOSE\n</code></pre> <p>Then rebuild and watch detailed packet flow: <pre><code>idf.py build\n./tools/run-qemu-network.sh\n</code></pre></p>"},{"location":"development/qemu-emulator/#custom-network-configuration","title":"Custom Network Configuration","text":"<p>Edit <code>main/components/netif_uart_tunnel/netif_uart_tunnel_sim.c</code>:</p> <pre><code>// Change IP address\n#define ESP32_IP \"192.168.100.2\"\n#define GATEWAY_IP \"192.168.100.1\"\n#define NETMASK \"255.255.255.0\"\n</code></pre>"},{"location":"development/qemu-emulator/#running-without-gdb","title":"Running Without GDB","text":"<p>To start QEMU without waiting for debugger:</p> <pre><code># Edit run-qemu-network.sh and remove the -d flag\nidf.py qemu \\\n    --qemu-extra-args=\"-serial tcp::5555,server,nowait -serial tcp::5556,server,nowait -nographic\"\n</code></pre>"},{"location":"development/qemu-emulator/#technical-deep-dive","title":"Technical Deep Dive","text":"<p>For detailed information about the network implementation, packet flow, and lwIP integration, see Network Internals.</p>"},{"location":"development/qemu-emulator/#known-limitations","title":"Known Limitations","text":"<ul> <li>UART Speed: Limited to 115200 baud (adequate for HTTP, slow for large transfers)</li> <li>No WiFi Simulation: Uses direct IP connectivity instead of WiFi AP/STA modes</li> <li>Browser Caching: Web interface may cache old versions (use Ctrl+F5 to refresh)</li> <li>QEMU Performance: Slower than real hardware, but sufficient for testing</li> </ul>"},{"location":"development/qemu-emulator/#next-steps","title":"Next Steps","text":"<ul> <li>Debugging Guide - Set breakpoints and step through code</li> <li>Network Internals - Understand packet flow in detail</li> <li>Dev Container Setup - Configure your development environment</li> </ul>"},{"location":"development/qemu-network-internals/","title":"QEMU Network Internals - Deep Dive","text":"<p>This document provides detailed technical information about the UART-based IP tunnel implementation for ESP32 QEMU emulation.</p>"},{"location":"development/qemu-network-internals/#architecture-overview","title":"Architecture Overview","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                        HOST (Linux)                             \u2502\n\u2502                                                                 \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u2502\n\u2502  \u2502  ping    \u2502\u2500\u2500\u2500\u2500\u2500\u25b6\u2502  tun0       \u2502\u25c0\u2500\u2500\u2500\u2500\u25b6\u2502  TUN Bridge     \u2502     \u2502 \n\u2502  \u2502  curl    \u2502      \u2502 192.168.    \u2502      \u2502  (Python)       \u2502     \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2502 100.1/24    \u2502      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2502\n\u2502                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518               \u2502              \u2502\n\u2502                                                  \u2502 TCP:5556     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                                   \u2502\n                                                   \u2502 QEMU chardev\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                     ESP32 QEMU                   \u2502              \u2502\n\u2502                                                  \u25bc              \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u2502\n\u2502  \u2502  Web       \u2502      \u2502   lwIP       \u2502      \u2502   UART1     \u2502      \u2502\n\u2502  \u2502  Server    \u2502\u25c0\u2500\u2500\u2500\u25b6\u2502   Stack      \u2502\u25c0\u2500\u2500\u2500\u25b6\u2502   Driver    \u2502      \u2502 \n\u2502  \u2502  HTTP      \u2502      \u2502 192.168.     \u2502      \u2502             \u2502      \u2502\n\u2502  \u2502            \u2502      \u2502 100.2/24     \u2502      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                           \u2502\n\u2502                                                                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"development/qemu-network-internals/#frame-format-over-uart","title":"Frame Format (Over UART)","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Frame Length  \u2502           Ethernet Frame                   \u2502\n\u2502   (2 bytes)   \u2502         (14-byte header + IP)              \u2502\n\u2502  Big Endian   \u2502                                            \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  [HI] [LO]    \u2502 [DST_MAC:6][SRC_MAC:6][TYPE:2][IP PACKET]  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nExample ICMP Echo Request (98 bytes total):\n  Length: 0x00 0x62 (98 bytes)\n  Ethernet:\n    Dst MAC: 02:00:00:00:00:02 (ESP32)\n    Src MAC: 02:00:00:00:00:01 (Host)\n    Type:    0x08 0x00 (IPv4)\n  IP:\n    Version/IHL: 0x45 (IPv4, 20 byte header)\n    Protocol: 0x01 (ICMP)\n    Src IP: 192.168.100.1 (0xC0 0xA8 0x64 0x01)\n    Dst IP: 192.168.100.2 (0xC0 0xA8 0x64 0x02)\n  ICMP:\n    Type: 0x08 (Echo Request)\n    Code: 0x00\n</code></pre>"},{"location":"development/qemu-network-internals/#initialization-sequence","title":"Initialization Sequence","text":""},{"location":"development/qemu-network-internals/#1-system-startup","title":"1. System Startup","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                  ESP32 QEMU Boot                             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                           \u2502\n                           \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Initialize Network Stack (wifi_manager_sim.c)               \u2502\n\u2502     - esp_netif_init()                                       \u2502\n\u2502     - esp_event_loop_create_default()                        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                           \u2502\n                           \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Initialize UART Tunnel Driver (netif_uart_tunnel_sim.c)    \u2502\n\u2502                                                              \u2502\n\u2502  a) Hardware Setup:                                          \u2502\n\u2502     - Configure UART1: 115200 baud, GPIO 17/16              \u2502\n\u2502     - uart_driver_install() with 2KB RX/TX buffers          \u2502\n\u2502                                                              \u2502\n\u2502  b) Create esp_netif:                                        \u2502\n\u2502     - ESP_NETIF_INHERENT_DEFAULT_ETH() config               \u2502\n\u2502     - esp_netif_new()                                        \u2502\n\u2502                                                              \u2502\n\u2502  c) Configure Static IP:                                     \u2502\n\u2502     - IP: 192.168.100.2                                      \u2502\n\u2502     - Gateway: 192.168.100.1                                 \u2502\n\u2502     - Netmask: 255.255.255.0                                 \u2502\n\u2502                                                              \u2502\n\u2502  d) Direct lwIP Integration:                                 \u2502\n\u2502     - Get lwIP netif handle                                  \u2502\n\u2502     - Set MAC: 02:00:00:00:00:02                             \u2502\n\u2502     - Set flags: ETHARP | ETHERNET | BROADCAST               \u2502\n\u2502     - Register linkoutput callback                           \u2502\n\u2502     - Set as default netif                                   \u2502\n\u2502     - Add static ARP entry for gateway                       \u2502\n\u2502                                                              \u2502\n\u2502  e) Start RX Task:                                           \u2502\n\u2502     - xTaskCreate(uart_rx_task, priority=5)                  \u2502\n\u2502                                                              \u2502\n\u2502  f) Bring Interface Up:                                      \u2502\n\u2502     - netif_set_up()                                         \u2502\n\u2502     - netif_set_link_up()                                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                           \u2502\n                           \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Start TUN Bridge on Host                                    \u2502\n\u2502     - Create tun0 device                                     \u2502\n\u2502     - Configure IP: 192.168.100.1/24                         \u2502\n\u2502     - Connect to TCP:5556 (QEMU UART1)                       \u2502\n\u2502     - Start bidirectional forwarding                         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                           \u2502\n                           \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Network Ready                                               \u2502\n\u2502     - Interface UP, LINK_UP                                  \u2502\n\u2502     - Routes configured                                      \u2502\n\u2502     - ARP cache populated                                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"development/qemu-network-internals/#packet-flow-ping-example","title":"Packet Flow - PING Example","text":""},{"location":"development/qemu-network-internals/#inbound-path-host-esp32","title":"Inbound Path (Host \u2192 ESP32)","text":"<pre><code>1. Host executes: ping 192.168.100.2\n   \u2514\u2500\u25b6 Kernel creates ICMP Echo Request\n       \u2514\u2500\u25b6 Routes to tun0 (192.168.100.0/24 network)\n\n2. TUN Bridge (serial_tun_bridge.py)\n   \u251c\u2500\u25b6 read() from tun0 gets raw IP packet\n   \u251c\u2500\u25b6 Prepends Ethernet header:\n   \u2502   - Dst MAC: 02:00:00:00:00:02 (ESP32)\n   \u2502   - Src MAC: 02:00:00:00:00:01 (Host)\n   \u2502   - EtherType: 0x0800 (IPv4)\n   \u251c\u2500\u25b6 Prepends 2-byte length (big-endian)\n   \u2514\u2500\u25b6 write() to TCP socket (QEMU UART1)\n\n3. QEMU Serial Device\n   \u2514\u2500\u25b6 Forwards bytes to emulated UART1 RX FIFO\n\n4. ESP32 uart_rx_task (netif_uart_tunnel_sim.c)\n   \u251c\u2500\u25b6 uart_read_bytes() reads 2-byte length header\n   \u251c\u2500\u25b6 Validates: 0 &lt; len &lt;= MAX_FRAME_SIZE\n   \u251c\u2500\u25b6 uart_read_bytes() reads complete Ethernet frame\n   \u251c\u2500\u25b6 Allocates lwIP pbuf\n   \u251c\u2500\u25b6 Copies frame to pbuf\n   \u2514\u2500\u25b6 Calls netif-&gt;input(pbuf, netif)\n       \u2514\u2500\u25b6 This is ethernet_input() [KEY: Direct lwIP call]\n\n5. lwIP ethernet_input()\n   \u251c\u2500\u25b6 Parses Ethernet header\n   \u251c\u2500\u25b6 Checks destination MAC (matches!)\n   \u251c\u2500\u25b6 Checks EtherType (0x0800 = IPv4)\n   \u251c\u2500\u25b6 Strips Ethernet header (14 bytes)\n   \u2514\u2500\u25b6 Calls ip4_input() with IP packet\n\n6. lwIP ip4_input()\n   \u251c\u2500\u25b6 Validates IP header checksum\n   \u251c\u2500\u25b6 Checks destination IP (192.168.100.2 - matches!)\n   \u251c\u2500\u25b6 Identifies protocol (ICMP = 1)\n   \u2514\u2500\u25b6 Calls icmp_input()\n\n7. lwIP icmp_input()\n   \u251c\u2500\u25b6 Validates ICMP checksum\n   \u251c\u2500\u25b6 Identifies Echo Request (type=8)\n   \u251c\u2500\u25b6 Creates Echo Reply (type=0)\n   \u251c\u2500\u25b6 Swaps src/dst IPs\n   \u2514\u2500\u25b6 Calls ip4_output_if() to send response\n</code></pre>"},{"location":"development/qemu-network-internals/#outbound-path-esp32-host","title":"Outbound Path (ESP32 \u2192 Host)","text":"<pre><code>8. lwIP ip4_output_if()\n   \u251c\u2500\u25b6 Looks up route for 192.168.100.1\n   \u251c\u2500\u25b6 Finds default gateway on tun_netif\n   \u251c\u2500\u25b6 Checks ARP cache for 192.168.100.1\n   \u251c\u2500\u25b6 Finds static entry: 02:00:00:00:00:01\n   \u251c\u2500\u25b6 Prepends Ethernet header\n   \u2514\u2500\u25b6 Calls netif-&gt;linkoutput(netif, pbuf)\n\n9. uart_linkoutput() (netif_uart_tunnel_sim.c)\n   \u251c\u2500\u25b6 Calculates total length from pbuf chain\n   \u251c\u2500\u25b6 Allocates temporary buffer\n   \u251c\u2500\u25b6 Copies all pbuf segments to contiguous buffer\n   \u251c\u2500\u25b6 Prepends 2-byte length header (big-endian)\n   \u251c\u2500\u25b6 uart_write_bytes() - length header\n   \u251c\u2500\u25b6 uart_write_bytes() - Ethernet frame\n   \u2514\u2500\u25b6 Frees temporary buffer\n\n10. ESP32 UART1 \u2192 QEMU\n    \u2514\u2500\u25b6 Bytes sent to TCP socket\n\n11. TUN Bridge (serial_tun_bridge.py)\n    \u251c\u2500\u25b6 read() from TCP gets length header\n    \u251c\u2500\u25b6 read() gets complete Ethernet frame\n    \u251c\u2500\u25b6 Strips Ethernet header (14 bytes)\n    \u251c\u2500\u25b6 Extracts IP packet\n    \u2514\u2500\u25b6 write() to tun0\n\n12. Host Kernel\n    \u251c\u2500\u25b6 Receives ICMP Echo Reply from tun0\n    \u251c\u2500\u25b6 Matches with pending ping request\n    \u2514\u2500\u25b6 Displays: \"64 bytes from 192.168.100.2: icmp_seq=1 ttl=64 time=X ms\"\n</code></pre>"},{"location":"development/qemu-network-internals/#key-implementation-details","title":"Key Implementation Details","text":""},{"location":"development/qemu-network-internals/#direct-lwip-integration","title":"Direct lwIP Integration","text":"<p>Unlike typical ESP-IDF network interfaces that use the full <code>esp_netif</code> abstraction, this implementation integrates directly with lwIP for better control:</p> <pre><code>// Get direct access to lwIP netif structure\nstruct netif* lwip_netif = esp_netif_get_netif_impl(esp_netif_handle);\n\n// Set input function directly (bypasses esp_netif RX path)\nlwip_netif-&gt;input = ethernet_input;\n\n// Set output function (called by lwIP for TX)\nlwip_netif-&gt;linkoutput = uart_linkoutput;\n</code></pre> <p>Why Direct Integration? - Simpler packet flow (fewer abstraction layers) - Direct control over Ethernet frame handling - Easier debugging (fewer indirect function calls) - Better performance (reduced function call overhead)</p>"},{"location":"development/qemu-network-internals/#static-arp-entry","title":"Static ARP Entry","text":"<p>To avoid ARP broadcasts (which don't work well over UART):</p> <pre><code>ip4_addr_t gateway_ip;\nIP4_ADDR(&amp;gateway_ip, 192, 168, 100, 1);\n\nstruct eth_addr gateway_mac = {{0x02, 0x00, 0x00, 0x00, 0x00, 0x01}};\n\n// Add permanent ARP entry\netharp_add_static_entry(&amp;gateway_ip, &amp;gateway_mac);\n</code></pre> <p>This tells lwIP: \"192.168.100.1 always has MAC 02:00:00:00:00:01\" without needing ARP requests.</p>"},{"location":"development/qemu-network-internals/#pbuf-management","title":"pbuf Management","text":"<p>lwIP uses packet buffers (pbufs) for zero-copy networking:</p> <pre><code>// RX: Allocate pbuf and copy UART data\nstruct pbuf* p = pbuf_alloc(PBUF_RAW, frame_len, PBUF_POOL);\nmemcpy(p-&gt;payload, uart_buffer, frame_len);\nnetif-&gt;input(p, netif);  // lwIP takes ownership\n\n// TX: pbuf may be chained (fragmented)\nu16_t total_len = 0;\nfor (struct pbuf* q = p; q != NULL; q = q-&gt;next) {\n    memcpy(buffer + total_len, q-&gt;payload, q-&gt;len);\n    total_len += q-&gt;len;\n}\n</code></pre>"},{"location":"development/qemu-network-internals/#error-handling","title":"Error Handling","text":"<p>The implementation includes comprehensive error handling:</p> <pre><code>// Frame length validation\nif (frame_len == 0 || frame_len &gt; MAX_FRAME_SIZE) {\n    ESP_LOGE(TAG, \"Invalid frame length: %d\", frame_len);\n    continue;  // Skip bad frame, keep running\n}\n\n// pbuf allocation failure\nstruct pbuf* p = pbuf_alloc(...);\nif (p == NULL) {\n    ESP_LOGE(TAG, \"Failed to allocate pbuf\");\n    free(frame_buffer);\n    continue;  // Skip this packet\n}\n\n// UART read timeout (handled by uart_read_bytes)\nint len = uart_read_bytes(UART_NUM, buffer, size, pdMS_TO_TICKS(1000));\nif (len &lt;= 0) {\n    ESP_LOGW(TAG, \"UART read timeout or error\");\n    continue;\n}\n</code></pre>"},{"location":"development/qemu-network-internals/#performance-characteristics","title":"Performance Characteristics","text":""},{"location":"development/qemu-network-internals/#throughput","title":"Throughput","text":"<ul> <li>UART Speed: 115200 baud = ~11.5 KB/s theoretical max</li> <li>Actual HTTP: ~8-10 KB/s (due to protocol overhead)</li> <li>Ping Latency: 3-8ms typical</li> </ul>"},{"location":"development/qemu-network-internals/#bottlenecks","title":"Bottlenecks","text":"<ol> <li>UART Baud Rate: Limited to 115200 (QEMU constraint)</li> <li>Frame Overhead: 16 bytes per packet (2-byte length + 14-byte Ethernet header)</li> <li>Context Switching: FreeRTOS task scheduling adds latency</li> </ol>"},{"location":"development/qemu-network-internals/#optimization-opportunities","title":"Optimization Opportunities","text":"<ul> <li>Increase UART buffer sizes for burst traffic</li> <li>Use DMA for UART transfers (if QEMU supports it)</li> <li>Implement zero-copy where possible</li> <li>Batch small packets together</li> </ul>"},{"location":"development/qemu-network-internals/#debugging-tips","title":"Debugging Tips","text":""},{"location":"development/qemu-network-internals/#enable-verbose-logging","title":"Enable Verbose Logging","text":"<p>In <code>netif_uart_tunnel_sim.c</code>: <pre><code>#define LOG_LOCAL_LEVEL ESP_LOG_DEBUG\n</code></pre></p> <p>This will show every packet RX/TX: <pre><code>D (12345) uart_tunnel: RX: Got 98 bytes\nD (12345) uart_tunnel: RX: Ethernet dst=02:00:00:00:00:02 src=02:00:00:00:00:01 type=0x0800\nD (12345) uart_tunnel: TX: Sending 98 bytes\n</code></pre></p>"},{"location":"development/qemu-network-internals/#monitor-tun-device","title":"Monitor TUN Device","text":"<pre><code># Watch all traffic on tun0\nsudo tcpdump -i tun0 -vvv -X\n\n# Filter for specific traffic\nsudo tcpdump -i tun0 icmp\nsudo tcpdump -i tun0 tcp port 80\n</code></pre>"},{"location":"development/qemu-network-internals/#check-lwip-statistics","title":"Check lwIP Statistics","text":"<p>Add to your code: <pre><code>#include \"lwip/stats.h\"\n\nvoid print_lwip_stats(void) {\n    ESP_LOGI(TAG, \"lwIP RX packets: %d\", lwip_stats.link.recv);\n    ESP_LOGI(TAG, \"lwIP TX packets: %d\", lwip_stats.link.xmit);\n    ESP_LOGI(TAG, \"lwIP errors: %d\", lwip_stats.link.err);\n}\n</code></pre></p>"},{"location":"development/qemu-network-internals/#uart-traffic-analysis","title":"UART Traffic Analysis","text":"<pre><code># Connect to UART1 directly to see raw bytes\nnc localhost 5556 | hexdump -C\n</code></pre>"},{"location":"development/qemu-network-internals/#comparison-with-real-hardware","title":"Comparison with Real Hardware","text":"Feature Real ESP32 QEMU Emulation Network Interface WiFi (802.11) UART tunnel Speed ~1-10 Mbps ~11 KB/s AP Mode Yes Simulated via IP STA Mode Yes Direct IP connectivity DNS Full support Via host system DHCP Supported Static IP only Security WPA2/WPA3 No encryption (local)"},{"location":"development/qemu-network-internals/#known-issues-and-workarounds","title":"Known Issues and Workarounds","text":""},{"location":"development/qemu-network-internals/#issue-uart-buffer-overflow","title":"Issue: UART Buffer Overflow","text":"<p>Symptom: Packets dropped during high traffic Cause: UART RX buffer (2KB) fills faster than task can read Workaround: Increase buffer size in <code>uart_driver_install()</code></p>"},{"location":"development/qemu-network-internals/#issue-tcp-connections-timeout","title":"Issue: TCP Connections Timeout","text":"<p>Symptom: HTTP connections hang Cause: lwIP TCP retransmission timeout too aggressive Workaround: Tune lwIP TCP timers in <code>lwipopts.h</code></p>"},{"location":"development/qemu-network-internals/#issue-arp-not-working","title":"Issue: ARP Not Working","text":"<p>Symptom: Can't reach hosts beyond gateway Cause: Static ARP only configured for gateway Solution: Add more static ARP entries or enable full ARP</p>"},{"location":"development/qemu-network-internals/#further-reading","title":"Further Reading","text":"<ul> <li>lwIP Documentation</li> <li>ESP-IDF Network API Guide</li> <li>QEMU Serial Device Documentation</li> </ul>"},{"location":"development/qemu-network-internals/#related-documentation","title":"Related Documentation","text":"<ul> <li>QEMU Emulator Guide - User-facing guide for running QEMU</li> <li>Debugging Guide - Using GDB with QEMU</li> <li>Development Setup - Setting up your environment</li> </ul> <p>Last Updated: October 5, 2025 Status: Network fully functional with ping, HTTP, and TCP support</p>"},{"location":"legal/datenschutz/","title":"Datenschutzerkl\u00e4rung","text":""},{"location":"legal/datenschutz/#verantwortliche-stelle","title":"Verantwortliche Stelle","text":"<p>Georg Doll Lohweg 10 58375 Neufahrn Deutschland  </p> <p>E-Mail: georg_doll@freenet.de</p>"},{"location":"legal/datenschutz/#hosting-und-datenverarbeitung","title":"Hosting und Datenverarbeitung","text":""},{"location":"legal/datenschutz/#github-pages","title":"GitHub Pages","text":"<p>Diese Website wird auf GitHub Pages gehostet, einem Service der GitHub, Inc., 88 Colin P Kelly Jr St, San Francisco, CA 94107, USA.</p> <p>Datenverarbeitung durch GitHub:</p> <p>GitHub kann beim Besuch dieser Website automatisch technische Informationen erfassen, einschlie\u00dflich: - IP-Adresse - Browser-Typ und -Version - Betriebssystem - Referrer-URL - Zugriffsdatum und -uhrzeit - \u00dcbertragene Datenmenge</p> <p>Wichtiger Hinweis zur Datenkontrolle:</p> <p>Als Websitebetreiber haben wir keinen direkten Zugriff auf die von GitHub Pages erfassten Server-Log-Daten. GitHub fungiert als eigenst\u00e4ndiger Datenverarbeiter f\u00fcr diese technischen Zugriffsdaten.</p> <p>Ihre Rechte bez\u00fcglich GitHub-Daten:</p> <p>F\u00fcr Auskunfts-, Berichtigungs-, L\u00f6schungs- oder andere Anfragen bez\u00fcglich der von GitHub Pages erfassten Daten wenden Sie sich bitte direkt an:</p> <ul> <li>GitHub Support: https://support.github.com/</li> <li>GitHub Privacy Statement: https://docs.github.com/en/site-policy/privacy-policies/github-privacy-statement</li> <li>GitHub Data Protection Officer: privacy@github.com</li> </ul> <p>Die Nutzung von GitHub Pages erfolgt auf Grundlage unserer berechtigten Interessen im Sinne des Art. 6 Abs. 1 lit. f DSGVO an einer kosteneffizienten und sicheren Bereitstellung unserer Website.</p>"},{"location":"legal/datenschutz/#keine-eigene-datenerhebung","title":"Keine eigene Datenerhebung","text":"<p>Wichtiger Hinweis: Diese Website erhebt und speichert keine personenbezogenen Daten der Besucher:</p> <ul> <li>\u2705 Keine Analytics-Tools oder Tracking</li> <li>\u2705 Keine Cookies (au\u00dfer technisch notwendige)</li> <li>\u2705 Keine Kontaktformulare</li> <li>\u2705 Keine Newsletter oder Anmeldungen</li> <li>\u2705 Keine Nutzerprofile oder Accounts</li> </ul>"},{"location":"legal/datenschutz/#kontakt-und-kommunikation","title":"Kontakt und Kommunikation","text":"<p>F\u00fcr Fragen, Anregungen oder Support zu diesem Open-Source-Projekt nutzen Sie bitte die Kommunikationskan\u00e4le auf GitHub:</p> <ul> <li>GitHub Repository: https://github.com/enthali/esp32-distance</li> <li>Issues f\u00fcr Bugs und Feature-Requests</li> <li>Discussions f\u00fcr allgemeine Fragen</li> </ul> <p>Bei der Nutzung von GitHub gelten die Datenschutzbestimmungen von GitHub.</p>"},{"location":"legal/datenschutz/#ihre-rechte","title":"Ihre Rechte","text":"<p>Grunds\u00e4tzlich haben Sie folgende Rechte nach der DSGVO:</p> <ul> <li>Recht auf Auskunft (Art. 15 DSGVO)</li> <li>Recht auf Berichtigung (Art. 16 DSGVO)</li> <li>Recht auf L\u00f6schung (Art. 17 DSGVO)</li> <li>Recht auf Einschr\u00e4nkung der Verarbeitung (Art. 18 DSGVO)</li> <li>Recht auf Daten\u00fcbertragbarkeit (Art. 20 DSGVO)</li> <li>Recht auf Widerspruch (Art. 21 DSGVO)</li> <li>Recht auf Beschwerde bei einer Aufsichtsbeh\u00f6rde (Art. 77 DSGVO)</li> </ul> <p>Da wir keine personenbezogenen Daten erheben, beziehen sich diese Rechte in Ihrem Fall ausschlie\u00dflich auf die von GitHub erfassten Daten. Wenden Sie sich hierf\u00fcr direkt an GitHub (siehe oben).</p> <p>Diese Datenschutzerkl\u00e4rung wurde erstellt am 25. September 2025.</p>"},{"location":"legal/impressum/","title":"Impressum","text":""},{"location":"legal/impressum/#angaben-gema-5-tmg","title":"Angaben gem\u00e4\u00df \u00a7 5 TMG","text":"<p>Verantwortlich f\u00fcr den Inhalt dieser Website:</p> <p>Georg Doll Lohweg 10 58375 Neufahrn Deutschland  </p> <p>Kontakt: E-Mail: georg_doll@freenet.de</p>"},{"location":"legal/impressum/#haftungsausschluss","title":"Haftungsausschluss","text":""},{"location":"legal/impressum/#haftung-fur-inhalte","title":"Haftung f\u00fcr Inhalte","text":"<p>Die Inhalte dieser Website wurden mit gr\u00f6\u00dfter Sorgfalt erstellt. F\u00fcr die Richtigkeit, Vollst\u00e4ndigkeit und Aktualit\u00e4t der Inhalte kann jedoch keine Gew\u00e4hr \u00fcbernommen werden. Als Diensteanbieter bin ich gem\u00e4\u00df \u00a7 7 Abs.1 TMG f\u00fcr eigene Inhalte auf diesen Seiten nach den allgemeinen Gesetzen verantwortlich. Nach \u00a7\u00a7 8 bis 10 TMG bin ich als Diensteanbieter jedoch nicht unter der Verpflichtung, \u00fcbermittelte oder gespeicherte fremde Informationen zu \u00fcberwachen oder nach Umst\u00e4nden zu forschen, die auf eine rechtswidrige T\u00e4tigkeit hinweisen.</p>"},{"location":"legal/impressum/#haftung-fur-links","title":"Haftung f\u00fcr Links","text":"<p>Diese Website enth\u00e4lt Links zu externen Webseiten Dritter, auf deren Inhalte ich keinen Einfluss habe. Deshalb kann ich f\u00fcr diese fremden Inhalte auch keine Gew\u00e4hr \u00fcbernommen werden. F\u00fcr die Inhalte der verlinkten Seiten ist stets der jeweilige Anbieter oder Betreiber der Seiten verantwortlich. Die verlinkten Seiten wurden zum Zeitpunkt der Verlinkung auf m\u00f6gliche Rechtsverst\u00f6\u00dfe \u00fcberpr\u00fcft. Rechtswidrige Inhalte waren zum Zeitpunkt der Verlinkung nicht erkennbar.</p>"},{"location":"legal/impressum/#urheberrecht","title":"Urheberrecht","text":"<p>Die durch den Seitenbetreiber erstellten Inhalte und Werke auf diesen Seiten unterliegen dem deutschen Urheberrecht. Die Vervielf\u00e4ltigung, Bearbeitung, Verbreitung und jede Art der Verwertung au\u00dferhalb der Grenzen des Urheberrechtes bed\u00fcrfen der schriftlichen Zustimmung des jeweiligen Autors bzw. Erstellers. Downloads und Kopien dieser Seite sind nur f\u00fcr den privaten, nicht kommerziellen Gebrauch gestattet.</p>"},{"location":"legal/impressum/#open-source-projekt","title":"Open Source Projekt","text":"<p>Diese Website dokumentiert ein Open-Source-Projekt. Der Quellcode und die Dokumentation stehen unter der im Repository angegebenen Lizenz zur Verf\u00fcgung.</p> <p>Letzte Aktualisierung: {{date.today()}}, 2025</p>"},{"location":"planning/Features-intended/","title":"ESP32 Distance Project - Feature Intentions","text":"<p>This document contains unnumbered feature intentions that may or may not be implemented. These are flexible ideas that can be reordered, modified, or moved to the planned roadmap as priorities become clear.</p>"},{"location":"planning/Features-intended/#workshop-15h-github-codespaces-copilot-demo-currently-in-development","title":"Workshop (1.5h): GitHub Codespaces &amp; Copilot Demo \ud83d\udee0\ufe0f (currently in development)","text":"<ul> <li>Introduction &amp; Setup: Quick overview of the ESP32 Distance Project and Codespaces environment.</li> <li>Codespaces Walkthrough: Launching, configuring, and navigating a Codespace for embedded development. Compiling for emulation and target device</li> <li>Copilot in Action: Live coding session\u2014using Copilot to scaffold ESP32 components and documentation.</li> <li>Collaborative Coding: Pair programming and code review using Codespaces and Copilot suggestions.</li> <li>Q&amp;A and Best Practices: Discussing workflow tips, troubleshooting, and integrating Copilot into daily development.</li> </ul>"},{"location":"planning/Features-intended/#https-security-implementation-on-hold","title":"HTTPS Security Implementation \ud83d\udcad on Hold","text":"<ul> <li>\ud83d\udcad HTTPS Server: Replace HTTP with encrypted HTTPS using ESP32 SSL/TLS support</li> <li>\ud83d\udcad Self-Signed Certificates: Generate and embed certificates for local IoT device use</li> <li>\ud83d\udcad Certificate Generation: Build-time certificate creation and embedding</li> <li>\ud83d\udcad Mixed Mode Support: HTTPS for production, HTTP fallback for development</li> <li>\ud83d\udcad Browser Compatibility: Handle self-signed certificate warnings appropriately</li> </ul>"},{"location":"planning/Features-intended/#ota-firmware-updates-intended","title":"OTA Firmware Updates \ud83d\udcad INTENDED","text":"<ul> <li>Over-The-Air Updates: ESP32 OTA partition scheme and update mechanism</li> <li>Version Management: Firmware versioning and rollback capability</li> <li>Update Server: Simple HTTP/HTTPS server for firmware distribution</li> <li>Security: Signed firmware updates and secure boot</li> <li>User Interface: Web-based firmware update with progress indication</li> </ul>"},{"location":"planning/Features-intended/#security-hardening-intended","title":"Security Hardening \ud83d\udcad INTENDED","text":"<ul> <li>WiFi Security: WPA3 support and strong encryption</li> <li>Web Interface Security: HTTPS, session management, CSRF protection</li> <li>Access Control: Basic authentication for configuration pages</li> <li>Network Security: Firewall rules and secure communication</li> <li>Credential Protection: Encrypted storage of sensitive data</li> </ul> <p>Each requirements document should use the <code>REQ-&lt;AREA&gt;-&lt;NUMBER&gt;</code> ID format and reference corresponding design documents for traceability.</p>"},{"location":"requirements/","title":"Documentation REquirement README (placeholder)","text":"<p>This is a placeholder to satisfy links from the repository README. </p>"},{"location":"requirements/config-requirements/","title":"Configuration Management Requirements","text":"<p>Document ID: REQ-CFG-ESP32-DISTANCE Version: 1.0 Date: 2025-07-24 Author: ESP32 Distance Project Team Parent Document: SRS-ESP32-DISTANCE  </p>"},{"location":"requirements/config-requirements/#document-purpose","title":"Document Purpose","text":"<p>This document specifies detailed requirements for the Configuration Management System, enabling centralized parameter management, runtime configuration, and persistent storage.</p>"},{"location":"requirements/config-requirements/#requirements-traceability","title":"Requirements Traceability","text":"Requirement ID Design Reference Priority REQ-CFG-1 DSN-CFG-1 Mandatory REQ-CFG-2 DSN-CFG-1 Mandatory REQ-CFG-3 DSN-CFG-2, DSN-CFG-3 Mandatory REQ-CFG-4 DSN-CFG-3 Mandatory REQ-CFG-5 DSN-CFG-4 Mandatory REQ-CFG-6 DSN-CFG-4 Mandatory REQ-CFG-7 DSN-CFG-5 Mandatory REQ-CFG-8 DSN-CFG-5 Mandatory REQ-CFG-9 DSN-CFG-5 Mandatory REQ-CFG-10 DSN-CFG-6 Mandatory REQ-CFG-11 DSN-CFG-6 Mandatory <p>Dependencies:</p> <ul> <li>REQ-CFG-2 depends on REQ-CFG-1 (cannot use centralized configuration that doesn't exist)</li> <li>REQ-CFG-3 depends on REQ-CFG-1 (runtime structure must match compile-time constants)</li> <li>REQ-CFG-4 depends on REQ-CFG-3 (cannot store configuration structure that doesn't exist)</li> <li>REQ-CFG-5 depends on REQ-CFG-4 (cannot implement NVS API without NVS storage requirement)</li> <li>REQ-CFG-6 depends on REQ-CFG-3 (cannot validate parameters without defined structure)</li> <li>REQ-CFG-7 depends on REQ-CFG-5 (web interface requires configuration API)</li> <li>REQ-CFG-8 depends on REQ-CFG-7 (save functionality requires web interface)</li> <li>REQ-CFG-9 depends on REQ-CFG-7 (reload/reset functionality requires web interface)</li> </ul> <p>Design references: Implementation-specific details such as exact storage types, NVS packed layouts, and fixed-point scaling conventions are documented in <code>docs/design/config-design.md</code> (DSN-CFG-3). Requirements intentionally remain implementation-agnostic; design document implements the requirements.</p>"},{"location":"requirements/config-requirements/#static-configuration-management","title":"Static Configuration Management","text":""},{"location":"requirements/config-requirements/#req-cfg-1-centralized-configuration-header","title":"REQ-CFG-1: Centralized Configuration Header","text":"<p>Type: Implementation Priority: Mandatory Description: The system SHALL consolidate all user-configurable parameters and system-level configuration values into a single header file <code>main/config.h</code>, using integer millimeter architecture for embedded performance optimization, while hardware-specific constants and protocol specifications remain in their respective component files.</p> <p>Rationale: Eliminates scattered magic numbers for configurable parameters throughout the codebase, improving maintainability and reducing configuration errors, while preserving component encapsulation for hardware-specific values.</p> <p>Acceptance Criteria:</p> <ul> <li>AC-1: Distance sensor parameters (min, max, measurement interval, sensor timeout, ambient temperature, smoothing factor) centralized in device configuration and persistent storage. Implementation-specific names, types, and on-device scaling conventions are defined in <code>docs/design/config-design.md</code>.</li> <li>AC-2: LED controller parameters (LED count, LED brightness) centralized in device configuration and persistent storage.</li> <li>AC-3: WiFi parameters (AP channel, AP max connections, STA retry, STA timeout) centralized in device configuration and persistent storage.</li> <li>AC-4: All parameters listed in the Configuration Categories section below SHALL be part of the centralized configuration (logical grouping). Concrete on-device representation and default macro names are specified in <code>docs/design/config-design.md</code>.</li> <li>AC-5: No additional user-configurable magic numbers remain in source files outside the centralized configuration.</li> <li>AC-6: Each configuration value documented with purpose and valid range as shown in Configuration Categories; storage/encoding details are in the design document.</li> </ul> <p>Configuration Categories:</p> <p>The following logical parameter categories are required; concrete macro names, default values, and on-device encoding are specified in <code>docs/design/config-design.md</code>.</p> <ul> <li>Distance sensor configuration: minimum/maximum measurement ranges, measurement interval, sensor timeout, ambient temperature override, smoothing factor</li> <li>LED controller configuration: LED count, LED brightness</li> <li>WiFi configuration: SSID, password, AP/channel settings, retry and timeout values</li> </ul> <p>Scope Definition:</p> <ul> <li>Included in config.h: User-configurable parameters, system behavior settings, timing intervals, network parameters</li> <li>Excluded from config.h: Hardware timing specifications (WS2812 bit timing), ESP-IDF task stack sizes, protocol constants (HTTP status codes), component-internal buffer sizes</li> </ul> <p>Note: This selective approach maintains component encapsulation while centralizing parameters that affect system behavior or user experience.</p>"},{"location":"requirements/config-requirements/#req-cfg-2-use-of-centralized-configuration","title":"REQ-CFG-2: Use of Centralized Configuration","text":"<p>Type: Implementation Priority: Mandatory Depends: REQ-CFG-1 Description: All system modules SHALL use centralized configuration values defined in REQ-CFG-1 for parameters specified in the centralized configuration header, while retaining module-specific constants for hardware and protocol specifications.</p> <p>Rationale: Ensures consistent use of configurable parameters across the system while allowing modules to maintain their own module-specific constants.</p> <p>Acceptance Criteria:</p> <ul> <li>AC-1: All modules SHALL reference config.h for parameters defined therein</li> <li>AC-2: Modules SHALL NOT define local copies of centrally-defined configuration values</li> <li>AC-3: Modules MAY retain hardware-specific constants (WS2812 timing, task stack sizes, etc.)</li> <li>AC-4: Modules MAY retain protocol-specific constants (HTTP status codes, buffer sizes, etc.)</li> <li>AC-5: Build process SHALL validate no duplicate definitions of centralized parameters</li> <li>AC-6: Each centralized parameter SHALL be used consistently across all referencing modules</li> <li>AC-7: Module documentation SHALL clearly distinguish between centralized and local parameters</li> </ul> <p>Scope Clarification:</p> <ul> <li>Centralized Parameters: All user-configurable values defined in config.h (distance ranges, LED settings, WiFi parameters)</li> <li>Local Parameters: Hardware timings, protocol constants, module-internal buffer sizes, task priorities</li> <li>Example: <code>DEFAULT_LED_COUNT</code> must come from config.h, but <code>WS2812_T0H_NS</code> remains in led_controller component</li> </ul>"},{"location":"requirements/config-requirements/#dynamic-configuration-management","title":"Dynamic Configuration Management","text":""},{"location":"requirements/config-requirements/#req-cfg-3-configuration-data-structure","title":"REQ-CFG-3: Configuration Data Structure","text":"<p>Type: Design Priority: Mandatory Depends: REQ-CFG-1 Description: The system SHALL define a runtime configuration structure containing all user-configurable parameters defined in REQ-CFG-1. The configuration structure SHALL include metadata for versioning and change tracking. Concrete storage layout, data types, alignment, and fixed-point scaling conventions are documented in <code>docs/design/config-design.md</code>.</p> <p>Rationale: Enables runtime parameter modification while maintaining consistency with compile-time defaults, using integer millimeter architecture for embedded performance optimization, and ensuring efficient storage in ESP32 NVS flash memory.</p> <p>Acceptance Criteria:</p> <ul> <li>AC-1: Configuration structure includes all runtime-modifiable parameters from REQ-CFG-1</li> <li>AC-2: Structure includes metadata for versioning and change tracking</li> <li>AC-3: Data representation chosen for NVS storage efficiency and embedded performance; concrete type selections and packing are specified in <code>docs/design/config-design.md</code></li> <li>AC-4: String fields sized appropriately for WiFi credentials and documented in the design doc</li> <li>AC-5: Default values match compile-time defaults specified in the design document</li> <li>AC-6: Structure layout compatible with ESP32 memory alignment requirements</li> </ul> <p>Configuration Structure (conceptual):</p> <p>The runtime configuration SHALL include metadata and the following parameter groups:</p> <ul> <li>Configuration metadata: version and save count for migration and tracking</li> <li>Distance sensor settings: minimum/maximum measurement ranges, measurement interval, sensor timeout, ambient temperature, smoothing factor</li> <li>LED settings: LED count and brightness</li> <li>WiFi settings: SSID, password, AP/channel settings, retry and timeout values</li> </ul> <p>Specific storage types, packed layouts, and fixed-point scaling conventions are design decisions and are documented in the configuration design specification: <code>docs/design/config-design.md</code> (see DSN-CFG-3).</p>"},{"location":"requirements/config-requirements/#req-cfg-4-non-volatile-storage-nvs","title":"REQ-CFG-4: Non-Volatile Storage (NVS)","text":"<p>Type: Implementation Priority: Mandatory Depends: REQ-CFG-3 Description: The system SHALL store runtime configuration defined in REQ-CFG-3 in ESP32 NVS flash memory with persistence across power cycles, and SHALL load configuration during system startup.</p> <p>Rationale: Maintains user configuration permanently without requiring firmware recompilation, using the configuration structure defined in REQ-CFG-3. Ensures configuration is available to all components during startup sequence.</p> <p>Acceptance Criteria:</p> <ul> <li>AC-1: Configuration saved to NVS namespace \"esp32_distance_config\"</li> <li>AC-2: Configuration survives device reset and power loss</li> <li>AC-3: NVS write operations are atomic and protected against power loss</li> <li>AC-4: Configuration integrity maintained through power cycles</li> <li>AC-5: System loads configuration from NVS during startup sequence</li> <li>AC-6: Configuration available to all components after successful startup load</li> <li>AC-7: Automatic fallback to defaults if NVS read fails (including first-time startup)</li> </ul>"},{"location":"requirements/config-requirements/#req-cfg-5-configuration-api","title":"REQ-CFG-5: Configuration API","text":"<p>Type: Implementation Priority: Mandatory Depends: REQ-CFG-4 Description: The system SHALL provide a well-defined API for configuration management operations with robust error handling and automatic fallback to defaults.</p> <p>Rationale: Enables consistent configuration access across all system components while handling NVS storage errors gracefully.</p> <p>Acceptance Criteria:</p> <ul> <li>AC-1: config_init() initializes configuration subsystem and loads configuration from NVS</li> <li>AC-2: config_load() reads configuration from NVS with error handling</li> <li>AC-3: config_load() SHALL call config_factory_reset() when NVS read fails or validation fails</li> <li>AC-4: config_save() writes configuration to NVS with validation by calling config_validate_range() before save</li> <li>AC-5: config_validate_range() validates all parameter ranges</li> <li>AC-6: config_factory_reset() restores compile-time defaults from REQ-CFG-1 and persists them to NVS via config_save()</li> <li>AC-7: All API functions return appropriate esp_err_t codes</li> <li>AC-8: Thread-safe access with mutex protection</li> <li>AC-9: Error recovery sequence (load failure \u2192 factory reset \u2192 save defaults) completes atomically</li> </ul> <p>API Specification:</p> <pre><code>// Configuration management API\nesp_err_t config_init(void);\nesp_err_t config_load(system_config_t* config);\nesp_err_t config_save(const system_config_t* config);\nesp_err_t config_validate_range(const system_config_t* config);\nesp_err_t config_factory_reset(void);\nbool config_is_valid_range(const char* param_name, int32_t value, int32_t min_val, int32_t max_val);\n</code></pre>"},{"location":"requirements/config-requirements/#req-cfg-6-parameter-validation","title":"REQ-CFG-6: Parameter Validation","text":"<p>Type: Implementation Priority: Mandatory Depends: REQ-CFG-3 Description: The system SHALL validate all configuration parameters in the runtime configuration structure against defined ranges before acceptance.</p> <p>Rationale: Prevents invalid configurations that could cause system malfunction or instability by enforcing parameter bounds and inter-parameter relationships.</p> <p>Acceptance Criteria:</p> <ul> <li>AC-1: All integer parameters validated against min/max ranges as specified below</li> <li>AC-2: All fixed-point parameters validated against min/max ranges as specified below</li> <li>AC-3: Inter-parameter validation (e.g., distance_min_mm &lt; distance_max_mm, sensor_timeout_ms &lt; measurement_interval_ms)</li> <li>AC-4: Invalid parameters rejected with specific error messages</li> <li>AC-5: Validation performed before NVS save operations</li> <li>AC-6: Validation errors logged with parameter name and attempted value</li> </ul> <p>Parameter Validation Ranges:</p> <p>The system SHALL validate parameters against the following human-oriented ranges. The design document <code>docs/design/config-design.md</code> specifies exact on-device representations and any fixed-point scaling used for storage.</p> <ul> <li>distance_min_mm: 50 - 1000 (millimeters)</li> <li>distance_max_mm: 200 - 4000 (millimeters) (must be &gt; distance_min_mm)</li> <li>measurement_interval_ms: 50 - 1000 (milliseconds)</li> <li>sensor_timeout_ms: 10 - 50 (milliseconds) (must be &lt; measurement_interval_ms)</li> <li>temperature_c: -20.0 - 60.0 (degrees Celsius) ; storage encoding documented in design doc</li> <li> <p>smoothing_factor: 0.001 - 1.0 (normalized smoothing parameter) ; storage scaling documented in design doc</p> </li> <li> <p>led_count: 1 - 60</p> </li> <li> <p>led_brightness: 10 - 255</p> </li> <li> <p>wifi_ap_channel: 1 - 13</p> </li> <li>wifi_ap_max_conn: 1 - 10</li> <li>wifi_sta_max_retry: 1 - 10</li> <li>wifi_sta_timeout_ms: 1000 - 30000 (milliseconds)</li> </ul>"},{"location":"requirements/config-requirements/#configuration-user-interface","title":"Configuration User Interface","text":""},{"location":"requirements/config-requirements/#req-cfg-7-web-settings-page","title":"REQ-CFG-7: Web Settings Page","text":"<p>Type: Implementation Priority: High Description: The system SHALL provide a web interface for runtime configuration modification.</p> <p>Rationale: Enables user-friendly configuration without requiring technical knowledge or firmware recompilation.</p> <p>Acceptance Criteria:</p> <ul> <li>AC-1: Web page accessible at <code>/settings</code> endpoint</li> <li>AC-2: Form fields for all runtime-configurable parameters</li> <li>AC-3: Current values pre-populated in form fields</li> <li>AC-4: Parameter ranges displayed as input constraints</li> <li>AC-5: Client-side validation before form submission</li> <li>AC-6: Server-side validation with error feedback</li> <li>AC-7: Success confirmation after configuration save</li> </ul>"},{"location":"requirements/config-requirements/#req-cfg-8-save-configuration","title":"REQ-CFG-8: Save Configuration","text":"<p>Type: Implementation Priority: High Description: The system SHALL save user configuration changes permanently and restart the device to apply them.</p> <p>Rationale: Provides reliable configuration persistence with automatic device restart to ensure all components use the new configuration values.</p> <p>Acceptance Criteria:</p> <ul> <li>AC-1: Form validation performed before save operation</li> <li>AC-2: Configuration written to NVS using config_save() API</li> <li>AC-3: Success notification displayed to user</li> <li>AC-4: Automatic device restart triggered 3 seconds after save</li> <li>AC-5: User feedback during restart countdown</li> <li>AC-6: Error handling with specific user feedback for validation failures</li> <li>AC-7: All form controls disabled during restart sequence</li> </ul>"},{"location":"requirements/config-requirements/#req-cfg-9-reload-configuration-and-reset-to-defaults","title":"REQ-CFG-9: Reload Configuration and Reset to Defaults","text":"<p>Type: Implementation Priority: High Description: The system SHALL provide reload functionality to refresh the UI with current NVS values and reset functionality to restore factory defaults.</p> <p>Rationale: Enables users to discard unsaved changes by reloading current configuration and provides recovery mechanism through factory reset.</p> <p>Acceptance Criteria:</p> <p>Reload Configuration:</p> <ul> <li>AC-1: \"Reload\" button reads current values from NVS</li> <li>AC-2: All form fields populated with current NVS values</li> <li>AC-3: Any unsaved changes in form are discarded</li> <li>AC-4: Success notification confirms reload operation</li> <li>AC-5: Error handling for NVS read failures</li> </ul> <p>Reset to Factory Defaults:</p> <ul> <li>AC-6: \"Reset to Defaults\" button with user confirmation dialog</li> <li>AC-7: Confirmation message clearly warns of irreversible action</li> <li>AC-8: Factory defaults restored using config_factory_reset() API</li> <li>AC-9: Form fields immediately updated with default values</li> <li>AC-10: Success notification confirms reset operation</li> <li>AC-11: Error handling with user feedback for reset failures</li> </ul>"},{"location":"requirements/config-requirements/#quality-requirements","title":"Quality Requirements","text":""},{"location":"requirements/config-requirements/#req-cfg-10-configuration-performance","title":"REQ-CFG-10: Configuration Performance","text":"<p>Type: Performance Priority: Mandatory Description: Configuration operations SHALL not impact real-time system performance.</p> <p>Acceptance Criteria:</p> <ul> <li>AC-1: Configuration load during startup completes within 100ms</li> <li>AC-2: Configuration save operations complete within 500ms</li> <li>AC-3: Configuration changes applied without sensor measurement interruption</li> <li>AC-4: Web configuration interface remains responsive during operations</li> </ul>"},{"location":"requirements/config-requirements/#req-cfg-11-configuration-reliability","title":"REQ-CFG-11: Configuration Reliability","text":"<p>Type: Reliability Priority: Mandatory Description: Configuration system SHALL handle all error conditions gracefully.</p> <p>Acceptance Criteria:</p> <ul> <li>AC-1: NVS corruption detected and reported with recovery action</li> <li>AC-2: Invalid parameter ranges rejected with specific error messages</li> <li>AC-3: Power loss during configuration save does not corrupt NVS</li> <li>AC-4: Network disconnection during web configuration handled gracefully</li> <li>AC-5: System operates with default configuration if NVS unavailable</li> </ul> <p>This document follows OpenFastTrack methodology for requirements engineering and traceability.</p>"},{"location":"requirements/display-requirements/","title":"Display System Requirements","text":"<p>Document ID: REQ-DSP-ESP32-DISTANCE Version: 2.0 Date: 2025-08-12 Author: ESP32 Distance Project Team Parent Document: SRS-ESP32-DISTANCE  </p>"},{"location":"requirements/display-requirements/#document-purpose","title":"Document Purpose","text":"<p>This document specifies requirements for the Display System, enabling visual representation of distance measurements through LED strip control with clear user experience definitions and implementation guidelines.</p>"},{"location":"requirements/display-requirements/#requirements-traceability","title":"Requirements Traceability","text":"Requirement ID Design Reference Priority REQ-DSP-OVERVIEW-01 DSN-DSP-OVERVIEW-01 Mandatory REQ-DSP-OVERVIEW-02 DSN-DSP-OVERVIEW-02 Mandatory REQ-DSP-VISUAL-01 DSN-DSP-VISUAL-01 Mandatory REQ-DSP-VISUAL-02 DSN-DSP-VISUAL-02 Mandatory REQ-DSP-VISUAL-03 DSN-DSP-VISUAL-03 Mandatory REQ-DSP-VISUAL-04 DSN-DSP-VISUAL-04 Mandatory REQ-DSP-IMPL-01 DSN-DSP-IMPL-01 Mandatory REQ-DSP-IMPL-02 DSN-DSP-IMPL-02 Mandatory REQ-DSP-IMPL-03 DSN-DSP-IMPL-03 Mandatory <p>Dependencies: - REQ-DSP-OVERVIEW-02 depends on REQ-CFG-1 (configuration management system) - REQ-DSP-VISUAL-03 depends on REQ-CFG-2 (boundary parameter configuration) - REQ-DSP-VISUAL-04 depends on REQ-CFG-2 (boundary parameter configuration)</p>"},{"location":"requirements/display-requirements/#system-overview-requirements","title":"System Overview Requirements","text":""},{"location":"requirements/display-requirements/#req-dsp-overview-01-hardware-platform","title":"REQ-DSP-OVERVIEW-01: Hardware Platform","text":"<p>Type: System Priority: Mandatory Description: The display system SHALL utilize WS2812 addressable LED strip hardware with configurable LED count and brightness as an integrated, reactive component.</p> <p>Rationale: Establishes the hardware foundation for the visual display system, enabling flexible LED strip configurations for different deployment scenarios. The system operates reactively, automatically responding to distance measurements rather than external commands.</p> <p>Acceptance Criteria: - AC-1: System supports WS2812 addressable LED strips - AC-2: LED count and brightness are configurable via configuration management system - AC-3: System validates LED count is within reasonable range (1-100 LEDs) - AC-4: LED strip communication uses appropriate GPIO pin configuration - AC-5: System initializes LED hardware before processing distance measurements - AC-6: System operates continuously, updating display in real-time as measurements arrive</p>"},{"location":"requirements/display-requirements/#req-dsp-overview-02-configuration-integration","title":"REQ-DSP-OVERVIEW-02: Configuration Integration","text":"<p>Type: Interface Priority: Mandatory Depends: REQ-CFG-1 Description: The display system SHALL obtain all operational parameters from the configuration management system.</p> <p>Rationale: Ensures centralized configuration management and eliminates hardcoded values, enabling runtime reconfiguration and consistent system behavior. Parameter validation is handled by the configuration manager. Configuration changes trigger system reset, allowing static memory allocation at startup with no runtime reallocation - preventing memory fragmentation and performance degradation in the embedded environment.</p> <p>Acceptance Criteria: - AC-1: All display parameters are obtained from configuration manager - AC-2: System reads configuration at initialization</p> <p>Configuration Parameters: - <code>led_count</code>: Number of LEDs in the strip - <code>led_brightness</code>: LED brightness level - <code>min_distance_cm</code>: Minimum distance threshold - <code>max_distance_cm</code>: Maximum distance threshold</p>"},{"location":"requirements/display-requirements/#user-experience-requirements","title":"User Experience Requirements","text":""},{"location":"requirements/display-requirements/#req-dsp-visual-01-core-visualization-concept","title":"REQ-DSP-VISUAL-01: Core Visualization Concept","text":"<p>Type: User Experience Priority: Mandatory Description: The display system SHALL illuminate a single LED that represents the current measured distance with real-time updates.</p> <p>Rationale: Provides clear, unambiguous visual feedback where users can immediately understand the current distance measurement through LED position.</p> <p>Acceptance Criteria: - AC-1: Only one LED is illuminated at any given time - AC-2: LED position corresponds to measured distance value - AC-3: Display updates immediately when new measurements arrive - AC-4: All other LEDs remain off during operation</p>"},{"location":"requirements/display-requirements/#req-dsp-visual-02-normal-range-display","title":"REQ-DSP-VISUAL-02: Normal Range Display","text":"<p>Type: User Experience Priority: Mandatory Description: The display system SHALL illuminate a green LED at a position linearly proportional to the measured distance when the measurement is within the configured range.</p> <p>Rationale: Provides intuitive distance visualization where LED position directly correlates to distance magnitude, using green color to indicate in-range measurements.</p> <p>Acceptance Criteria: - AC-1: LED color is green for measurements within valid range - AC-2: Minimum configured distance maps exactly to first LED (position 0) - AC-3: Maximum configured distance maps exactly to last LED (position led_count-1) - AC-4: LED position is calculated using linear interpolation between positions 0 and led_count-1</p>"},{"location":"requirements/display-requirements/#req-dsp-visual-03-below-minimum-display","title":"REQ-DSP-VISUAL-03: Below Minimum Display","text":"<p>Type: User Experience Priority: Mandatory Depends: REQ-CFG-2 Description: The display system SHALL illuminate the first LED in red when the measured distance is below the configured minimum distance threshold.</p> <p>Rationale: Provides clear visual indication when measurements are below the useful range, using red color and first position to indicate below-minimum condition.</p> <p>Acceptance Criteria: - AC-1: First LED (position 0) is illuminated red when distance &lt; min_distance_cm - AC-2: Only the first LED is illuminated (all others remain off) - AC-3: Display persists until measurement returns to valid range</p>"},{"location":"requirements/display-requirements/#req-dsp-visual-04-above-maximum-display","title":"REQ-DSP-VISUAL-04: Above Maximum Display","text":"<p>Type: User Experience Priority: Mandatory Depends: REQ-CFG-2 Description: The display system SHALL illuminate the last LED in red when the measured distance is above the configured maximum distance threshold.</p> <p>Rationale: Provides clear visual indication when measurements are above the useful range, using red color and last position to indicate above-maximum condition.</p> <p>Acceptance Criteria: - AC-1: Last LED (position led_count-1) is illuminated red when distance &gt; max_distance_cm - AC-2: Only the last LED is illuminated (all others remain off) - AC-3: Display persists until measurement returns to valid range</p>"},{"location":"requirements/display-requirements/#implementation-requirements","title":"Implementation Requirements","text":""},{"location":"requirements/display-requirements/#req-dsp-impl-01-task-based-architecture","title":"REQ-DSP-IMPL-01: Task-Based Architecture","text":"<p>Type: Implementation Priority: Mandatory Description: The display system SHALL implement a FreeRTOS task that blocks waiting for new distance measurements and updates the display accordingly.</p> <p>Rationale: Provides responsive, real-time display updates using efficient blocking I/O patterns, ensuring minimal resource usage and immediate response to sensor data.</p> <p>Acceptance Criteria: - AC-1: Implementation uses FreeRTOS task for display logic - AC-2: Task blocks waiting for distance measurement notifications - AC-3: Task has appropriate priority below measurement task but above any other task for real-time response</p>"},{"location":"requirements/display-requirements/#req-dsp-impl-02-led-buffer-management","title":"REQ-DSP-IMPL-02: LED Buffer Management","text":"<p>Type: Implementation Priority: Mandatory Description: The display system SHALL maintain an internal LED state buffer and update all LEDs simultaneously using WS2812 serial protocol characteristics.</p> <p>Rationale: WS2812 LEDs use serial daisy-chain protocol requiring complete buffer transmission to update display, ensuring consistent visual state across all LEDs.</p> <p>Acceptance Criteria:</p> <ul> <li>AC-1: Internal buffer maintains complete LED strip state (all LED colors)</li> <li>AC-2: Buffer is transmitted to hardware as single operation per WS2812 protocol</li> </ul>"},{"location":"requirements/display-requirements/#req-dsp-impl-03-distance-to-led-calculation","title":"REQ-DSP-IMPL-03: Distance-to-LED Calculation","text":"<p>Type: Implementation Priority: Mandatory Depends: REQ-DSP-VISUAL-02, REQ-DSP-VISUAL-03, REQ-DSP-VISUAL-04 Description: The display system SHALL implement linear mapping calculation to convert distance measurements to LED positions as specified in the visual requirements.</p> <p>Rationale: Provides the mathematical foundation for translating distance values into discrete LED positions, implementing the visual behavior defined in REQ-DSP-VISUAL-02/03/04.</p> <p>Acceptance Criteria:</p> <ul> <li>AC-1: Calculation handles full configured distance range per visual requirements</li> <li>AC-2: Result is clamped to valid LED index range [0, led_count-1]  </li> <li>AC-3: Edge cases (min/max distances) map exactly to first/last LEDs per visual requirements</li> </ul>"},{"location":"requirements/display-requirements/#requirements-summary","title":"Requirements Summary","text":"<p>Total Requirements: 9  </p> <ul> <li>System Overview: 2 requirements</li> <li>User Experience: 4 requirements  </li> <li>Implementation: 3 requirements</li> </ul> <p>Requirement Types:</p> <ul> <li>System: 1 requirement</li> <li>Interface: 1 requirement</li> <li>User Experience: 4 requirements</li> <li>Implementation: 3 requirements</li> </ul> <p>Priority Distribution:</p> <ul> <li>Mandatory: 9 requirements</li> <li>Optional: 0 requirements</li> </ul>"},{"location":"requirements/distance-sensor-requirements/","title":"Distance Sensor Requirements","text":"<p>Document ID: REQ-SNS-ESP32-DISTANCE Version: 1.0 Date: 2025-09-16 Author: ESP32 Distance Project Team Parent Document: SRS-ESP32-DISTANCE  </p>"},{"location":"requirements/distance-sensor-requirements/#document-purpose","title":"Document Purpose","text":"<p>This document specifies detailed requirements for the HC-SR04 ultrasonic distance sensor component, enabling precise distance measurement with real-time processing and noise reduction.</p>"},{"location":"requirements/distance-sensor-requirements/#requirements-traceability","title":"Requirements Traceability","text":"Requirement ID Design Reference Priority REQ-SNS-1 DSN-SNS-ARCH-02 Mandatory REQ-SNS-2 DSN-SNS-ARCH-02 Mandatory REQ-SNS-3 DSN-SNS-ISR-01 Mandatory REQ-SNS-4 DSN-SNS-TASK-01 Mandatory REQ-SNS-5 DSN-SNS-API-01 Mandatory REQ-SNS-6 DSN-SNS-TASK-01 Mandatory REQ-SNS-7 DSN-SNS-API-01 Important REQ-SNS-8 DSN-SNS-ISR-01 Critical REQ-SNS-9 DSN-SNS-ARCH-01 Important REQ-SNS-10 DSN-SNS-TASK-01 Important REQ-SNS-11 DSN-SNS-ALGO-01 Mandatory REQ-SNS-12 DSN-SNS-ERR-01 Mandatory REQ-SNS-13 DSN-SNS-ERR-01 Mandatory REQ-SNS-14 DSN-SNS-ERR-01 Important <p>Dependencies:</p> <ul> <li>REQ-SNS-3 depends on REQ-SNS-1 (ISR requires GPIO initialization)</li> <li>REQ-SNS-4 depends on REQ-SNS-3 (task processing requires ISR timestamps)</li> <li>REQ-SNS-5 depends on REQ-SNS-4 (API requires processed measurements)</li> <li>REQ-SNS-6 depends on REQ-SNS-1 (task lifecycle requires initialization)</li> <li>REQ-SNS-7 depends on REQ-SNS-4 (monitoring requires operational system)</li> </ul>"},{"location":"requirements/distance-sensor-requirements/#functional-requirements","title":"Functional Requirements","text":""},{"location":"requirements/distance-sensor-requirements/#req-sns-1-component-initialization","title":"REQ-SNS-1: Component Initialization","text":"<p>Type: Functional Priority: Mandatory Description: The distance sensor component SHALL provide initialization via <code>distance_sensor_init(const distance_sensor_config_t *config)</code> that configures GPIO pins, installs ISR service, creates internal queues, and establishes default configuration when no config is provided.</p> <p>Rationale: Deterministic startup sequence is required for reliable sensor operation and system integration.</p> <p>Acceptance Criteria:</p> <ul> <li>AC-1: <code>distance_sensor_init(NULL)</code> SHALL return <code>ESP_OK</code> and use default configuration values</li> <li>AC-2: Trigger pin SHALL be configured as GPIO output with no pull-up/pull-down</li> <li>AC-3: Echo pin SHALL be configured as GPIO input with <code>GPIO_INTR_ANYEDGE</code> interrupt</li> <li>AC-4: GPIO ISR service SHALL be installed successfully</li> <li>AC-5: Raw measurement queue (size 2) and processed measurement queue (size 5) SHALL be created</li> <li>AC-6: Function SHALL return appropriate <code>esp_err_t</code> codes for error conditions</li> </ul> <p>Verification: Code review of GPIO configuration and integration test validating successful initialization with NULL and custom configurations.</p>"},{"location":"requirements/distance-sensor-requirements/#req-sns-2-trigger-pulse-generation","title":"REQ-SNS-2: Trigger Pulse Generation","text":"<p>Type: Functional Priority: Mandatory Description: The sensor task SHALL generate a 10\u00b5s trigger pulse on the configured trigger GPIO pin for each measurement cycle to initiate HC-SR04 ultrasonic measurement.</p> <p>Rationale: HC-SR04 datasheet specifies 10\u00b5s trigger pulse requirement for reliable operation.</p> <p>Acceptance Criteria:</p> <ul> <li>AC-1: Trigger pulse duration SHALL be 10\u00b5s \u00b11\u00b5s</li> <li>AC-2: Trigger pulse SHALL transition from LOW to HIGH to LOW</li> <li>AC-3: Pulse generation SHALL occur at the configured measurement interval</li> <li>AC-4: Pulse generation SHALL use <code>esp_rom_delay_us()</code> for precise timing</li> </ul> <p>Verification: Logic analyzer capture of trigger pin or instrumented test measuring pulse width and timing accuracy.</p>"},{"location":"requirements/distance-sensor-requirements/#req-sns-3-real-time-timestamp-capture","title":"REQ-SNS-3: Real-Time Timestamp Capture","text":"<p>Type: Functional Priority: Mandatory Description: The GPIO ISR SHALL capture rising and falling edge timestamps using <code>esp_timer_get_time()</code> with microsecond precision and queue raw timestamp data to the sensor task without blocking operations.</p> <p>Rationale: Accurate distance calculation requires precise echo timing; ISR must remain minimal for real-time system stability.</p> <p>Acceptance Criteria:</p> <ul> <li>AC-1: ISR SHALL be marked <code>IRAM_ATTR</code> for deterministic execution</li> <li>AC-2: Rising edge SHALL capture start timestamp to volatile variable</li> <li>AC-3: Falling edge SHALL capture end timestamp and queue <code>distance_raw_measurement_t</code> via <code>xQueueSendFromISR</code></li> <li>AC-4: ISR SHALL NOT perform floating-point operations, heap allocation, or blocking calls</li> <li>AC-5: ISR SHALL use <code>portYIELD_FROM_ISR</code> when higher priority task awakened</li> <li>AC-6: Raw timestamp data SHALL be queued successfully or measurement marked invalid</li> </ul> <p>Verification: Code review for ISR constraints and timing analysis showing ISR execution time &lt; 10\u00b5s.</p>"},{"location":"requirements/distance-sensor-requirements/#req-sns-4-measurement-processing","title":"REQ-SNS-4: Measurement Processing","text":"<p>Type: Functional Priority: Mandatory Description: The sensor task SHALL calculate distance in millimeters using integer arithmetic with temperature compensation, validate measurement range (20mm-4000mm), apply exponential moving average smoothing for valid measurements, and enqueue processed results.</p> <p>Rationale: Separation of concerns keeps ISR minimal while providing filtered, validated measurements to consumers.</p> <p>Acceptance Criteria:</p> <ul> <li>AC-1: Distance calculation SHALL use integer arithmetic with temperature compensation</li> <li>AC-2: Measurements below 20mm or above 4000mm SHALL be marked <code>DISTANCE_SENSOR_OUT_OF_RANGE</code></li> <li>AC-3: Valid measurements SHALL be processed through EMA filter based on <code>smoothing_factor</code></li> <li>AC-4: Out-of-range measurements SHALL NOT update EMA filter state</li> <li>AC-5: Processed measurements SHALL include <code>distance_mm</code>, <code>timestamp_us</code>, and <code>status</code> fields</li> <li>AC-6: Processed measurements SHALL be queued to processed measurement queue</li> </ul> <p>Verification: Unit tests with synthetic timestamps validating distance calculations, range validation, and EMA filter behavior.</p>"},{"location":"requirements/distance-sensor-requirements/#req-sns-5-blocking-api-access","title":"REQ-SNS-5: Blocking API Access","text":"<p>Type: Functional Priority: Mandatory Description: The component SHALL provide <code>distance_sensor_get_latest(distance_measurement_t *measurement)</code> that blocks until the next processed measurement is available, guaranteeing fresh data to consumers.</p> <p>Rationale: Simplified consumer API that eliminates polling overhead and ensures data freshness.</p> <p>Acceptance Criteria:</p> <ul> <li>AC-1: Function SHALL block with <code>portMAX_DELAY</code> until processed measurement available</li> <li>AC-2: Function SHALL return <code>ESP_OK</code> when measurement successfully retrieved</li> <li>AC-3: Function SHALL return <code>ESP_ERR_INVALID_ARG</code> when measurement pointer is NULL</li> <li>AC-4: Function SHALL copy complete measurement structure to caller's buffer</li> <li>AC-5: Function SHALL be thread-safe for multiple consumers</li> </ul> <p>Verification: Integration test with consumer task blocking on API and validating received measurements.</p>"},{"location":"requirements/distance-sensor-requirements/#req-sns-6-task-lifecycle-management","title":"REQ-SNS-6: Task Lifecycle Management","text":"<p>Type: Functional Priority: Mandatory Description: The component SHALL provide <code>distance_sensor_start()</code> and <code>distance_sensor_stop()</code> functions to control sensor task creation and deletion with proper state management.</p> <p>Rationale: Controlled startup and graceful shutdown enable system power management and error recovery.</p> <p>Acceptance Criteria:</p> <ul> <li>AC-1: <code>distance_sensor_start()</code> SHALL create sensor task pinned to core 1 with priority 5</li> <li>AC-2: Task SHALL have stack size of 4096 bytes and name \"distance_sensor\"</li> <li>AC-3: <code>distance_sensor_stop()</code> SHALL delete sensor task and set handle to NULL</li> <li>AC-4: Functions SHALL return appropriate error codes for invalid state transitions</li> <li>AC-5: <code>distance_sensor_is_running()</code> SHALL reflect actual task state</li> </ul> <p>Verification: Unit tests validating task creation, deletion, and state management across start/stop cycles.</p>"},{"location":"requirements/distance-sensor-requirements/#req-sns-7-health-monitoring","title":"REQ-SNS-7: Health Monitoring","text":"<p>Type: Functional Priority: Important Description: The component SHALL provide monitoring capabilities including queue overflow metrics and health status reporting for operational visibility.</p> <p>Rationale: System operators need visibility into sensor health and potential overload conditions.</p> <p>Acceptance Criteria:</p> <ul> <li>AC-1: <code>distance_sensor_get_queue_overflows()</code> SHALL return monotonically increasing counter</li> <li>AC-2: <code>distance_sensor_monitor()</code> SHALL log new overflow events with counts</li> <li>AC-3: <code>distance_sensor_has_new_measurement()</code> SHALL return queue status without blocking</li> <li>AC-4: Monitoring functions SHALL be callable regardless of task state</li> <li>AC-5: Overflow counter SHALL increment only when processed queue full and oldest dropped</li> </ul> <p>Verification: Stress test forcing queue overflows and validating counter behavior and logging output.</p>"},{"location":"requirements/distance-sensor-requirements/#non-functional-requirements","title":"Non-Functional Requirements","text":""},{"location":"requirements/distance-sensor-requirements/#req-sns-8-real-time-isr-constraints","title":"REQ-SNS-8: Real-Time ISR Constraints","text":"<p>Type: Performance Priority: Critical Description: The GPIO ISR SHALL execute within microsecond timeframes and comply with real-time system constraints by avoiding floating-point operations, heap allocations, and blocking calls.</p> <p>Rationale: ESP32 real-time stability requires deterministic ISR behavior to prevent system jitter and timing violations.</p> <p>Acceptance Criteria:</p> <ul> <li>AC-1: ISR execution time SHALL be &lt; 10\u00b5s in worst case</li> <li>AC-2: ISR SHALL be marked <code>IRAM_ATTR</code> and reside in instruction RAM</li> <li>AC-3: ISR SHALL NOT use floating-point arithmetic</li> <li>AC-4: ISR SHALL NOT call <code>malloc</code>, <code>free</code>, or heap allocation functions</li> <li>AC-5: ISR SHALL NOT call blocking FreeRTOS functions except <code>xQueueSendFromISR</code></li> <li>AC-6: ISR stack usage SHALL be &lt; 512 bytes</li> </ul> <p>Verification: Static analysis for forbidden operations and timing measurement under maximum load conditions.</p>"},{"location":"requirements/distance-sensor-requirements/#req-sns-9-memory-resource-limits","title":"REQ-SNS-9: Memory Resource Limits","text":"<p>Type: Resource Priority: Important Description: The distance sensor component SHALL operate within fixed memory limits using small queue sizes and bounded stack allocation to fit ESP32 memory constraints.</p> <p>Rationale: ESP32 has limited RAM; component must be memory-efficient while maintaining functionality.</p> <p>Acceptance Criteria:</p> <ul> <li>AC-1: Raw measurement queue size SHALL be exactly 2 elements</li> <li>AC-2: Processed measurement queue size SHALL be exactly 5 elements</li> <li>AC-3: Sensor task stack size SHALL be 4096 bytes</li> <li>AC-4: Component SHALL use no dynamic memory allocation after initialization</li> <li>AC-5: Static memory usage SHALL be &lt; 1KB for variables and state</li> <li>AC-6: Queue element sizes SHALL be minimal for required data</li> </ul> <p>Verification: Memory usage analysis and heap monitoring during component operation.</p>"},{"location":"requirements/distance-sensor-requirements/#req-sns-10-timing-and-performance","title":"REQ-SNS-10: Timing and Performance","text":"<p>Type: Performance Priority: Important Description: The sensor component SHALL operate at configurable measurement intervals with deterministic timing characteristics and appropriate timeout handling.</p> <p>Rationale: Predictable measurement timing enables system coordination and proper sensor operation.</p> <p>Acceptance Criteria:</p> <ul> <li>AC-1: Default measurement interval SHALL be 100ms (10Hz rate)</li> <li>AC-2: Measurement interval SHALL be configurable via <code>measurement_interval_ms</code></li> <li>AC-3: Default echo timeout SHALL be 30ms to accommodate maximum range</li> <li>AC-4: Echo timeout SHALL be configurable via <code>timeout_ms</code></li> <li>AC-5: Task SHALL yield CPU between measurements using <code>vTaskDelay</code></li> <li>AC-6: Measurement timing SHALL have \u00b15ms accuracy at 100ms interval</li> </ul> <p>Verification: Timing analysis with oscilloscope or logic analyzer measuring actual intervals and jitter.</p>"},{"location":"requirements/distance-sensor-requirements/#req-sns-11-accuracy-and-calibration","title":"REQ-SNS-11: Accuracy and Calibration","text":"<p>Type: Quality Priority: Mandatory Description: Distance calculations SHALL use integer arithmetic with temperature compensation to achieve accurate measurements across operational temperature range.</p> <p>Rationale: Measurement accuracy is critical for application functionality; temperature affects sound speed significantly.</p> <p>Acceptance Criteria:</p> <ul> <li>AC-1: Speed of sound calculation SHALL use formula: 331.3 + 0.606 * temperature (m/s)</li> <li>AC-2: Temperature input SHALL be <code>temperature_c_x10</code> format (200 = 20.0\u00b0C)</li> <li>AC-3: Integer arithmetic SHALL use scaling factor 1,000,000 for precision</li> <li>AC-4: Distance accuracy SHALL be \u00b12mm for distances 20mm-400cm at 20\u00b0C</li> <li>AC-5: EMA smoothing factor SHALL be configurable 0-1000 (1000 = no smoothing)</li> <li>AC-6: First measurement SHALL initialize EMA filter without smoothing</li> </ul> <p>Verification: Calibration tests with known distances at various temperatures and EMA filter validation.</p>"},{"location":"requirements/distance-sensor-requirements/#error-handling-requirements","title":"Error Handling Requirements","text":""},{"location":"requirements/distance-sensor-requirements/#req-sns-12-timeout-error-handling","title":"REQ-SNS-12: Timeout Error Handling","text":"<p>Type: Error Handling Priority: Mandatory Description: The system SHALL handle missing echo signals by generating timeout measurements with appropriate status codes when no echo is received within the configured timeout period.</p> <p>Rationale: Missing echoes occur due to signal absorption or reflection angles; system must continue operation.</p> <p>Acceptance Criteria:</p> <ul> <li>AC-1: Timeout condition SHALL be detected when no echo received within <code>timeout_ms</code></li> <li>AC-2: Timeout measurement SHALL have status <code>DISTANCE_SENSOR_TIMEOUT</code></li> <li>AC-3: Timeout measurement SHALL have distance value 0</li> <li>AC-4: Timeout measurement SHALL include valid timestamp</li> <li>AC-5: System SHALL continue normal operation after timeout</li> <li>AC-6: Timeout events SHALL be logged at warning level</li> </ul> <p>Verification: Test with echo pin disconnected or sensor obstruction causing timeouts.</p>"},{"location":"requirements/distance-sensor-requirements/#req-sns-13-range-validation","title":"REQ-SNS-13: Range Validation","text":"<p>Type: Error Handling Priority: Mandatory Description: The system SHALL validate measurement range and flag out-of-range values without applying smoothing to preserve error information.</p> <p>Rationale: Out-of-range measurements indicate sensor issues or environmental conditions requiring user attention.</p> <p>Acceptance Criteria:</p> <ul> <li>AC-1: Measurements &lt; 20mm SHALL be marked <code>DISTANCE_SENSOR_OUT_OF_RANGE</code></li> <li>AC-2: Measurements &gt; 4000mm SHALL be marked <code>DISTANCE_SENSOR_OUT_OF_RANGE</code></li> <li>AC-3: Out-of-range measurements SHALL NOT update EMA filter state</li> <li>AC-4: Out-of-range measurements SHALL preserve raw distance value</li> <li>AC-5: Range validation SHALL occur before smoothing filter</li> <li>AC-6: Out-of-range events SHALL be logged at warning level</li> </ul> <p>Verification: Unit tests with synthetic timestamps producing out-of-range distances and validation of status codes.</p>"},{"location":"requirements/distance-sensor-requirements/#req-sns-14-queue-overflow-management","title":"REQ-SNS-14: Queue Overflow Management","text":"<p>Type: Error Handling Priority: Important Description: The system SHALL implement drop-oldest policy for processed queue overflow with statistics tracking to handle consumer backpressure without blocking sensor operation.</p> <p>Rationale: Slow consumers should not disrupt sensor measurement timing; overflow indicates system load issues.</p> <p>Acceptance Criteria:</p> <ul> <li>AC-1: Processed queue full condition SHALL trigger drop-oldest behavior</li> <li>AC-2: Oldest measurement SHALL be removed before adding new measurement</li> <li>AC-3: Queue overflow counter SHALL increment on each overflow event</li> <li>AC-4: Overflow events SHALL be logged with cumulative count</li> <li>AC-5: Sensor task SHALL never block on processed queue operations</li> <li>AC-6: Raw queue overflow SHALL be prevented by proper task priority</li> </ul> <p>Verification: Load testing with slow consumer to force overflows and validate drop-oldest behavior and statistics.</p> <p>*** End Patch</p>"},{"location":"requirements/led-controller-requirements/","title":"LED Controller Requirements","text":"<p>Document ID: REQ-LED-ESP32-DISTANCE Version: 1.0 Date: 2025-09-16 Author: ESP32 Distance Project Team Parent Document: SRS-ESP32-DISTANCE  </p>"},{"location":"requirements/led-controller-requirements/#document-purpose","title":"Document Purpose","text":"<p>This document specifies the essential requirements for WS2812 LED strip control, focusing on user-facing functionality rather than implementation details.</p>"},{"location":"requirements/led-controller-requirements/#requirements-traceability","title":"Requirements Traceability","text":"Requirement ID Design Reference Priority REQ-LED-1 DSN-LED-ARCH-01, DSN-LED-TIMING-01 Mandatory REQ-LED-2 DSN-LED-ARCH-02, DSN-LED-API-01, DSN-LED-API-02, DSN-LED-ERR-01 Mandatory REQ-LED-3 DSN-LED-ARCH-02, DSN-LED-MEM-01, DSN-LED-ERR-01 Mandatory REQ-LED-4 DSN-LED-API-02, DSN-LED-DATA-01 Mandatory <p>Dependencies:</p> <ul> <li>REQ-LED-2 depends on REQ-LED-1 (cannot control pixels without hardware support)</li> <li>REQ-LED-3 depends on REQ-LED-1 (LED count is hardware configuration parameter)</li> <li>REQ-LED-4 depends on REQ-LED-2 (color accuracy requires pixel control)</li> </ul>"},{"location":"requirements/led-controller-requirements/#functional-requirements","title":"Functional Requirements","text":""},{"location":"requirements/led-controller-requirements/#req-led-1-ws2812-led-strip-support","title":"REQ-LED-1: WS2812 LED Strip Support","text":"<p>Type: Functional Priority: Mandatory Description: The system SHALL support WS2812 addressable LED strips for visual distance display, providing hardware compatibility and initialization.</p> <p>Rationale: WS2812 LEDs are the chosen hardware for distance visualization; system must interface with this specific LED technology.</p> <p>Acceptance Criteria:</p> <ul> <li>AC-1: System SHALL initialize WS2812 LED strips connected to configurable GPIO pin</li> <li>AC-2: System SHALL support WS2812 timing and protocol requirements</li> <li>AC-3: LEDs SHALL respond to control signals and display colors</li> <li>AC-4: Initialization SHALL handle hardware configuration parameters</li> </ul> <p>Verification: Connect WS2812 strip, verify LEDs respond to basic commands and display expected colors.</p>"},{"location":"requirements/led-controller-requirements/#req-led-2-individual-pixel-control","title":"REQ-LED-2: Individual Pixel Control","text":"<p>Type: Functional Priority: Mandatory Description: The system SHALL provide the ability to set the color of individual LED pixels within the strip for precise distance visualization.</p> <p>Rationale: Distance display requires lighting specific LEDs at calculated positions; individual control is essential for the application.</p> <p>Acceptance Criteria:</p> <ul> <li>AC-1: System SHALL set specific LED colors by index position</li> <li>AC-2: Color control SHALL support RGB color space with 8-bit resolution per channel</li> <li>AC-3: Individual LED changes SHALL NOT affect other LEDs</li> <li>AC-4: System SHALL provide clear all LEDs functionality</li> </ul> <p>Verification: Set individual LEDs to different colors, verify only targeted LEDs change, test clear all functionality.</p>"},{"location":"requirements/led-controller-requirements/#req-led-3-configurable-led-count","title":"REQ-LED-3: Configurable LED Count","text":"<p>Type: Functional Priority: Mandatory Description: The system SHALL support configurable LED strip lengths to accommodate different hardware deployments and installation requirements.</p> <p>Rationale: Different installations may use varying LED strip lengths; system must be flexible for deployment scenarios.</p> <p>Acceptance Criteria:</p> <ul> <li>AC-1: LED count SHALL be configurable during system initialization</li> <li>AC-2: System SHALL support LED counts from 1 to at least 100 LEDs</li> <li>AC-3: System SHALL validate LED count parameters during configuration</li> <li>AC-4: All LED positions within configured count SHALL be controllable</li> </ul> <p>Verification: Test with different LED counts, verify all configured LEDs are controllable and out-of-range access is prevented.</p>"},{"location":"requirements/led-controller-requirements/#req-led-4-accurate-color-display","title":"REQ-LED-4: Accurate Color Display","text":"<p>Type: Quality Priority: Mandatory Description: The system SHALL display specified RGB colors accurately on WS2812 LEDs for reliable visual feedback to users.</p> <p>Rationale: Color accuracy is essential for distance visualization effectiveness; users must be able to distinguish between different states (normal/error conditions).</p> <p>Acceptance Criteria:</p> <ul> <li>AC-1: Primary colors (red, green, blue) SHALL display distinctly and accurately</li> <li>AC-2: White color SHALL appear as true white without color bias</li> <li>AC-3: Black/off state SHALL turn LEDs completely off</li> <li>AC-4: Color transitions SHALL be immediate when hardware is updated</li> </ul> <p>Verification: Display primary colors and verify visual accuracy, test white balance and off state, measure color transition timing.</p>"},{"location":"requirements/startup-test-requirements/","title":"Startup Test Requirements","text":"<p>Document ID: REQ-STARTUP-ESP32-DISTANCE Version: 1.0 Date: 2025-09-16 Author: ESP32 Distance Project Team Parent Document: SRS-ESP32-DISTANCE  </p>"},{"location":"requirements/startup-test-requirements/#document-purpose","title":"Document Purpose","text":"<p>This document specifies requirements for the startup test sequence that provides visual feedback to users during system initialization, demonstrating hardware functionality and successful boot.</p>"},{"location":"requirements/startup-test-requirements/#requirements-traceability","title":"Requirements Traceability","text":"Requirement ID Design Reference Priority REQ-STARTUP-1 DSN-STARTUP-1 Mandatory REQ-STARTUP-2 DSN-STARTUP-2 Mandatory REQ-STARTUP-3 DSN-STARTUP-3 Important <p>Dependencies:</p> <ul> <li>REQ-STARTUP-2 depends on REQ-LED-1 (cannot test LEDs without LED controller support)</li> </ul>"},{"location":"requirements/startup-test-requirements/#functional-requirements","title":"Functional Requirements","text":""},{"location":"requirements/startup-test-requirements/#req-startup-1-led-controller-initialization","title":"REQ-STARTUP-1: LED Controller Initialization","text":"<p>Type: Functional Priority: Mandatory Description: The system SHALL initialize the LED controller during startup before performing the visual test sequence.</p> <p>Rationale: LED hardware must be ready before the startup sequence can execute.</p> <p>Acceptance Criteria:</p> <ul> <li>AC-1: LED controller SHALL be initialized successfully during startup</li> <li>AC-2: System SHALL proceed to visual sequence only after successful LED initialization</li> </ul> <p>Verification: Verify LED controller initializes without errors during system startup.</p>"},{"location":"requirements/startup-test-requirements/#req-startup-2-visual-boot-sequence","title":"REQ-STARTUP-2: Visual Boot Sequence","text":"<p>Type: User Experience Priority: Mandatory Description: The system SHALL display a visual boot sequence by lighting LEDs in sequential order from first to last, providing clear indication that the system is initializing and all LEDs are functional.</p> <p>Rationale: Gives users immediate visual feedback that the device is booting properly and demonstrates that all LEDs in the strip are working correctly.</p> <p>Acceptance Criteria:</p> <ul> <li>AC-1: LEDs SHALL light sequentially from position 0 to position (led_count-1)</li> <li>AC-2: Each LED SHALL display a distinct color during the sequence (e.g., blue or white)</li> <li>AC-3: Test SHALL complete within reasonable time limits (example: 40 LEDs @ 50ms each = 2.0 second maximum)</li> <li>AC-4: Each LED SHALL turn off before the next LED activates (single moving light pattern)</li> <li>AC-5: Normal distance measurement SHALL begin after sequence completes</li> </ul> <p>Verification: Observe startup sequence, verify all LEDs activate in order with appropriate timing and visual clarity.</p>"},{"location":"requirements/startup-test-requirements/#non-functional-requirements","title":"Non-Functional Requirements","text":""},{"location":"requirements/startup-test-requirements/#req-startup-3-timing-performance","title":"REQ-STARTUP-3: Timing Performance","text":"<p>Type: Performance Priority: Important Description: The startup test sequence SHALL complete within reasonable time limits to avoid significantly delaying normal system operation.</p> <p>Rationale: Users expect reasonable boot times; startup test should provide value without excessive delay.</p> <p>Acceptance Criteria:</p> <ul> <li>AC-1: Complete startup sequence SHALL finish within 5 seconds for 60 LEDs</li> <li>AC-2: LED activation timing SHALL be configurable (default 50ms per LED)</li> <li>AC-3: Total startup delay SHALL not exceed 10 seconds regardless of LED count</li> </ul> <p>Verification: Measure startup sequence timing with different LED counts, verify performance meets timing requirements.</p>"},{"location":"requirements/startup-test-requirements/#requirements-summary","title":"Requirements Summary","text":"<p>Total Requirements: 3</p> <ul> <li>Functional: 2 requirements (LED initialization, visual sequence)</li> <li>Non-Functional: 1 requirement (timing performance)</li> </ul> <p>Priority Distribution:</p> <ul> <li>Mandatory: 2 requirements</li> <li>Important: 1 requirement</li> </ul> <p>Key Benefits:</p> <ul> <li>User Confidence: Clear visual feedback that system is working properly</li> <li>LED Validation: Demonstrates all LEDs in the strip are functional</li> <li>Professional Appearance: Polished boot experience</li> </ul>"},{"location":"requirements/system-requirements/","title":"System Requirements Specification","text":"<p>Document ID: SRS-ESP32-DISTANCE Version: 1.0 Date: 2025-07-24 Author: ESP32 Distance Project Team  </p>"},{"location":"requirements/system-requirements/#document-purpose","title":"Document Purpose","text":"<p>This document specifies the high-level system requirements for the ESP32 Distance Sensor project, following OpenFastTrack (OFT) methodology for requirements engineering and traceability.</p>"},{"location":"requirements/system-requirements/#system-overview","title":"System Overview","text":"<p>The ESP32 Distance Sensor system is an IoT device that:</p> <ul> <li>Measures distance using HC-SR04 ultrasonic sensor</li> <li>Displays distance on WS2812 LED strip</li> <li>Provides WiFi connectivity and web interface</li> <li>Supports runtime configuration and monitoring</li> </ul>"},{"location":"requirements/system-requirements/#requirements-traceability","title":"Requirements Traceability","text":"Requirement ID Design Reference Priority REQ-SYS-1 DSN-SYS-1 Mandatory REQ-SYS-2 DSN-SYS-2 Mandatory REQ-SYS-3 DSN-SYS-3 Mandatory REQ-SYS-4 DSN-SYS-4 Mandatory REQ-SYS-5 DSN-SYS-5 Mandatory REQ-SYS-6 DSN-SYS-6 Mandatory REQ-SYS-7 DSN-SYS-7 Mandatory REQ-SYS-8 DSN-SYS-8 Mandatory REQ-SYS-SIM-1 DSN-SIM-LED-01, DSN-SIM-SNS-01 Mandatory"},{"location":"requirements/system-requirements/#requirement-categories","title":"Requirement Categories","text":"<p>Requirements are categorized using the following prefixes:</p> <ul> <li><code>REQ-SYS</code>: System-level requirements</li> <li><code>REQ-CFG</code>: Configuration management requirements  </li> <li><code>REQ-SEN</code>: Sensor requirements</li> <li><code>REQ-LED</code>: LED display requirements</li> <li><code>REQ-NET</code>: Network and connectivity requirements</li> <li><code>REQ-WEB</code>: Web interface requirements</li> </ul>"},{"location":"requirements/system-requirements/#system-requirements","title":"System Requirements","text":""},{"location":"requirements/system-requirements/#req-sys-1-esp32-hardware-platform","title":"REQ-SYS-1: ESP32 Hardware Platform","text":"<p>Type: System Priority: Mandatory Description: The system SHALL operate on ESP32 WROOM-32F microcontroller with 4MB flash memory.</p> <p>Rationale: ESP32 provides WiFi connectivity, sufficient processing power, and adequate flash memory for the application.</p> <p>Acceptance Criteria:</p> <ul> <li>AC-1: System boots successfully on ESP32 WROOM-32F</li> <li>AC-2: Flash usage does not exceed 90% of available 4MB</li> <li>AC-3: System operates within ESP32 memory constraints</li> </ul>"},{"location":"requirements/system-requirements/#req-sys-2-real-time-distance-measurement","title":"REQ-SYS-2: Real-time Distance Measurement","text":"<p>Type: Functional Priority: Mandatory Description: The system SHALL continuously measure distance and update LED display in real-time.</p> <p>Rationale: Core functionality for distance visualization and monitoring.</p> <p>Acceptance Criteria:</p> <ul> <li>AC-1: Distance measurements updated at minimum 10Hz frequency</li> <li>AC-2: LED display reflects distance changes within 100ms</li> <li>AC-3: System maintains real-time performance under all operating conditions</li> </ul>"},{"location":"requirements/system-requirements/#req-sys-3-wifi-connectivity","title":"REQ-SYS-3: WiFi Connectivity","text":"<p>Type: Functional Priority: Mandatory Description: The system SHALL provide WiFi connectivity in both Access Point (AP) and Station (STA) modes.</p> <p>Rationale: Enables web interface access and network configuration.</p> <p>Acceptance Criteria:</p> <ul> <li>AC-1: System creates WiFi Access Point for initial configuration</li> <li>AC-2: System connects to existing WiFi networks as station</li> <li>AC-3: Automatic fallback to AP mode if STA connection fails</li> </ul>"},{"location":"requirements/system-requirements/#req-sys-4-web-based-configuration","title":"REQ-SYS-4: Web-based Configuration","text":"<p>Type: Functional Priority: Mandatory Description: The system SHALL provide web interface for configuration and monitoring.</p> <p>Rationale: User-friendly interface for system setup and operation.</p> <p>Acceptance Criteria:</p> <ul> <li>AC-1: Web interface accessible via HTTP</li> <li>AC-2: Configuration changes applied without firmware recompilation</li> <li>AC-3: Real-time monitoring of system status and sensor data</li> </ul>"},{"location":"requirements/system-requirements/#req-sys-5-non-volatile-configuration-storage","title":"REQ-SYS-5: Non-volatile Configuration Storage","text":"<p>Type: Functional Priority: Mandatory Description: The system SHALL persist configuration settings across power cycles.</p> <p>Rationale: Maintains user settings and system configuration permanently.</p> <p>Acceptance Criteria:</p> <ul> <li>AC-1: Configuration survives device reset and power loss</li> <li>AC-2: Factory reset capability restores default settings</li> <li>AC-3: Configuration corruption detection and recovery</li> </ul>"},{"location":"requirements/system-requirements/#req-sys-6-component-based-architecture","title":"REQ-SYS-6: Component-based Architecture","text":"<p>Type: Design Priority: Mandatory Description: The system SHALL implement modular component-based architecture.</p> <p>Rationale: Enables maintainability, testability, and reusability.</p> <p>Acceptance Criteria:</p> <ul> <li>AC-1: Distance sensor implemented as independent component</li> <li>AC-2: LED controller implemented as independent component</li> <li>AC-3: Components provide well-defined APIs</li> <li>AC-4: Main application coordinates components without tight coupling</li> </ul>"},{"location":"requirements/system-requirements/#req-sys-7-error-handling-and-recovery","title":"REQ-SYS-7: Error Handling and Recovery","text":"<p>Type: Reliability Priority: Mandatory Description: The system SHALL handle errors gracefully and attempt recovery.</p> <p>Rationale: Ensures system reliability and user experience.</p> <p>Acceptance Criteria:</p> <ul> <li>AC-1: Sensor timeouts handled without system crash</li> <li>AC-2: WiFi connection failures trigger automatic retry</li> <li>AC-3: System logs errors for diagnostics</li> <li>AC-4: Watchdog timer prevents system hang</li> </ul>"},{"location":"requirements/system-requirements/#req-sys-8-memory-management","title":"REQ-SYS-8: Memory Management","text":"<p>Type: Performance Priority: Mandatory Description: The system SHALL manage memory efficiently within ESP32 constraints.</p> <p>Rationale: Prevents memory leaks and ensures stable operation.</p> <p>Acceptance Criteria:</p> <ul> <li>AC-1: Heap usage monitored and bounded</li> <li>AC-2: No memory leaks during normal operation</li> <li>AC-3: Stack overflow protection for all tasks</li> <li>AC-4: Dynamic allocation minimized in time-critical paths</li> </ul>"},{"location":"requirements/system-requirements/#req-sys-sim-1-emulator-simulator-build-support","title":"REQ-SYS-SIM-1: Emulator / Simulator Build Support","text":"<p>Type: Design / Testability</p> <p>Priority: Mandatory</p> <p>Description: The system SHALL provide a build-time selectable emulator/simulator mode that replaces hardware-near modules with simulator implementations while preserving the public component APIs and runtime behavior seen by higher-level modules. Simulator implementations MUST be selectable without modifying header files or higher-level application code.</p> <p>Rationale: Enables development and testing on host environments (QEMU) without physical hardware, improves reproducibility and CI test coverage, and enforces clean module boundaries that encapsulate hardware dependencies.</p> <p>Acceptance Criteria:</p> <ul> <li>AC-1: A Kconfig option <code>CONFIG_TARGET_EMULATOR</code> (or equivalent) exists to enable emulator builds via <code>menuconfig</code> or <code>idf.py -DCONFIG_TARGET_EMULATOR=1 build</code>.</li> <li>AC-2: Simulator implementations are selected by the buildsystem (CMake) and compiled in place of hardware implementations (example: <code>distance_sensor_sim.c</code> vs <code>distance_sensor.c</code>) without requiring changes to header files or higher-layer code.</li> <li>AC-3: Simulator components MUST implement the complete public API of their hardware counterparts and return identical error codes and semantics for consumers (blocking queue semantics, return values, state queries).</li> <li>AC-4: The distance sensor simulator SHALL produce deterministic measurements performing a linear sweep from 5cm to 60cm and back with 1mm resolution, advancing once per second; measurements are published on the processed measurement queue using the same <code>distance_measurement_t</code> structure and status codes.</li> <li>AC-5: The LED controller simulator SHALL maintain the same in-RAM buffer semantics and <code>led_show()</code> API; physical transmission is replaced by a rate-limited terminal visualization (\u22481Hz) using unobtrusive symbols (emoji or ASCII) to reflect per-pixel state.</li> <li>AC-6: The web server and WiFi manager MAY be left unchanged in emulator builds; lack of real WiFi events is acceptable and must not cause crashes. The emulator requirement does not mandate network stack simulation in the first iteration.</li> <li>AC-7: The emulator build SHALL be runnable under QEMU (or a documented emulator) and produce observable LED visualization and distance measurement output in the serial console.</li> <li>AC-8: Documentation in <code>docs/design/</code> and <code>docs/requirements/</code> updated to reference simulator design artifacts and provide build/run verification steps.</li> </ul>"},{"location":"requirements/system-requirements/#compliance-and-validation","title":"Compliance and Validation","text":""},{"location":"requirements/system-requirements/#traceability","title":"Traceability","text":"<p>All requirements SHALL be traceable to:</p> <ul> <li>Design specifications in <code>docs/design/</code></li> <li>Implementation in <code>main/</code> and <code>components/</code></li> <li>Test cases in <code>docs/test/</code></li> </ul>"},{"location":"requirements/system-requirements/#validation-method","title":"Validation Method","text":"<ul> <li>Inspection: Code review and documentation review</li> <li>Testing: Unit tests, integration tests, system tests  </li> <li>Analysis: Static analysis and memory profiling</li> <li>Demonstration: Live system demonstration</li> </ul>"},{"location":"requirements/system-requirements/#change-management","title":"Change Management","text":"<ul> <li>Requirements changes tracked through Git version control</li> <li>Impact analysis performed for all requirement modifications</li> <li>Traceability updated when requirements change</li> <li>Approval required for mandatory requirement changes</li> </ul> <p>This document follows OpenFastTrack methodology for requirements engineering and traceability.</p>"},{"location":"requirements/web-server-requirements/","title":"Web Server Requirements","text":"<p>Document ID: REQ-WEB-ESP32-DISTANCE Version: 1.0 Date: 2025-09-16 Author: ESP32 Distance Project Team Parent Document: SRS-ESP32-DISTANCE  </p>"},{"location":"requirements/web-server-requirements/#document-purpose","title":"Document Purpose","text":"<p>This document specifies essential web server requirements for user interface, configuration, and WiFi setup functionality. Focus on user-facing features rather than implementation details.</p>"},{"location":"requirements/web-server-requirements/#requirements-dependencies","title":"Requirements Dependencies","text":"<ul> <li>REQ-WEB-2 depends on REQ-CFG-* (configuration parameters defined in configuration manager)</li> <li>REQ-WEB-4 depends on REQ-WEB-1, REQ-WEB-2, REQ-WEB-3 (navigation requires multiple pages)</li> </ul> <p>Note: Design documentation intentionally omitted for web server requirements as implementation primarily involves integrating existing ESP-IDF HTTP server components rather than novel development.</p>"},{"location":"requirements/web-server-requirements/#functional-requirements","title":"Functional Requirements","text":""},{"location":"requirements/web-server-requirements/#req-web-1-real-time-status-display","title":"REQ-WEB-1: Real-time Status Display","text":"<p>Type: User Interface Priority: Mandatory Description: The system SHALL provide a web page that displays current distance measurements with real-time updates for user monitoring.</p> <p>Rationale: Users need to monitor the device's operation and verify distance measurements remotely via web interface.</p> <p>Acceptance Criteria:</p> <ul> <li>AC-1: Main page SHALL display current distance measurement value</li> <li>AC-2: Distance values SHALL update in real-time with reasonable responsiveness</li> <li>AC-3: Page SHALL indicate measurement status (normal, error, out-of-range)</li> <li>AC-4: Page SHALL be accessible via web browser on mobile and desktop devices</li> </ul> <p>Verification: Access main page, verify distance values update correctly and status indicators work as expected.</p>"},{"location":"requirements/web-server-requirements/#req-web-2-configuration-interface","title":"REQ-WEB-2: Configuration Interface","text":"<p>Type: User Interface Priority: Mandatory Description: The system SHALL provide a web page for configuring device parameters as defined in the configuration management requirements (REQ-CFG-*).</p> <p>Rationale: Users need to adjust device settings remotely without firmware recompilation or physical access.</p> <p>Acceptance Criteria:</p> <ul> <li>AC-1: Configuration page SHALL allow modification of all parameters defined in REQ-CFG-1 through REQ-CFG-11</li> <li>AC-2: Parameter changes SHALL be validated before applying</li> <li>AC-3: Users SHALL be able to save configuration changes permanently</li> <li>AC-4: Users SHALL be able to reset configuration to factory defaults</li> <li>AC-5: Page SHALL provide feedback on successful or failed configuration updates</li> </ul> <p>Verification: Access configuration page, modify parameters, verify changes are saved and applied correctly.</p>"},{"location":"requirements/web-server-requirements/#req-web-3-wifi-network-selection-captive-portal","title":"REQ-WEB-3: WiFi Network Selection (Captive Portal)","text":"<p>Type: User Interface Priority: Mandatory Description: The system SHALL provide a captive portal interface for WiFi network selection and credential entry when operating in Access Point mode.</p> <p>Rationale: Users need a simple way to connect the device to their WiFi network without requiring technical knowledge or special software.</p> <p>Acceptance Criteria:</p> <ul> <li>AC-1: Captive portal SHALL automatically appear when users connect to device's AP</li> <li>AC-2: Portal SHALL scan and display available WiFi networks</li> <li>AC-3: Users SHALL be able to select network and enter credentials (SSID/password)</li> <li>AC-4: Portal SHALL provide feedback on connection success or failure</li> <li>AC-5: Device SHALL switch to Station mode after successful WiFi connection</li> </ul> <p>Verification: Connect to device AP, verify captive portal appears, test network selection and credential entry.</p>"},{"location":"requirements/web-server-requirements/#req-web-4-navigation-interface","title":"REQ-WEB-4: Navigation Interface","text":"<p>Type: User Interface Priority: Mandatory Description: The system SHALL provide navigation between web pages to allow users to easily switch between status display, configuration, and WiFi setup interfaces.</p> <p>Rationale: Users need intuitive navigation to access different device functions without remembering specific URLs.</p> <p>Acceptance Criteria:</p> <ul> <li>AC-1: All pages SHALL include navigation menu or links to other pages</li> <li>AC-2: Current page SHALL be clearly indicated in navigation</li> <li>AC-3: Navigation SHALL work consistently across mobile and desktop browsers</li> <li>AC-4: Users SHALL be able to access any page from any other page within 2 clicks</li> </ul> <p>Verification: Navigate between all pages, verify menu consistency and user experience across different devices.</p>"},{"location":"requirements/web-server-requirements/#requirements-summary","title":"Requirements Summary","text":"<p>Total Requirements: 4</p> <ul> <li>User Interface: 4 requirements (status display, configuration, WiFi setup, navigation)</li> </ul> <p>Priority Distribution:</p> <ul> <li>Mandatory: 4 requirements</li> </ul> <p>Key Benefits:</p> <ul> <li>Remote Monitoring: Users can check device status from anywhere on the network</li> <li>Easy Configuration: No firmware recompilation needed for parameter changes</li> <li>Simple WiFi Setup: Non-technical users can connect device to their network</li> <li>Intuitive Interface: Clear navigation between device functions</li> </ul> <p>Implementation Notes:</p> <ul> <li>Configuration parameters referenced from REQ-CFG-* to avoid duplication</li> <li>Focus on user experience rather than technical implementation</li> <li>Assumes existing ESP-IDF HTTP server and WiFi components</li> <li>Design details left to implementation phase for flexibility</li> </ul>"},{"location":"test/config-tests/","title":"Configuration Management Test Specification","text":"<p>Document ID: TST-CFG-ESP32-DISTANCE Version: 1.0 Date: 2025-07-24 Author: ESP32 Distance Project Team Requirements Traceability: REQ-CFG-1 through REQ-CFG-11 Design Traceability: DSN-CFG-1 through DSN-CFG-6  </p>"},{"location":"test/config-tests/#test-overview","title":"Test Overview","text":"<p>This document specifies test cases for the Configuration Management System, ensuring compliance with requirements and design specifications.</p>"},{"location":"test/config-tests/#test-categories","title":"Test Categories","text":"<ul> <li>Unit Tests: Individual function validation</li> <li>Integration Tests: Component interaction validation  </li> <li>System Tests: End-to-end functionality validation</li> <li>Performance Tests: Real-time requirements validation</li> <li>Reliability Tests: Error handling and recovery validation</li> </ul>"},{"location":"test/config-tests/#phase-1-magic-number-consolidation-tests","title":"Phase 1: Magic Number Consolidation Tests","text":""},{"location":"test/config-tests/#tst-cfg-1-configuration-header-validation","title":"TST-CFG-1: Configuration Header Validation","text":"<p>Covers: REQ-CFG-1, DSN-CFG-1 Type: Unit Test Priority: Mandatory  </p> <p>Test Objective: Verify all magic numbers consolidated into config.h</p> <p>Test Cases:</p>"},{"location":"test/config-tests/#tst-cfg-11-configuration-header-completeness","title":"TST-CFG-1.1: Configuration Header Completeness","text":"<p>Test Steps:</p> <ol> <li>Parse config.h and extract all #define statements</li> <li>Verify distance sensor configuration constants present</li> <li>Verify LED controller configuration constants present  </li> <li>Verify WiFi configuration constants present</li> <li>Verify web server configuration constants present</li> <li>Verify all constants include documentation comments</li> </ol> <p>Expected Results:</p> <ul> <li>All configuration categories represented in config.h</li> <li>Each constant includes value and comment explaining purpose</li> <li>Constants follow naming convention:</li> </ul> <pre><code>DEFAULT_&lt;CATEGORY&gt;_&lt;NAME&gt;\n</code></pre>"},{"location":"test/config-tests/#tst-cfg-12-source-code-magic-number-elimination","title":"TST-CFG-1.2: Source Code Magic Number Elimination","text":"<p>Test Steps:</p> <ol> <li>Scan all .c files in main/ directory for numeric literals</li> <li>Scan all .c files in components/ directory for numeric literals</li> <li>Exclude acceptable literals (0, 1, NULL, array indices)</li> <li>Verify remaining literals reference config.h constants</li> </ol> <p>Expected Results:</p> <ul> <li>No magic numbers found in main/main.c</li> <li>No magic numbers found in main/wifi_manager.c  </li> <li>No magic numbers found in main/web_server.c</li> <li>No magic numbers found in components/distance_sensor/</li> <li>No magic numbers found in components/led_controller/</li> </ul>"},{"location":"test/config-tests/#tst-cfg-2-source-code-migration-validation","title":"TST-CFG-2: Source Code Migration Validation","text":"<p>Covers: REQ-CFG-2, DSN-CFG-1 Type: Integration Test Priority: Mandatory  </p> <p>Test Objective: Verify source files correctly use centralized configuration</p>"},{"location":"test/config-tests/#tst-cfg-21-build-system-validation","title":"TST-CFG-2.1: Build System Validation","text":"<p>Test Steps:</p> <ol> <li>Build project with config.h modifications</li> <li>Verify all source files compile without errors</li> <li>Verify all config.h constants resolved at compile time</li> <li>Check for unused configuration constants</li> </ol> <p>Expected Results:</p> <ul> <li>Clean build with no compilation warnings</li> <li>All configuration constants referenced in code</li> <li>No undefined references to configuration values</li> </ul>"},{"location":"test/config-tests/#phase-2-runtime-configuration-tests","title":"Phase 2: Runtime Configuration Tests","text":""},{"location":"test/config-tests/#tst-cfg-3-configuration-data-structure-tests","title":"TST-CFG-3: Configuration Data Structure Tests","text":"<p>Covers: REQ-CFG-3, DSN-CFG-3 Type: Unit Test Priority: Mandatory  </p>"},{"location":"test/config-tests/#tst-cfg-31-structure-size-validation","title":"TST-CFG-3.1: Structure Size Validation","text":"<p>Test Steps:</p> <ol> <li>Verify sizeof(config_nvs_storage_t) equals 64 bytes</li> <li>Verify structure alignment and padding</li> <li>Verify all fields accessible at expected offsets</li> </ol> <p>Expected Results:</p> <ul> <li>Structure size exactly 64 bytes for NVS efficiency</li> <li>No unexpected padding between fields</li> <li>All fields aligned properly for ESP32 architecture</li> </ul>"},{"location":"test/config-tests/#tst-cfg-32-default-value-consistency","title":"TST-CFG-3.2: Default Value Consistency","text":"<p>Test Steps:</p> <ol> <li>Initialize system_config_t with default values</li> <li>Compare with compile-time constants in config.h</li> <li>Verify all default values within specified ranges</li> </ol> <p>Expected Results:</p> <ul> <li>Runtime defaults match compile-time constants</li> <li>All default values pass validation checks</li> <li>No inconsistencies between config.h and runtime structure</li> </ul>"},{"location":"test/config-tests/#tst-cfg-4-nvs-storage-tests","title":"TST-CFG-4: NVS Storage Tests","text":"<p>Covers: REQ-CFG-4, DSN-CFG-2 Type: Integration Test Priority: Mandatory  </p>"},{"location":"test/config-tests/#tst-cfg-41-nvs-persistence-test","title":"TST-CFG-4.1: NVS Persistence Test","text":"<p>Test Steps:</p> <ol> <li>Save configuration to NVS</li> <li>Reset ESP32 (software reset)</li> <li>Load configuration from NVS</li> <li>Verify all values match saved configuration</li> </ol> <p>Expected Results:</p> <ul> <li>Configuration survives device reset</li> <li>All parameter values preserved exactly</li> <li>No data corruption during power cycle</li> </ul>"},{"location":"test/config-tests/#tst-cfg-42-nvs-corruption-handling","title":"TST-CFG-4.2: NVS Corruption Handling","text":"<p>Test Steps:</p> <ol> <li>Corrupt NVS configuration data (modify checksum)</li> <li>Attempt to load configuration</li> <li>Verify error detection and fallback to defaults</li> <li>Verify system continues normal operation</li> </ol> <p>Expected Results:</p> <ul> <li>Corruption detected via checksum mismatch</li> <li>Automatic fallback to default configuration</li> <li>Error logged for diagnostic purposes</li> <li>System remains operational with defaults</li> </ul>"},{"location":"test/config-tests/#tst-cfg-5-configuration-api-tests","title":"TST-CFG-5: Configuration API Tests","text":"<p>Covers: REQ-CFG-5, REQ-CFG-6, DSN-CFG-4 Type: Unit Test Priority: Mandatory  </p>"},{"location":"test/config-tests/#tst-cfg-51-api-function-validation","title":"TST-CFG-5.1: API Function Validation","text":"<p>Test Steps:</p> <ol> <li>Test config_init() return value and initialization</li> <li>Test config_load() with valid and invalid NVS data</li> <li>Test config_save() with valid and invalid parameters</li> <li>Test config_factory_reset() operation</li> <li>Test all getter functions for thread safety</li> <li>Test all setter functions with range validation</li> </ol> <p>Expected Results:</p> <ul> <li>All API functions return appropriate esp_err_t codes</li> <li>Invalid parameters rejected with ESP_ERR_INVALID_ARG</li> <li>Thread-safe access verified under concurrent load</li> <li>Range validation prevents invalid configurations</li> </ul>"},{"location":"test/config-tests/#tst-cfg-52-parameter-validation-tests","title":"TST-CFG-5.2: Parameter Validation Tests","text":"<p>Test Steps:</p> <ol> <li>Test distance range validation (min &lt; max)</li> <li>Test parameter boundary conditions (min, max, invalid)</li> <li>Test inter-parameter validation logic</li> <li>Test validation error message generation</li> </ol> <p>Expected Results:</p> <ul> <li>Boundary values (5.0, 100.0 for distance_min) accepted</li> <li>Out-of-range values (4.9, 100.1) rejected  </li> <li>Invalid combinations (min &gt; max) rejected</li> <li>Clear error messages generated for invalid inputs</li> </ul>"},{"location":"test/config-tests/#phase-3-web-interface-tests","title":"Phase 3: Web Interface Tests","text":""},{"location":"test/config-tests/#tst-cfg-6-web-configuration-interface-tests","title":"TST-CFG-6: Web Configuration Interface Tests","text":"<p>Covers: REQ-CFG-7, REQ-CFG-8, DSN-CFG-5 Type: System Test Priority: High  </p>"},{"location":"test/config-tests/#tst-cfg-61-web-settings-page-test","title":"TST-CFG-6.1: Web Settings Page Test","text":"<p>Test Steps:</p> <ol> <li>Navigate to /settings page in web browser</li> <li>Verify all configuration parameters displayed</li> <li>Verify current values pre-populated in form fields</li> <li>Test form submission with valid parameters</li> <li>Test form submission with invalid parameters</li> <li>Verify success/error feedback to user</li> </ol> <p>Expected Results:</p> <ul> <li>Settings page loads without errors</li> <li>All runtime parameters accessible via web form</li> <li>Current configuration values displayed correctly</li> <li>Valid changes accepted and applied</li> <li>Invalid changes rejected with user feedback</li> </ul>"},{"location":"test/config-tests/#tst-cfg-62-real-time-preview-test","title":"TST-CFG-6.2: Real-time Preview Test","text":"<p>Test Steps:</p> <ol> <li>Access settings page and modify LED brightness</li> <li>Click \"Preview\" button</li> <li>Verify LED strip brightness changes immediately</li> <li>Wait for preview timeout (30 seconds)</li> <li>Verify automatic revert to previous brightness</li> <li>Test \"Apply\" button to make changes permanent</li> </ol> <p>Expected Results:</p> <ul> <li>Preview changes visible immediately on LED strip</li> <li>Preview timeout reverts to saved configuration</li> <li>Apply button makes preview changes permanent</li> <li>Cancel button reverts to saved configuration</li> </ul>"},{"location":"test/config-tests/#tst-cfg-7-configuration-backuprestore-tests","title":"TST-CFG-7: Configuration Backup/Restore Tests","text":"<p>Covers: REQ-CFG-9, DSN-CFG-5 Type: System Test Priority: Low  </p>"},{"location":"test/config-tests/#tst-cfg-71-configuration-export-test","title":"TST-CFG-7.1: Configuration Export Test","text":"<p>Test Steps:</p> <ol> <li>Configure system with non-default values</li> <li>Click \"Export Configuration\" button</li> <li>Verify JSON file downloaded</li> <li>Parse JSON and validate configuration data</li> <li>Verify JSON includes metadata (version, timestamp)</li> </ol> <p>Expected Results:</p> <ul> <li>JSON file downloads successfully</li> <li>JSON contains all configuration parameters</li> <li>Configuration values match current system settings</li> <li>Metadata included for version tracking</li> </ul>"},{"location":"test/config-tests/#tst-cfg-72-configuration-import-test","title":"TST-CFG-7.2: Configuration Import Test","text":"<p>Test Steps:</p> <ol> <li>Export current configuration as baseline</li> <li>Modify configuration via settings page</li> <li>Import baseline configuration JSON file</li> <li>Verify configuration restored to baseline values</li> <li>Test import with invalid JSON (should reject)</li> </ol> <p>Expected Results:</p> <ul> <li>Valid JSON import restores configuration correctly</li> <li>Invalid JSON rejected with error message</li> <li>Import operation atomic (success or no change)</li> <li>Configuration validation applied during import</li> </ul>"},{"location":"test/config-tests/#performance-tests","title":"Performance Tests","text":""},{"location":"test/config-tests/#tst-cfg-8-configuration-performance-tests","title":"TST-CFG-8: Configuration Performance Tests","text":"<p>Covers: REQ-CFG-10, DSN-CFG-4 Type: Performance Test Priority: Mandatory  </p>"},{"location":"test/config-tests/#tst-cfg-81-startup-performance-test","title":"TST-CFG-8.1: Startup Performance Test","text":"<p>Test Steps:</p> <ol> <li>Measure time from system boot to config_init() completion</li> <li>Measure time for config_load_from_nvs() operation</li> <li>Verify total configuration loading time</li> <li>Test under various NVS data conditions</li> </ol> <p>Expected Results:</p> <ul> <li>Configuration initialization completes within 100ms</li> <li>NVS load operation completes within 50ms</li> <li>Performance consistent across multiple test runs</li> <li>No performance degradation with configuration size</li> </ul>"},{"location":"test/config-tests/#tst-cfg-82-runtime-performance-test","title":"TST-CFG-8.2: Runtime Performance Test","text":"<p>Test Steps:</p> <ol> <li>Measure config_get_*() function call latency</li> <li>Measure config_save_to_nvs() operation time</li> <li>Test concurrent access performance</li> <li>Verify no impact on sensor measurement timing</li> </ol> <p>Expected Results:</p> <ul> <li>Configuration getter functions complete within 1ms</li> <li>Configuration save operations complete within 500ms</li> <li>Concurrent access does not cause blocking</li> <li>Sensor measurements maintain 10Hz frequency during config operations</li> </ul>"},{"location":"test/config-tests/#reliability-tests","title":"Reliability Tests","text":""},{"location":"test/config-tests/#tst-cfg-9-configuration-reliability-tests","title":"TST-CFG-9: Configuration Reliability Tests","text":"<p>Covers: REQ-CFG-11, DSN-CFG-2 Type: Reliability Test Priority: Mandatory  </p>"},{"location":"test/config-tests/#tst-cfg-91-power-loss-simulation","title":"TST-CFG-9.1: Power Loss Simulation","text":"<p>Test Steps:</p> <ol> <li>Initiate configuration save operation</li> <li>Simulate power loss at various points during save</li> <li>Restart system and attempt configuration load</li> <li>Verify NVS integrity and error handling</li> </ol> <p>Expected Results:</p> <ul> <li>NVS corruption detected if power lost during write</li> <li>System recovers gracefully with default configuration</li> <li>No system crash or hang due to NVS corruption</li> <li>Error logged for diagnostic purposes</li> </ul>"},{"location":"test/config-tests/#tst-cfg-92-network-disconnection-test","title":"TST-CFG-9.2: Network Disconnection Test","text":"<p>Test Steps:</p> <ol> <li>Access web configuration interface</li> <li>Disconnect WiFi network during configuration update</li> <li>Verify web interface handles disconnection gracefully</li> <li>Reconnect and verify configuration state</li> </ol> <p>Expected Results:</p> <ul> <li>Web interface detects network disconnection</li> <li>Configuration changes not lost during network interruption</li> <li>Graceful error handling without system crash</li> <li>Configuration state consistent after reconnection</li> </ul>"},{"location":"test/config-tests/#test-automation","title":"Test Automation","text":""},{"location":"test/config-tests/#github-copilot-test-implementation","title":"GitHub Copilot Test Implementation","text":"<p>Implementation Scope: Automated test suite generation using AI assistance</p> <p>Copilot Assignment:</p> <ol> <li>Unit Test Generation: Implement automated tests for all configuration API functions</li> <li>Integration Test Scripts: Create test scripts for NVS operations and web interface</li> <li>Performance Benchmarks: Generate performance measurement code</li> <li>Test Data Generation: Create test data sets for boundary condition testing</li> </ol> <p>Human Validation:</p> <ul> <li>Review test coverage completeness</li> <li>Validate test case correctness</li> <li>Approve test automation framework</li> <li>Verify performance benchmark accuracy</li> </ul> <p>This document follows OpenFastTrack methodology for test traceability.</p>"},{"location":"workshop/","title":"\ud83d\udc4b Welcome to the ESP32 Distance Sensor Workshop!","text":"<p>Ready to get hands-on with embedded development? This workshop is designed to get you coding on real hardware in just 5 minutes\u2014no complicated setup, no frustration!</p> <p>If you have a private GitHub account and the required hardware on your desk, you can:</p> <ol> <li>Fork this project</li> <li>Create a new Codespace (just a few clicks)</li> <li>Wait ~5 minutes for setup (all tools &amp; dependencies are installed automatically)</li> <li>Activate the ESP-IDF Web plugin in your codespace (required for direct target connection)</li> <li>Start coding and flashing your ESP32\u2014you're productive immediately!</li> </ol> <p>It's really that easy: From zero to coding on real hardware in minutes. No local installs, no driver hassle, no toolchain pain.</p>"},{"location":"workshop/#how-to-get-started","title":"\ud83d\udea6 How to get started","text":"<p>All you need is: - A GitHub account (free or Pro) - The required hardware (see hardware setup) - A supported browser (see prerequisites)</p> <p>Then follow our Getting Started Guide for step-by-step instructions!</p>"},{"location":"workshop/#what-youll-learn","title":"\ud83d\udca1 What you'll learn","text":"<ul> <li>Modern embedded development with ESP32, FreeRTOS, and ESP-IDF</li> <li>Using GitHub Codespaces for instant cloud-based dev environments</li> <li>Leveraging Copilot and coding agents for rapid prototyping</li> <li>Building, flashing, and debugging on emulation and real hardware\u2014no prior experience required!</li> </ul>"},{"location":"workshop/#workshop-materials","title":"\ud83d\udee0\ufe0f Workshop Materials","text":"<p>All exercises, guides, and resources are in this folder (or at least thats the Idea). If you get stuck, ask questions, open an issue, or join the discussion. This is a friendly space for makers, learners, and tinkerers of all levels.</p> <p>Have fun, experiment, and happy coding! \ud83c\udf89 9. Use Copilot/Coding-Agents for assistance </p> <pre><code>Leverage GitHub Copilot and Copilot Chat to help with code suggestions, explanations, and troubleshooting as you work through the tasks.\n</code></pre>"},{"location":"workshop/exercises/","title":"Workshop Exercises","text":"<p>The focus of these exercises is to utilize the GitHub Coding Agent. If you do not have access to the GitHub Coding Agent, feel free to use Agent Mode instead.</p>"},{"location":"workshop/exercises/#exercise-a-extend-led-patterns","title":"Exercise A: Extend LED Patterns","text":"<p>Before starting, follow the steps in the hardware setup and getting started sections of the documentation to ensure your ESP32, HC-SR04 sensor, and WS2812 LED strip are properly connected and the firmware is flashed successfully. Make sure you have also completed the software installation steps in the Getting Started guide, so you can compile the project and run it on real hardware or in the emulator (see emulator setup).</p>"},{"location":"workshop/exercises/#prompt-for-copilot-chat","title":"Prompt for Copilot Chat","text":"<p>Open the GitHub Copilot Chat window in your codespace and enter the following prompt:</p> <pre><code>I want you to create an issue on GitHub that we will then assign to the GitHub coding agent: We want to change the behavior of the system. Right now, when the measurement is below the minimum threshold, the first LED is red. However, I want every 10th LED to flash red with a 1-second frequency. Please update the requirements document ([requirements display](../requirements/display-requirements.md)), update and extend the design document ([design docs](../design/display-design.md)), and implement the solution.\n</code></pre> <p>This will guide Copilot Chat Agent to generate a GitHub issue using the GitHub MCP server, describing the new behavior, referencing the requirements and design documentation, and requesting both documentation and implementation updates.</p>"},{"location":"workshop/exercises/#assigning-the-issue","title":"Assigning the Issue","text":"<p>Now you have two options to proceed:</p> <ol> <li> <p>Assign via GitHub Website     Go to your repository's \"Issues\" tab on GitHub, locate the newly created issue, and manually assign it to the GitHub Coding Agent (or the appropriate automation user/bot).</p> </li> <li> <p>Assign via Copilot Chat Prompt     Alternatively, enter the following prompt in Copilot Chat to request assignment:</p> <pre><code>Please assign the new issue to the GitHub coding agent.\n</code></pre> </li> </ol> <p>Either method will ensure the issue is routed to the coding agent for implementation.</p>"},{"location":"workshop/exercises/#watching-the-coding-agents-pull-request","title":"Watching the Coding Agent's Pull Request","text":"<p>Once the issue is assigned, the GitHub Coding Agent will automatically begin work by creating a new pull request (PR). To observe the process:</p> <ol> <li>Navigate to the Pull Requests tab in your repository on GitHub.</li> <li>Locate the new PR created by the Coding Agent\u2014its title will reference the issue and describe the requested behavior change.</li> <li>Monitor the PR timeline:<ul> <li>The agent will set up the development environment.</li> <li>Updates will be made to the requirements document (<code>display-requirements.md</code>), design document (<code>display-design.md</code>), and relevant code.</li> <li>The agent will commit and push changes, referencing requirement IDs for traceability.</li> <li>Automated or manual tests will be run to verify the new behavior.</li> <li>The agent will request your review when the PR is ready.</li> </ul> </li> </ol> <p>This process typically takes 10\u201315 minutes. You can follow progress in real time by viewing the PR's conversation, commits, and checks tabs. Once notified, review the changes and provide feedback or approve the PR as needed.</p>"},{"location":"workshop/exercises/#testing-and-reviewing-the-solution","title":"Testing and Reviewing the Solution","text":"<p>Back in VS Code, you can check out the GitHub Coding Agent's branch, build the project, and\u2014fingers crossed\u2014flash it to your device for testing.</p> <p>Be sure to review the updated requirements and design documents. The Coding Agent has established bidirectional traceability from requirements to design to code and back, ensuring every change is documented and linked.</p> <p>You may wonder why this is the case, as there was nothing in the prompt explicitly asking Copilot to do so.</p> <p>Well, there is:</p> <p>All implementation and documentation changes must follow the project's ESP32 Coding Standards and commit message guidelines.  </p> <p>Check them out in <code>.github/</code>.</p> <p>Note that previously, there was no timing behavior for the output LEDs. The Coding Agent not only updated the LED pattern but also implemented a time-based flashing algorithm that does not interfere with the task's blocking call to receive the next measurement from the distance sensor. This ensures the new flashing behavior is robust and does not impact sensor responsiveness.</p>"},{"location":"workshop/exercises/#creative-led-pattern-ideas","title":"Creative LED Pattern Ideas","text":"<p>Want to go beyond the default LED behavior? Try these creative extensions:</p> <ul> <li>Distance-based color gradients: Map measured distance to a color spectrum (e.g., green for close, yellow for mid-range, red for far).</li> <li>Animated effects: Make LEDs smoothly transition colors as the distance changes, or create a \"wave\" effect along the strip.</li> <li>Disco mode: Implement a flashing or cycling rainbow pattern, or have random LEDs blink in sync with a timer.</li> <li>Threshold alerts: Flash all LEDs rapidly if an object is too close or too far.</li> <li>Custom patterns: Design your own logic\u2014such as alternating colors, pulsing brightness, or displaying a progress bar.</li> </ul> <p>Feel free to experiment and implement your own ideas.</p>"},{"location":"workshop/exercises/#exercise-b-improve-distance-filtering-and-timeouts","title":"Exercise B: Improve Distance Filtering and Timeouts","text":"<p>Not only single-file actions can be handled by the Coding Agent. This project previously used floating-point arithmetic, and with one issue and the Coding Agent implementing the change, the entire logic is now in fixed-point integer. Prefer floating point? Go ahead\u2014describe what you want in an issue...</p>"},{"location":"workshop/exercises/#exercise-c-led-animation-on-the-website","title":"Exercise C: LED Animation on the Website","text":"<p>Let me know who gets this done first!</p>"},{"location":"workshop/gettingstartet/","title":"Getting started","text":"<p>This guide walks you through all steps needed to prepare for the ESP32 Distance Sensor Workshop\u2014from forking the repository to running the system on real hardware. Each step is explained in detail, with screenshots and tips for a smooth start.</p> <p>Hardware Setup: This guide focuses on software and Codespace setup. For step-by-step instructions on wiring the ESP32, HC-SR04 sensor, and WS2812 LED strip, see Hardware Setup Guide.</p>"},{"location":"workshop/gettingstartet/#fork-the-repository-one-time","title":"Fork the repository (one-time)","text":"<p>Start by forking forkingthe main repository to your own GitHub account. This gives you a personal copy where you can make changes freely.</p> <p> </p> <p>Press \"Create a new fork\". On the next page, simply press \"Create fork\".</p> <p></p> <p>Tip: You only need to fork once. All your workshop work will happen in your fork.</p>"},{"location":"workshop/gettingstartet/#optional-break-the-link-to-upstream","title":"(Optional) Break the link to upstream","text":"<p>By default, your fork knows about the original (\"upstream\") repository. If you want to avoid accidentally creating pull requests to the upstream project, you can remove the upstream remote. From your terminal simply enter:</p> <pre><code>git remote remove upstream\n</code></pre> <p>You can always re-add it later if you want to sync changes.</p>"},{"location":"workshop/gettingstartet/#create-and-open-a-codespace-from-your-fork","title":"Create and open a Codespace from your fork","text":"<p>Before you can open a Codespace, you need to create one in your forked repository. This is a one-time setup (unless you delete your Codespace and need to recreate it).</p> <ol> <li>In your forked repository, click the green \"Code\" button.</li> <li>Click on Codespaces</li> <li>Select \"Create codespace on main\".</li> </ol> <p></p> <p>Note: The initial Codespace setup can take several minutes (typically around 5 minutes). During this time, all required dependencies\u2014including the full ESP-IDF toolchain, components (about 1GB of data), and the VS Code ESP-IDF extensions\u2014are automatically downloaded and installed for you.  </p> <p>Once setup is complete, your Codespace will open in the browser with everything ready to go\u2014no manual installation required. It\u2019s designed to be a true out-of-the-box experience (well, at least it should be \ud83d\ude42).</p> <p>Hint for next time: You can quickly reopen your Codespace from the GitHub repository page\u2014just click the green \"Code\" button and select your existing Codespace. No need to recreate it each time!</p>"},{"location":"workshop/gettingstartet/#optional-personalize-your-vs-code-environment","title":"(Optional) Personalize your VS Code environment","text":"<p>Once your Codespace is open, you can customize Visual Studio Code to your preferences:</p> <ul> <li>Switch to VS Code for Web: If you prefer, open your Codespace in the browser using vscode.dev for a lightweight experience.</li> <li>Choose a Theme: Press Ctrl+K Ctrl+T (or open the Command Palette with F1 and type \"Color Theme\") to select a light or dark theme.</li> <li>Configure Editor Settings: Adjust font size, tab spacing, or enable line numbers via the gear icon in the lower left or by editing your settings.</li> <li>Install Extensions: Browse and install recommended extensions (like C/C++, Markdown, or GitHub Copilot) from the Extensions sidebar.</li> </ul> <p>Tip: These settings are saved in your Codespace and will persist for future sessions.</p>"},{"location":"workshop/gettingstartet/#explore-the-codespace-interface","title":"Explore the Codespace interface","text":"<p>Take a moment to get comfortable with the Codespace environment:</p> <ul> <li> <p>Left Sidebar Icons: </p> <ul> <li>Explorer: Browse and open project files and folders.</li> <li>Search: Find text or symbols across the codebase.</li> <li>Source Control: Manage Git version control, view changes, and commit.</li> <li>Run &amp; Debug: Launch and debug tasks.</li> <li>Extensions: Discover and install VS Code extensions.</li> <li>GitHub: Access pull requests and issues.</li> <li>ESP-IDF Explorer: Manage ESP32-specific tasks and configurations.</li> </ul> </li> <li> <p>Bottom Bar: </p> <ul> <li>Look for the Build icon at the bottom\u2014click it to compile the project. The build process typically takes 1\u20132 minutes in the Codespace.</li> </ul> </li> </ul> <p>Tip: Don\u2019t hesitate to try out the build process now! This will verify your Codespace is set up correctly and help you spot any issues early.</p>"},{"location":"workshop/gettingstartet/#important-post-launch-install-esp-idf-web-extension","title":"IMPORTANT !! \u26a1 Post-launch: Install ESP-IDF Web Extension","text":"<p>If you don't see the \"Flash\" and \"Monitor\" buttons  at the bottom of VS Code, you'll need to install the ESP-IDF Web extension for your browser. This extension enables direct serial communication between your Codespace and the ESP32 hardware using your bowsers serial port extention.</p>"},{"location":"workshop/gettingstartet/#supported-browsers-for-serial-port-access","title":"Supported Browsers for Serial Port Access","text":"<p>Supported Browsers: The ESP-IDF Web extension and browser-based serial port access are supported in the following browsers:</p> <ul> <li>Google Chrome (v89+)</li> <li>Microsoft Edge (v89+)</li> <li>Opera (v75+)</li> <li>Arc Browser</li> </ul> <p>Not supported: Firefox, Safari, and most mobile browsers do not support the Web Serial API required for direct device communication.</p> <p>For the best experience, use the latest version of Chrome or Edge on desktop.</p> <p>To install: 1. Click the Extensions icon in the left sidebar. 2. Search for ESP-IDF Web the extension should be pre-installed . 3. Click the green Install in browser button.</p> <p></p> <p>You may be prompted to grant access for the extension to communicate with your device \u2014 accept this to enable flashing, monitoring and debugging.</p> <p>Note: This step is required for browser-based Codespaces to connect, flash, and monitor your ESP32 board.</p> <p>Once installed, the \"Flash\" and \"Monitor\" buttons will appear and you can proceed with programming your device.</p>"},{"location":"workshop/gettingstartet/#familiarize-yourself-with-the-repository","title":"Familiarize yourself with the repository","text":"<p>Explore the project structure and key components. Understand where main application logic, components, and documentation are located.</p> <p></p>"},{"location":"workshop/gettingstartet/#build-the-project","title":"Build the project","text":"<p>Use the \"Build\" button at the very bottom of the VS Code window. This compiles the firmware using ESP-IDF in the Codespace.</p> <p>After 1\u20132 minutes, you should see the build result in the terminal panel at the bottom. Look for a message like \"Build complete\" or \"Project build success\".</p> <p></p>"},{"location":"workshop/gettingstartet/#flash-the-firmware","title":"Flash the firmware","text":"<p>After a successful build, connect your ESP Board and reset it to flash mode. (see Hardware setp)</p> <p></p> <p>click the \"Flash\" button (also at the bottom of VS Code). This uploads the firmware to your connected ESP32 board.</p>"},{"location":"workshop/gettingstartet/#select-serial-port","title":"Select serial port","text":"<p>When prompted, you\u2019ll see a message like:</p> <p><code>&lt;yourcodespace&gt;.github.dev wants to connect to a serial port</code> Select the port of your device and press Connect.</p> <p>Choose the correct serial port for your ESP32 board and confirm. This allows the Codespace to communicate directly with your hardware for flashing and monitoring.</p> <p></p> <p>Now, you'll see the flash process in action: the ESP32's onboard flash memory will be erased and the new firmware programmed. Progress is shown in the terminal panel. When complete, you'll see a message like \"ESP-IDF Web: Flashing done.\"</p> <p></p>"},{"location":"workshop/gettingstartet/#monitor-the-device","title":"Monitor the device","text":"<p>Once flashing is complete, click the \"Monitor\" button (bottom of VS Code) to open a serial monitor. This lets you observe device logs, sensor readings, and debug output in real time.</p> <p></p>"},{"location":"workshop/gettingstartet/#experience-the-running-system","title":"Experience the running system","text":"<p>With the device running, observe the LED strip responding to distance measurements. Use your phone or laptop to connect to the ESP32's WiFi access point, open the captive portal, and access the web interface. You can experiment with connecting the ESP32 to your own network or adjust range settings via the web UI.</p>"},{"location":"workshop/gettingstartet/#proceed-to-workshop-exercises","title":"Proceed to Workshop Exercises","text":"<p>After exploring the live system, continue with the workshop exercises (e.g., extending LED patterns, improving distance measurement, testing HTTPS features).</p>"},{"location":"workshop/gettingstartet/#need-help","title":"Need Help?","text":"<p>If you get stuck, ask questions, collaborate with others, and make the most of this workshop, the tools and resources provided. Happy coding! \ud83d\ude80</p>"},{"location":"workshop/hardwaresetup/","title":"Hardware Setup","text":"<p>This guide explains the hardware required for the ESP32 Distance Sensor Workshop and how to wire up the components.</p> <p></p>"},{"location":"workshop/hardwaresetup/#required-hardware","title":"Required hardware","text":""},{"location":"workshop/hardwaresetup/#esp32-wroom-32f-development-board","title":"ESP32 WROOM-32F development board","text":"<p>Note: The board shown in the picture is an ESP32 Relay X2, but any ESP32 development board can be used for this workshop.</p> <p>The ESP32 Relay X2 board features two onboard relays and supports a wide input voltage range from 5V to 60V, making it suitable for 12V, 24V, or 48V systems such as solar power batteries. However, it does not include a built-in USB serial connector, so you will need an external USB-to-serial adapter for programming and debugging. If you use a different ESP32 development board with onboard USB, the external adapter is not required.</p> <p></p>"},{"location":"workshop/hardwaresetup/#usb-serial-adapter","title":"USB serial adapter","text":"<p>Here we see a CH340 USB-A to TTL-Serial adapter. Many ESP32 development boards already include a built-in USB-to-serial adapter, so this external adapter is not required if your board has onboard USB connectivity. Use the external adapter only if your ESP32 board lacks a native USB port for programming.,</p> <p></p>"},{"location":"workshop/hardwaresetup/#hc-sr04-ultrasonic-distance-sensor","title":"HC-SR04 ultrasonic distance sensor","text":"<p>The HC-SR04 ultrasonic distance sensor works by emitting an ultrasonic pulse from its trigger pin and then waiting for the echo signal to return. The sensor itself does not calculate distance; it simply provides a short trigger pulse input and then outputs a pulse on the echo pin whose duration corresponds to the time taken for the sound to travel to an object and back. The ESP32 microcontroller measures this echo pulse duration using a hardware timer and then calculates the distance based on the speed of sound. This approach enables accurate, non-contact distance measurement for robotics, automation, and IoT applications.</p> <p></p>"},{"location":"workshop/hardwaresetup/#ws2812-addressable-led-strip-40-leds-recommended","title":"WS2812 addressable LED strip (40 LEDs recommended)","text":"<p>The WS2812 is an addressable RGB LED strip, often called \"NeoPixels,\" where each LED can be individually controlled for color and brightness using a single data line. For this workshop, a strip with 40 LEDs is recommended, providing a clear and colorful visual display of measured distances.</p> <p></p>"},{"location":"workshop/hardwaresetup/#wiring-overview","title":"Wiring overview","text":"<ul> <li>Connect the HC-SR04 trigger pin to the GPIO13 PIN and the echo pin to GPIO12 pin on the ESP32. </li> <li>Connect the HC-SR04 power to the 5V pin and ground to any GND pin of the ESP32 board. For details, see requirements.</li> <li>Connect the WS2812 data line to the ESP32 GPIO12 pin (see also requirements).</li> <li>Connect the WS2812 ground to a GND pin</li> <li>Connect the WS2812 5V Vcc to ... well ... here's the thing the Relay X2 has no additional 5V pin available, but wait, there is a 3,3 V pin and it works just fine.</li> <li>Connect the ESP32 module to GND and 5V of the USP Serial Adapter and crossconnect the two TX x RX lines <pre><code>    +-------------------+         +-------------------------+\n    |   USB Serial      |         |      ESP32 Board        |\n    |   Adapter (CH340) |         |    (ESP32 WROOM-32F)    |\n    +-------------------+         +-------------------------+\n    |                   |         |                         |\n    |   5V   -----------+---------+--- 5V                   |\n    |   GND  -----------+---------+--- GND                  |\n    |                   |         |                         |\n    |   RX   -----------+--\\   /--+--- RX (GPIO3/U0RXD)     |\n    |                   |   \\ /   |                         |\n    |                   |   / \\   |                         |\n    |   TX   -----------+--/   \\--+--- TX (GPIO1/U0TXD)     |\n    |                   |         |                         |\n    +-------------------+         +-------------------------+\n</code></pre> Note: TX on the adapter connects to RX on the ESP32, and RX on the adapter connects to TX on the ESP32 (crossed lines).</li> </ul> <p>Pro Tip: Double-check your wiring before plugging the USB Serial Adapter into your PC or Laptop, sounds trivial but...... better save than sorry</p>"},{"location":"workshop/prerequisites/","title":"Workshop Prerequisites","text":""},{"location":"workshop/prerequisites/#sw-and-licenses","title":"\ud83d\udda5\ufe0f SW and Licenses","text":"<ul> <li> <p>A Supported Browser</p> <p>To use browser-based serial port access and the ESP-IDF Web extension, you must use a browser that supports the Web Serial API. Supported browsers include the latest versions of Google Chrome, Microsoft Edge, Opera, and Arc Browser.</p> <p>Firefox, Safari, and most mobile browsers are not supported for direct device communication. For the best experience, use Chrome or Edge on desktop.</p> </li> <li> <p>GitHub Account</p> <p>You will need a GitHub account to participate in the workshop. If you do not already have one, you can sign up for free at github.com. The free GitHub account is sufficient for all workshop activities, including accessing the repository, using Codespaces (within the free usage quota), and collaborating with others. </p> </li> <li> <p>GitHub Copilot Subscription</p> <p>GitHub Copilot is an AI-powered coding assistant that helps you write code faster and with fewer errors by providing real-time code suggestions, explanations, and even generating entire functions or files. It is integrated into VS Code and Codespaces, making it easy to use during the workshop.</p> <p>For most workshop tasks, the free tier of Copilot is sufficient you can use Chat, Edit and Agent mode in VSCode. However, to access advanced features such as the Copilot coding agent, you will need at least a GitHub Copilot Pro subscription. The Pro subscription is available as a 30-day free trial, allowing you to fully explore Copilot's capabilities during the workshop without any cost.</p> </li> <li> <p>GitHub Codespaces</p> <p>GitHub Codespaces provides a cloud-based development environment pre-configured for this project. It allows you to start coding instantly in your browser or VS Code, with all dependencies (ESP-IDF, toolchain, libraries) already set up. No local installation is required. </p> </li> </ul> <p>Everything else is provided inside the preconfigured Codespaces working environment.</p>"},{"location":"workshop/prerequisites/#hardware","title":"\ud83d\udee0\ufe0f Hardware","text":"<ul> <li> <p>ESP32 WROOM-32F Development Board</p> <p>The workshop is designed for the ESP32 WROOM-32F (4MB flash) module. This board provides WiFi/Bluetooth connectivity, multiple GPIOs, and is compatible with the HC-SR04 ultrasonic sensor and WS2812 LED strip. If you have a different ESP32 variant, most exercises will still work, but pin assignments and memory constraints may vary. No hardware is required for simulation or code review tasks, but hands-on flashing and sensor/LED testing require a physical ESP32 board.</p> </li> <li> <p>HC-SR04 Ultrasonic Distance Sensor</p> <p>Used for measuring distance. Connects to ESP32 GPIOs (requires 5V power, but logic-level shifting is handled on most dev boards).</p> </li> <li> <p>WS2812 Addressable LED Strip (40 LEDs recommended)</p> <p>Used for visualizing distance measurements. Connects to a single ESP32 GPIO (data line).</p> </li> <li> <p>USB serial adapter for flashing </p> <p>Required for uploading firmware and running code on real hardware. Most ESP32 dev boards include a built-in USB-to-serial adapter, but if your board does not, you will also need a USB serial adapter (e.g., FTDI, CP2102, CH340) to flash, debug, and monitor the device via serial connection.</p> </li> </ul>"}]}